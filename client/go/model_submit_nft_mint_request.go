/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SubmitNftMintRequest Mint a NFT token in L2
type SubmitNftMintRequest struct {
	// field.SubmitNftMintRequest.exchange
	Exchange string `json:"exchange"`
	// minters accountId
	MinterId int64 `json:"minterId"`
	// minters address
	MinterAddress string `json:"minterAddress"`
	// =The account receive the minted NFT token, now should be minter himself.
	ToAccountId int64 `json:"toAccountId"`
	// field.SubmitNftMintRequest.toAddress
	ToAddress *string `json:"toAddress,omitempty"`
	// nftType: 0 for EIP1155, 1 for EIP712. EIP1155 by default.
	NftType int32 `json:"nftType"`
	// field.SubmitNftMintRequest.tokenAddress
	TokenAddress string `json:"tokenAddress"`
	// NFT_ID
	NftId string `json:"nftId"`
	// how many tokens to be mint.
	Amount string `json:"amount"`
	// fee to the creator of each NFT transaction.
	CreatorFeeBips map[string]interface{} `json:"creatorFeeBips,omitempty"`
	// field.SubmitNftMintRequest.royaltyPercentage
	RoyaltyPercentage map[string]interface{} `json:"royaltyPercentage,omitempty"`
	// field.SubmitNftMintRequest.validUntil
	ValidUntil int64 `json:"validUntil"`
	// field.SubmitNftMintRequest.storageId
	StorageId int32           `json:"storageId"`
	MaxFee    TokenAmountInfo `json:"maxFee"`
	// field.SubmitNftMintRequest.eddsaSignature
	EddsaSignature *string `json:"eddsaSignature,omitempty"`
	// field.SubmitNftMintRequest.ecdsaSignature
	EcdsaSignature *string `json:"ecdsaSignature,omitempty"`
	// field.SubmitNftMintRequest.hashApproved
	HashApproved *string `json:"hashApproved,omitempty"`
	// force to mint, regardless the previous mint record
	ForceToMint           *bool                  `json:"forceToMint,omitempty"`
	CounterFactualNftInfo *CounterFactualNftInfo `json:"counterFactualNftInfo,omitempty"`
	// field.CounterFactualNftInfo.royaltyAddress
	RoyaltyAddress *string `json:"royaltyAddress,omitempty"`
}

// NewSubmitNftMintRequest instantiates a new SubmitNftMintRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitNftMintRequest(exchange string, minterId int64, minterAddress string, toAccountId int64, nftType int32, tokenAddress string, nftId string, amount string, validUntil int64, storageId int32, maxFee TokenAmountInfo) *SubmitNftMintRequest {
	this := SubmitNftMintRequest{}
	this.Exchange = exchange
	this.MinterId = minterId
	this.MinterAddress = minterAddress
	this.ToAccountId = toAccountId
	this.NftType = nftType
	this.TokenAddress = tokenAddress
	this.NftId = nftId
	this.Amount = amount
	this.ValidUntil = validUntil
	this.StorageId = storageId
	this.MaxFee = maxFee
	return &this
}

// NewSubmitNftMintRequestWithDefaults instantiates a new SubmitNftMintRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitNftMintRequestWithDefaults() *SubmitNftMintRequest {
	this := SubmitNftMintRequest{}
	return &this
}

// GetExchange returns the Exchange field value
func (o *SubmitNftMintRequest) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *SubmitNftMintRequest) SetExchange(v string) {
	o.Exchange = v
}

// GetMinterId returns the MinterId field value
func (o *SubmitNftMintRequest) GetMinterId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinterId
}

// GetMinterIdOk returns a tuple with the MinterId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetMinterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinterId, true
}

// SetMinterId sets field value
func (o *SubmitNftMintRequest) SetMinterId(v int64) {
	o.MinterId = v
}

// GetMinterAddress returns the MinterAddress field value
func (o *SubmitNftMintRequest) GetMinterAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinterAddress
}

// GetMinterAddressOk returns a tuple with the MinterAddress field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetMinterAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinterAddress, true
}

// SetMinterAddress sets field value
func (o *SubmitNftMintRequest) SetMinterAddress(v string) {
	o.MinterAddress = v
}

// GetToAccountId returns the ToAccountId field value
func (o *SubmitNftMintRequest) GetToAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToAccountId
}

// GetToAccountIdOk returns a tuple with the ToAccountId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetToAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAccountId, true
}

// SetToAccountId sets field value
func (o *SubmitNftMintRequest) SetToAccountId(v int64) {
	o.ToAccountId = v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetToAddress() string {
	if o == nil || o.ToAddress == nil {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetToAddressOk() (*string, bool) {
	if o == nil || o.ToAddress == nil {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasToAddress() bool {
	if o != nil && o.ToAddress != nil {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *SubmitNftMintRequest) SetToAddress(v string) {
	o.ToAddress = &v
}

// GetNftType returns the NftType field value
func (o *SubmitNftMintRequest) GetNftType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NftType
}

// GetNftTypeOk returns a tuple with the NftType field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetNftTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftType, true
}

// SetNftType sets field value
func (o *SubmitNftMintRequest) SetNftType(v int32) {
	o.NftType = v
}

// GetTokenAddress returns the TokenAddress field value
func (o *SubmitNftMintRequest) GetTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAddress, true
}

// SetTokenAddress sets field value
func (o *SubmitNftMintRequest) SetTokenAddress(v string) {
	o.TokenAddress = v
}

// GetNftId returns the NftId field value
func (o *SubmitNftMintRequest) GetNftId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftId
}

// GetNftIdOk returns a tuple with the NftId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetNftIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftId, true
}

// SetNftId sets field value
func (o *SubmitNftMintRequest) SetNftId(v string) {
	o.NftId = v
}

// GetAmount returns the Amount field value
func (o *SubmitNftMintRequest) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SubmitNftMintRequest) SetAmount(v string) {
	o.Amount = v
}

// GetCreatorFeeBips returns the CreatorFeeBips field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetCreatorFeeBips() map[string]interface{} {
	if o == nil || o.CreatorFeeBips == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CreatorFeeBips
}

// GetCreatorFeeBipsOk returns a tuple with the CreatorFeeBips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetCreatorFeeBipsOk() (map[string]interface{}, bool) {
	if o == nil || o.CreatorFeeBips == nil {
		return nil, false
	}
	return o.CreatorFeeBips, true
}

// HasCreatorFeeBips returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasCreatorFeeBips() bool {
	if o != nil && o.CreatorFeeBips != nil {
		return true
	}

	return false
}

// SetCreatorFeeBips gets a reference to the given map[string]interface{} and assigns it to the CreatorFeeBips field.
func (o *SubmitNftMintRequest) SetCreatorFeeBips(v map[string]interface{}) {
	o.CreatorFeeBips = v
}

// GetRoyaltyPercentage returns the RoyaltyPercentage field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetRoyaltyPercentage() map[string]interface{} {
	if o == nil || o.RoyaltyPercentage == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.RoyaltyPercentage
}

// GetRoyaltyPercentageOk returns a tuple with the RoyaltyPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetRoyaltyPercentageOk() (map[string]interface{}, bool) {
	if o == nil || o.RoyaltyPercentage == nil {
		return nil, false
	}
	return o.RoyaltyPercentage, true
}

// HasRoyaltyPercentage returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasRoyaltyPercentage() bool {
	if o != nil && o.RoyaltyPercentage != nil {
		return true
	}

	return false
}

// SetRoyaltyPercentage gets a reference to the given map[string]interface{} and assigns it to the RoyaltyPercentage field.
func (o *SubmitNftMintRequest) SetRoyaltyPercentage(v map[string]interface{}) {
	o.RoyaltyPercentage = v
}

// GetValidUntil returns the ValidUntil field value
func (o *SubmitNftMintRequest) GetValidUntil() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetValidUntilOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *SubmitNftMintRequest) SetValidUntil(v int64) {
	o.ValidUntil = v
}

// GetStorageId returns the StorageId field value
func (o *SubmitNftMintRequest) GetStorageId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetStorageIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *SubmitNftMintRequest) SetStorageId(v int32) {
	o.StorageId = v
}

// GetMaxFee returns the MaxFee field value
func (o *SubmitNftMintRequest) GetMaxFee() TokenAmountInfo {
	if o == nil {
		var ret TokenAmountInfo
		return ret
	}

	return o.MaxFee
}

// GetMaxFeeOk returns a tuple with the MaxFee field value
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetMaxFeeOk() (*TokenAmountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFee, true
}

// SetMaxFee sets field value
func (o *SubmitNftMintRequest) SetMaxFee(v TokenAmountInfo) {
	o.MaxFee = v
}

// GetEddsaSignature returns the EddsaSignature field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetEddsaSignature() string {
	if o == nil || o.EddsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EddsaSignature
}

// GetEddsaSignatureOk returns a tuple with the EddsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetEddsaSignatureOk() (*string, bool) {
	if o == nil || o.EddsaSignature == nil {
		return nil, false
	}
	return o.EddsaSignature, true
}

// HasEddsaSignature returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasEddsaSignature() bool {
	if o != nil && o.EddsaSignature != nil {
		return true
	}

	return false
}

// SetEddsaSignature gets a reference to the given string and assigns it to the EddsaSignature field.
func (o *SubmitNftMintRequest) SetEddsaSignature(v string) {
	o.EddsaSignature = &v
}

// GetEcdsaSignature returns the EcdsaSignature field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetEcdsaSignature() string {
	if o == nil || o.EcdsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EcdsaSignature
}

// GetEcdsaSignatureOk returns a tuple with the EcdsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetEcdsaSignatureOk() (*string, bool) {
	if o == nil || o.EcdsaSignature == nil {
		return nil, false
	}
	return o.EcdsaSignature, true
}

// HasEcdsaSignature returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasEcdsaSignature() bool {
	if o != nil && o.EcdsaSignature != nil {
		return true
	}

	return false
}

// SetEcdsaSignature gets a reference to the given string and assigns it to the EcdsaSignature field.
func (o *SubmitNftMintRequest) SetEcdsaSignature(v string) {
	o.EcdsaSignature = &v
}

// GetHashApproved returns the HashApproved field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetHashApproved() string {
	if o == nil || o.HashApproved == nil {
		var ret string
		return ret
	}
	return *o.HashApproved
}

// GetHashApprovedOk returns a tuple with the HashApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetHashApprovedOk() (*string, bool) {
	if o == nil || o.HashApproved == nil {
		return nil, false
	}
	return o.HashApproved, true
}

// HasHashApproved returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasHashApproved() bool {
	if o != nil && o.HashApproved != nil {
		return true
	}

	return false
}

// SetHashApproved gets a reference to the given string and assigns it to the HashApproved field.
func (o *SubmitNftMintRequest) SetHashApproved(v string) {
	o.HashApproved = &v
}

// GetForceToMint returns the ForceToMint field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetForceToMint() bool {
	if o == nil || o.ForceToMint == nil {
		var ret bool
		return ret
	}
	return *o.ForceToMint
}

// GetForceToMintOk returns a tuple with the ForceToMint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetForceToMintOk() (*bool, bool) {
	if o == nil || o.ForceToMint == nil {
		return nil, false
	}
	return o.ForceToMint, true
}

// HasForceToMint returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasForceToMint() bool {
	if o != nil && o.ForceToMint != nil {
		return true
	}

	return false
}

// SetForceToMint gets a reference to the given bool and assigns it to the ForceToMint field.
func (o *SubmitNftMintRequest) SetForceToMint(v bool) {
	o.ForceToMint = &v
}

// GetCounterFactualNftInfo returns the CounterFactualNftInfo field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetCounterFactualNftInfo() CounterFactualNftInfo {
	if o == nil || o.CounterFactualNftInfo == nil {
		var ret CounterFactualNftInfo
		return ret
	}
	return *o.CounterFactualNftInfo
}

// GetCounterFactualNftInfoOk returns a tuple with the CounterFactualNftInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetCounterFactualNftInfoOk() (*CounterFactualNftInfo, bool) {
	if o == nil || o.CounterFactualNftInfo == nil {
		return nil, false
	}
	return o.CounterFactualNftInfo, true
}

// HasCounterFactualNftInfo returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasCounterFactualNftInfo() bool {
	if o != nil && o.CounterFactualNftInfo != nil {
		return true
	}

	return false
}

// SetCounterFactualNftInfo gets a reference to the given CounterFactualNftInfo and assigns it to the CounterFactualNftInfo field.
func (o *SubmitNftMintRequest) SetCounterFactualNftInfo(v CounterFactualNftInfo) {
	o.CounterFactualNftInfo = &v
}

// GetRoyaltyAddress returns the RoyaltyAddress field value if set, zero value otherwise.
func (o *SubmitNftMintRequest) GetRoyaltyAddress() string {
	if o == nil || o.RoyaltyAddress == nil {
		var ret string
		return ret
	}
	return *o.RoyaltyAddress
}

// GetRoyaltyAddressOk returns a tuple with the RoyaltyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftMintRequest) GetRoyaltyAddressOk() (*string, bool) {
	if o == nil || o.RoyaltyAddress == nil {
		return nil, false
	}
	return o.RoyaltyAddress, true
}

// HasRoyaltyAddress returns a boolean if a field has been set.
func (o *SubmitNftMintRequest) HasRoyaltyAddress() bool {
	if o != nil && o.RoyaltyAddress != nil {
		return true
	}

	return false
}

// SetRoyaltyAddress gets a reference to the given string and assigns it to the RoyaltyAddress field.
func (o *SubmitNftMintRequest) SetRoyaltyAddress(v string) {
	o.RoyaltyAddress = &v
}

func (o SubmitNftMintRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["minterId"] = o.MinterId
	}
	if true {
		toSerialize["minterAddress"] = o.MinterAddress
	}
	if true {
		toSerialize["toAccountId"] = o.ToAccountId
	}
	if o.ToAddress != nil {
		toSerialize["toAddress"] = o.ToAddress
	}
	if true {
		toSerialize["nftType"] = o.NftType
	}
	if true {
		toSerialize["tokenAddress"] = o.TokenAddress
	}
	if true {
		toSerialize["nftId"] = o.NftId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.CreatorFeeBips != nil {
		toSerialize["creatorFeeBips"] = o.CreatorFeeBips
	}
	if o.RoyaltyPercentage != nil {
		toSerialize["royaltyPercentage"] = o.RoyaltyPercentage
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	if true {
		toSerialize["maxFee"] = o.MaxFee
	}
	if o.EddsaSignature != nil {
		toSerialize["eddsaSignature"] = o.EddsaSignature
	}
	if o.EcdsaSignature != nil {
		toSerialize["ecdsaSignature"] = o.EcdsaSignature
	}
	if o.HashApproved != nil {
		toSerialize["hashApproved"] = o.HashApproved
	}
	if o.ForceToMint != nil {
		toSerialize["forceToMint"] = o.ForceToMint
	}
	if o.CounterFactualNftInfo != nil {
		toSerialize["counterFactualNftInfo"] = o.CounterFactualNftInfo
	}
	if o.RoyaltyAddress != nil {
		toSerialize["royaltyAddress"] = o.RoyaltyAddress
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitNftMintRequest struct {
	value *SubmitNftMintRequest
	isSet bool
}

func (v NullableSubmitNftMintRequest) Get() *SubmitNftMintRequest {
	return v.value
}

func (v *NullableSubmitNftMintRequest) Set(val *SubmitNftMintRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitNftMintRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitNftMintRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitNftMintRequest(val *SubmitNftMintRequest) *NullableSubmitNftMintRequest {
	return &NullableSubmitNftMintRequest{value: val, isSet: true}
}

func (v NullableSubmitNftMintRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitNftMintRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
