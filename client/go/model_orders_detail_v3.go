/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OrdersDetailV3 Response orders
type OrdersDetailV3 struct {
	// Total number of orders
	TotalNum int64 `json:"totalNum"`
	// List of order
	Orders []OrderDetailV3 `json:"orders,omitempty"`
}

// NewOrdersDetailV3 instantiates a new OrdersDetailV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrdersDetailV3(totalNum int64) *OrdersDetailV3 {
	this := OrdersDetailV3{}
	this.TotalNum = totalNum
	return &this
}

// NewOrdersDetailV3WithDefaults instantiates a new OrdersDetailV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersDetailV3WithDefaults() *OrdersDetailV3 {
	this := OrdersDetailV3{}
	return &this
}

// GetTotalNum returns the TotalNum field value
func (o *OrdersDetailV3) GetTotalNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalNum
}

// GetTotalNumOk returns a tuple with the TotalNum field value
// and a boolean to check if the value has been set.
func (o *OrdersDetailV3) GetTotalNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNum, true
}

// SetTotalNum sets field value
func (o *OrdersDetailV3) SetTotalNum(v int64) {
	o.TotalNum = v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *OrdersDetailV3) GetOrders() []OrderDetailV3 {
	if o == nil || o.Orders == nil {
		var ret []OrderDetailV3
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersDetailV3) GetOrdersOk() ([]OrderDetailV3, bool) {
	if o == nil || o.Orders == nil {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *OrdersDetailV3) HasOrders() bool {
	if o != nil && o.Orders != nil {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []OrderDetailV3 and assigns it to the Orders field.
func (o *OrdersDetailV3) SetOrders(v []OrderDetailV3) {
	o.Orders = v
}

func (o OrdersDetailV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalNum"] = o.TotalNum
	}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return json.Marshal(toSerialize)
}

type NullableOrdersDetailV3 struct {
	value *OrdersDetailV3
	isSet bool
}

func (v NullableOrdersDetailV3) Get() *OrdersDetailV3 {
	return v.value
}

func (v *NullableOrdersDetailV3) Set(val *OrdersDetailV3) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersDetailV3) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersDetailV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersDetailV3(val *OrdersDetailV3) *NullableOrdersDetailV3 {
	return &NullableOrdersDetailV3{value: val, isSet: true}
}

func (v NullableOrdersDetailV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersDetailV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
