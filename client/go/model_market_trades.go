/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// MarketTrades model.marketTrades
type MarketTrades struct {
	// The total number of trades in query result
	TotalNum int64 `json:"totalNum"`
	// List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market, fees, blockId and indexInBlock
	Trades [][]string `json:"trades"`
}

// NewMarketTrades instantiates a new MarketTrades object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketTrades(totalNum int64, trades [][]string) *MarketTrades {
	this := MarketTrades{}
	this.TotalNum = totalNum
	this.Trades = trades
	return &this
}

// NewMarketTradesWithDefaults instantiates a new MarketTrades object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketTradesWithDefaults() *MarketTrades {
	this := MarketTrades{}
	return &this
}

// GetTotalNum returns the TotalNum field value
func (o *MarketTrades) GetTotalNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalNum
}

// GetTotalNumOk returns a tuple with the TotalNum field value
// and a boolean to check if the value has been set.
func (o *MarketTrades) GetTotalNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNum, true
}

// SetTotalNum sets field value
func (o *MarketTrades) SetTotalNum(v int64) {
	o.TotalNum = v
}

// GetTrades returns the Trades field value
func (o *MarketTrades) GetTrades() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Trades
}

// GetTradesOk returns a tuple with the Trades field value
// and a boolean to check if the value has been set.
func (o *MarketTrades) GetTradesOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trades, true
}

// SetTrades sets field value
func (o *MarketTrades) SetTrades(v [][]string) {
	o.Trades = v
}

func (o MarketTrades) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalNum"] = o.TotalNum
	}
	if true {
		toSerialize["trades"] = o.Trades
	}
	return json.Marshal(toSerialize)
}

type NullableMarketTrades struct {
	value *MarketTrades
	isSet bool
}

func (v NullableMarketTrades) Get() *MarketTrades {
	return v.value
}

func (v *NullableMarketTrades) Set(val *MarketTrades) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketTrades) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketTrades) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketTrades(val *MarketTrades) *NullableMarketTrades {
	return &NullableMarketTrades{value: val, isSet: true}
}

func (v NullableMarketTrades) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketTrades) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
