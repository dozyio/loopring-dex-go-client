/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SubmitMintNftResponseItem Mint response
type SubmitMintNftResponseItem struct {
	// Mint request hash.
	Hash string `json:"hash"`
	// field.SubmitMintNftResponseItem.nftTokenId
	NftTokenId int32 `json:"nftTokenId"`
	// Mint tokens nftData.
	NftData string `json:"nftData"`
	// Mint status.
	Status string `json:"status"`
	// Idempotent of submit order response. True if the same request is sent more than once.
	IsIdempotent bool `json:"isIdempotent"`
	// field.SubmitOffChainResponseItem.accountId
	AccountId int64 `json:"accountId"`
	// field.SubmitOffChainResponseItem.storageId
	StorageId int64 `json:"storageId"`
}

// NewSubmitMintNftResponseItem instantiates a new SubmitMintNftResponseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitMintNftResponseItem(hash string, nftTokenId int32, nftData string, status string, isIdempotent bool, accountId int64, storageId int64) *SubmitMintNftResponseItem {
	this := SubmitMintNftResponseItem{}
	this.Hash = hash
	this.NftTokenId = nftTokenId
	this.NftData = nftData
	this.Status = status
	this.IsIdempotent = isIdempotent
	this.AccountId = accountId
	this.StorageId = storageId
	return &this
}

// NewSubmitMintNftResponseItemWithDefaults instantiates a new SubmitMintNftResponseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitMintNftResponseItemWithDefaults() *SubmitMintNftResponseItem {
	this := SubmitMintNftResponseItem{}
	return &this
}

// GetHash returns the Hash field value
func (o *SubmitMintNftResponseItem) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *SubmitMintNftResponseItem) SetHash(v string) {
	o.Hash = v
}

// GetNftTokenId returns the NftTokenId field value
func (o *SubmitMintNftResponseItem) GetNftTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NftTokenId
}

// GetNftTokenIdOk returns a tuple with the NftTokenId field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetNftTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftTokenId, true
}

// SetNftTokenId sets field value
func (o *SubmitMintNftResponseItem) SetNftTokenId(v int32) {
	o.NftTokenId = v
}

// GetNftData returns the NftData field value
func (o *SubmitMintNftResponseItem) GetNftData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetNftDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftData, true
}

// SetNftData sets field value
func (o *SubmitMintNftResponseItem) SetNftData(v string) {
	o.NftData = v
}

// GetStatus returns the Status field value
func (o *SubmitMintNftResponseItem) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubmitMintNftResponseItem) SetStatus(v string) {
	o.Status = v
}

// GetIsIdempotent returns the IsIdempotent field value
func (o *SubmitMintNftResponseItem) GetIsIdempotent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsIdempotent
}

// GetIsIdempotentOk returns a tuple with the IsIdempotent field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetIsIdempotentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsIdempotent, true
}

// SetIsIdempotent sets field value
func (o *SubmitMintNftResponseItem) SetIsIdempotent(v bool) {
	o.IsIdempotent = v
}

// GetAccountId returns the AccountId field value
func (o *SubmitMintNftResponseItem) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SubmitMintNftResponseItem) SetAccountId(v int64) {
	o.AccountId = v
}

// GetStorageId returns the StorageId field value
func (o *SubmitMintNftResponseItem) GetStorageId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *SubmitMintNftResponseItem) GetStorageIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *SubmitMintNftResponseItem) SetStorageId(v int64) {
	o.StorageId = v
}

func (o SubmitMintNftResponseItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["nftTokenId"] = o.NftTokenId
	}
	if true {
		toSerialize["nftData"] = o.NftData
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["isIdempotent"] = o.IsIdempotent
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitMintNftResponseItem struct {
	value *SubmitMintNftResponseItem
	isSet bool
}

func (v NullableSubmitMintNftResponseItem) Get() *SubmitMintNftResponseItem {
	return v.value
}

func (v *NullableSubmitMintNftResponseItem) Set(val *SubmitMintNftResponseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitMintNftResponseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitMintNftResponseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitMintNftResponseItem(val *SubmitMintNftResponseItem) *NullableSubmitMintNftResponseItem {
	return &NullableSubmitMintNftResponseItem{value: val, isSet: true}
}

func (v NullableSubmitMintNftResponseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitMintNftResponseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
