/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SubmitNftTradeRequestV3 settle down input NFT order pair
type SubmitNftTradeRequestV3 struct {
	Maker SubmitNftOrderRequestV3 `json:"maker"`
	// The maker feeBips, should <= maxFeeBips in makers order
	MakerFeeBips int32                   `json:"makerFeeBips"`
	Taker        SubmitNftOrderRequestV3 `json:"taker"`
	// The taker feeBips, should <= maxFeeBips in takers order
	TakerFeeBips int32 `json:"takerFeeBips"`
	// If this trade ignores the fees config of each order, only whitelisted user can set this flag.
	IgnoreFees map[string]interface{} `json:"ignoreFees,omitempty"`
	// field.SubmitNftTradeRequestV3.matchByTaker
	MatchByTaker map[string]interface{} `json:"matchByTaker,omitempty"`
}

// NewSubmitNftTradeRequestV3 instantiates a new SubmitNftTradeRequestV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitNftTradeRequestV3(maker SubmitNftOrderRequestV3, makerFeeBips int32, taker SubmitNftOrderRequestV3, takerFeeBips int32) *SubmitNftTradeRequestV3 {
	this := SubmitNftTradeRequestV3{}
	this.Maker = maker
	this.MakerFeeBips = makerFeeBips
	this.Taker = taker
	this.TakerFeeBips = takerFeeBips
	return &this
}

// NewSubmitNftTradeRequestV3WithDefaults instantiates a new SubmitNftTradeRequestV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitNftTradeRequestV3WithDefaults() *SubmitNftTradeRequestV3 {
	this := SubmitNftTradeRequestV3{}
	return &this
}

// GetMaker returns the Maker field value
func (o *SubmitNftTradeRequestV3) GetMaker() SubmitNftOrderRequestV3 {
	if o == nil {
		var ret SubmitNftOrderRequestV3
		return ret
	}

	return o.Maker
}

// GetMakerOk returns a tuple with the Maker field value
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetMakerOk() (*SubmitNftOrderRequestV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Maker, true
}

// SetMaker sets field value
func (o *SubmitNftTradeRequestV3) SetMaker(v SubmitNftOrderRequestV3) {
	o.Maker = v
}

// GetMakerFeeBips returns the MakerFeeBips field value
func (o *SubmitNftTradeRequestV3) GetMakerFeeBips() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MakerFeeBips
}

// GetMakerFeeBipsOk returns a tuple with the MakerFeeBips field value
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetMakerFeeBipsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MakerFeeBips, true
}

// SetMakerFeeBips sets field value
func (o *SubmitNftTradeRequestV3) SetMakerFeeBips(v int32) {
	o.MakerFeeBips = v
}

// GetTaker returns the Taker field value
func (o *SubmitNftTradeRequestV3) GetTaker() SubmitNftOrderRequestV3 {
	if o == nil {
		var ret SubmitNftOrderRequestV3
		return ret
	}

	return o.Taker
}

// GetTakerOk returns a tuple with the Taker field value
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetTakerOk() (*SubmitNftOrderRequestV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Taker, true
}

// SetTaker sets field value
func (o *SubmitNftTradeRequestV3) SetTaker(v SubmitNftOrderRequestV3) {
	o.Taker = v
}

// GetTakerFeeBips returns the TakerFeeBips field value
func (o *SubmitNftTradeRequestV3) GetTakerFeeBips() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TakerFeeBips
}

// GetTakerFeeBipsOk returns a tuple with the TakerFeeBips field value
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetTakerFeeBipsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TakerFeeBips, true
}

// SetTakerFeeBips sets field value
func (o *SubmitNftTradeRequestV3) SetTakerFeeBips(v int32) {
	o.TakerFeeBips = v
}

// GetIgnoreFees returns the IgnoreFees field value if set, zero value otherwise.
func (o *SubmitNftTradeRequestV3) GetIgnoreFees() map[string]interface{} {
	if o == nil || o.IgnoreFees == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.IgnoreFees
}

// GetIgnoreFeesOk returns a tuple with the IgnoreFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetIgnoreFeesOk() (map[string]interface{}, bool) {
	if o == nil || o.IgnoreFees == nil {
		return nil, false
	}
	return o.IgnoreFees, true
}

// HasIgnoreFees returns a boolean if a field has been set.
func (o *SubmitNftTradeRequestV3) HasIgnoreFees() bool {
	if o != nil && o.IgnoreFees != nil {
		return true
	}

	return false
}

// SetIgnoreFees gets a reference to the given map[string]interface{} and assigns it to the IgnoreFees field.
func (o *SubmitNftTradeRequestV3) SetIgnoreFees(v map[string]interface{}) {
	o.IgnoreFees = v
}

// GetMatchByTaker returns the MatchByTaker field value if set, zero value otherwise.
func (o *SubmitNftTradeRequestV3) GetMatchByTaker() map[string]interface{} {
	if o == nil || o.MatchByTaker == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchByTaker
}

// GetMatchByTakerOk returns a tuple with the MatchByTaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftTradeRequestV3) GetMatchByTakerOk() (map[string]interface{}, bool) {
	if o == nil || o.MatchByTaker == nil {
		return nil, false
	}
	return o.MatchByTaker, true
}

// HasMatchByTaker returns a boolean if a field has been set.
func (o *SubmitNftTradeRequestV3) HasMatchByTaker() bool {
	if o != nil && o.MatchByTaker != nil {
		return true
	}

	return false
}

// SetMatchByTaker gets a reference to the given map[string]interface{} and assigns it to the MatchByTaker field.
func (o *SubmitNftTradeRequestV3) SetMatchByTaker(v map[string]interface{}) {
	o.MatchByTaker = v
}

func (o SubmitNftTradeRequestV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["maker"] = o.Maker
	}
	if true {
		toSerialize["makerFeeBips"] = o.MakerFeeBips
	}
	if true {
		toSerialize["taker"] = o.Taker
	}
	if true {
		toSerialize["takerFeeBips"] = o.TakerFeeBips
	}
	if o.IgnoreFees != nil {
		toSerialize["ignoreFees"] = o.IgnoreFees
	}
	if o.MatchByTaker != nil {
		toSerialize["matchByTaker"] = o.MatchByTaker
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitNftTradeRequestV3 struct {
	value *SubmitNftTradeRequestV3
	isSet bool
}

func (v NullableSubmitNftTradeRequestV3) Get() *SubmitNftTradeRequestV3 {
	return v.value
}

func (v *NullableSubmitNftTradeRequestV3) Set(val *SubmitNftTradeRequestV3) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitNftTradeRequestV3) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitNftTradeRequestV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitNftTradeRequestV3(val *SubmitNftTradeRequestV3) *NullableSubmitNftTradeRequestV3 {
	return &NullableSubmitNftTradeRequestV3{value: val, isSet: true}
}

func (v NullableSubmitNftTradeRequestV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitNftTradeRequestV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
