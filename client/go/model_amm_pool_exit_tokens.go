/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// AmmPoolExitTokens escribes an AMM join transaction
type AmmPoolExitTokens struct {
	// Describes list of the amount of a specific token to be removed from the pool, tokens seq should be same as AMM pool info
	UnPooled []TokenVolumeV3 `json:"unPooled"`
	// The minimum amoun of LP token to burn
	Burned string `json:"burned"`
}

// NewAmmPoolExitTokens instantiates a new AmmPoolExitTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmmPoolExitTokens(unPooled []TokenVolumeV3, burned string) *AmmPoolExitTokens {
	this := AmmPoolExitTokens{}
	this.UnPooled = unPooled
	this.Burned = burned
	return &this
}

// NewAmmPoolExitTokensWithDefaults instantiates a new AmmPoolExitTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmmPoolExitTokensWithDefaults() *AmmPoolExitTokens {
	this := AmmPoolExitTokens{}
	return &this
}

// GetUnPooled returns the UnPooled field value
func (o *AmmPoolExitTokens) GetUnPooled() []TokenVolumeV3 {
	if o == nil {
		var ret []TokenVolumeV3
		return ret
	}

	return o.UnPooled
}

// GetUnPooledOk returns a tuple with the UnPooled field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitTokens) GetUnPooledOk() ([]TokenVolumeV3, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnPooled, true
}

// SetUnPooled sets field value
func (o *AmmPoolExitTokens) SetUnPooled(v []TokenVolumeV3) {
	o.UnPooled = v
}

// GetBurned returns the Burned field value
func (o *AmmPoolExitTokens) GetBurned() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Burned
}

// GetBurnedOk returns a tuple with the Burned field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitTokens) GetBurnedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Burned, true
}

// SetBurned sets field value
func (o *AmmPoolExitTokens) SetBurned(v string) {
	o.Burned = v
}

func (o AmmPoolExitTokens) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["unPooled"] = o.UnPooled
	}
	if true {
		toSerialize["burned"] = o.Burned
	}
	return json.Marshal(toSerialize)
}

type NullableAmmPoolExitTokens struct {
	value *AmmPoolExitTokens
	isSet bool
}

func (v NullableAmmPoolExitTokens) Get() *AmmPoolExitTokens {
	return v.value
}

func (v *NullableAmmPoolExitTokens) Set(val *AmmPoolExitTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableAmmPoolExitTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableAmmPoolExitTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmmPoolExitTokens(val *AmmPoolExitTokens) *NullableAmmPoolExitTokens {
	return &NullableAmmPoolExitTokens{value: val, isSet: true}
}

func (v NullableAmmPoolExitTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmmPoolExitTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
