/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftStatusInfo struct for NftStatusInfo
type NftStatusInfo struct {
	DeploymentStatus      string `json:"deploymentStatus"`
	IsCounterFactualNFT   bool   `json:"isCounterFactualNFT"`
	NftType               string `json:"nftType"`
	TokenAddress          string `json:"tokenAddress"`
	NftId                 string `json:"nftId"`
	IsDeployAndWithdrawal bool   `json:"isDeployAndWithdrawal"`
}

// NewNftStatusInfo instantiates a new NftStatusInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftStatusInfo(deploymentStatus string, isCounterFactualNFT bool, nftType string, tokenAddress string, nftId string, isDeployAndWithdrawal bool) *NftStatusInfo {
	this := NftStatusInfo{}
	this.DeploymentStatus = deploymentStatus
	this.IsCounterFactualNFT = isCounterFactualNFT
	this.NftType = nftType
	this.TokenAddress = tokenAddress
	this.NftId = nftId
	this.IsDeployAndWithdrawal = isDeployAndWithdrawal
	return &this
}

// NewNftStatusInfoWithDefaults instantiates a new NftStatusInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftStatusInfoWithDefaults() *NftStatusInfo {
	this := NftStatusInfo{}
	return &this
}

// GetDeploymentStatus returns the DeploymentStatus field value
func (o *NftStatusInfo) GetDeploymentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentStatus
}

// GetDeploymentStatusOk returns a tuple with the DeploymentStatus field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetDeploymentStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentStatus, true
}

// SetDeploymentStatus sets field value
func (o *NftStatusInfo) SetDeploymentStatus(v string) {
	o.DeploymentStatus = v
}

// GetIsCounterFactualNFT returns the IsCounterFactualNFT field value
func (o *NftStatusInfo) GetIsCounterFactualNFT() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCounterFactualNFT
}

// GetIsCounterFactualNFTOk returns a tuple with the IsCounterFactualNFT field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetIsCounterFactualNFTOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCounterFactualNFT, true
}

// SetIsCounterFactualNFT sets field value
func (o *NftStatusInfo) SetIsCounterFactualNFT(v bool) {
	o.IsCounterFactualNFT = v
}

// GetNftType returns the NftType field value
func (o *NftStatusInfo) GetNftType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftType
}

// GetNftTypeOk returns a tuple with the NftType field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetNftTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftType, true
}

// SetNftType sets field value
func (o *NftStatusInfo) SetNftType(v string) {
	o.NftType = v
}

// GetTokenAddress returns the TokenAddress field value
func (o *NftStatusInfo) GetTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAddress, true
}

// SetTokenAddress sets field value
func (o *NftStatusInfo) SetTokenAddress(v string) {
	o.TokenAddress = v
}

// GetNftId returns the NftId field value
func (o *NftStatusInfo) GetNftId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftId
}

// GetNftIdOk returns a tuple with the NftId field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetNftIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftId, true
}

// SetNftId sets field value
func (o *NftStatusInfo) SetNftId(v string) {
	o.NftId = v
}

// GetIsDeployAndWithdrawal returns the IsDeployAndWithdrawal field value
func (o *NftStatusInfo) GetIsDeployAndWithdrawal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeployAndWithdrawal
}

// GetIsDeployAndWithdrawalOk returns a tuple with the IsDeployAndWithdrawal field value
// and a boolean to check if the value has been set.
func (o *NftStatusInfo) GetIsDeployAndWithdrawalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeployAndWithdrawal, true
}

// SetIsDeployAndWithdrawal sets field value
func (o *NftStatusInfo) SetIsDeployAndWithdrawal(v bool) {
	o.IsDeployAndWithdrawal = v
}

func (o NftStatusInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["deploymentStatus"] = o.DeploymentStatus
	}
	if true {
		toSerialize["isCounterFactualNFT"] = o.IsCounterFactualNFT
	}
	if true {
		toSerialize["nftType"] = o.NftType
	}
	if true {
		toSerialize["tokenAddress"] = o.TokenAddress
	}
	if true {
		toSerialize["nftId"] = o.NftId
	}
	if true {
		toSerialize["isDeployAndWithdrawal"] = o.IsDeployAndWithdrawal
	}
	return json.Marshal(toSerialize)
}

type NullableNftStatusInfo struct {
	value *NftStatusInfo
	isSet bool
}

func (v NullableNftStatusInfo) Get() *NftStatusInfo {
	return v.value
}

func (v *NullableNftStatusInfo) Set(val *NftStatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNftStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNftStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftStatusInfo(val *NftStatusInfo) *NullableNftStatusInfo {
	return &NullableNftStatusInfo{value: val, isSet: true}
}

func (v NullableNftStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
