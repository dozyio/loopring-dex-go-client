/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SubmitNftOrderRequestV3 Submit an NFT order
type SubmitNftOrderRequestV3 struct {
	// The adderss of the exchange which has to process this order
	Exchange string `json:"exchange"`
	// Loopring's account ID
	AccountId int64 `json:"accountId"`
	// The unique identifier of the L2 Merkle tree storage slot where the burn made in order to exit the pool will or has been stored.
	StorageId int32              `json:"storageId"`
	SellToken NftTokenAmountInfo `json:"sellToken"`
	BuyToken  NftTokenAmountInfo `json:"buyToken"`
	// Whether the order supports partial fills or not.Currently only supports false as a valid value
	AllOrNone *string `json:"allOrNone,omitempty"`
	// Fill size by buy token or by sell token
	FillAmountBOrS *string `json:"fillAmountBOrS,omitempty"`
	// Order expiration time, accuracy is in seconds
	ValidUntil int64 `json:"validUntil"`
	// Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63
	MaxFeeBips int32 `json:"maxFeeBips"`
	// The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation.
	EddsaSignature string `json:"eddsaSignature"`
	// An arbitrary, client-set unique order identifier, max length is 120 bytes
	ClientOrderId *string `json:"clientOrderId,omitempty"`
	// Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY
	OrderType *string `json:"orderType,omitempty"`
	// Order channel, can be ORDER_BOOK, AMM_POOL, MIXED
	TradeChannel *string `json:"tradeChannel,omitempty"`
	// Used by the P2P order which user specify the taker, so far its 0x0000000000000000000000000000000000000000
	Taker *string `json:"taker,omitempty"`
	// An accountID who will recieve a share of the fee of this order
	Affiliate *string `json:"affiliate,omitempty"`
}

// NewSubmitNftOrderRequestV3 instantiates a new SubmitNftOrderRequestV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitNftOrderRequestV3(exchange string, accountId int64, storageId int32, sellToken NftTokenAmountInfo, buyToken NftTokenAmountInfo, validUntil int64, maxFeeBips int32, eddsaSignature string) *SubmitNftOrderRequestV3 {
	this := SubmitNftOrderRequestV3{}
	this.Exchange = exchange
	this.AccountId = accountId
	this.StorageId = storageId
	this.SellToken = sellToken
	this.BuyToken = buyToken
	this.ValidUntil = validUntil
	this.MaxFeeBips = maxFeeBips
	this.EddsaSignature = eddsaSignature
	return &this
}

// NewSubmitNftOrderRequestV3WithDefaults instantiates a new SubmitNftOrderRequestV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitNftOrderRequestV3WithDefaults() *SubmitNftOrderRequestV3 {
	this := SubmitNftOrderRequestV3{}
	return &this
}

// GetExchange returns the Exchange field value
func (o *SubmitNftOrderRequestV3) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *SubmitNftOrderRequestV3) SetExchange(v string) {
	o.Exchange = v
}

// GetAccountId returns the AccountId field value
func (o *SubmitNftOrderRequestV3) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SubmitNftOrderRequestV3) SetAccountId(v int64) {
	o.AccountId = v
}

// GetStorageId returns the StorageId field value
func (o *SubmitNftOrderRequestV3) GetStorageId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetStorageIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *SubmitNftOrderRequestV3) SetStorageId(v int32) {
	o.StorageId = v
}

// GetSellToken returns the SellToken field value
func (o *SubmitNftOrderRequestV3) GetSellToken() NftTokenAmountInfo {
	if o == nil {
		var ret NftTokenAmountInfo
		return ret
	}

	return o.SellToken
}

// GetSellTokenOk returns a tuple with the SellToken field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetSellTokenOk() (*NftTokenAmountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellToken, true
}

// SetSellToken sets field value
func (o *SubmitNftOrderRequestV3) SetSellToken(v NftTokenAmountInfo) {
	o.SellToken = v
}

// GetBuyToken returns the BuyToken field value
func (o *SubmitNftOrderRequestV3) GetBuyToken() NftTokenAmountInfo {
	if o == nil {
		var ret NftTokenAmountInfo
		return ret
	}

	return o.BuyToken
}

// GetBuyTokenOk returns a tuple with the BuyToken field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetBuyTokenOk() (*NftTokenAmountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyToken, true
}

// SetBuyToken sets field value
func (o *SubmitNftOrderRequestV3) SetBuyToken(v NftTokenAmountInfo) {
	o.BuyToken = v
}

// GetAllOrNone returns the AllOrNone field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetAllOrNone() string {
	if o == nil || o.AllOrNone == nil {
		var ret string
		return ret
	}
	return *o.AllOrNone
}

// GetAllOrNoneOk returns a tuple with the AllOrNone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetAllOrNoneOk() (*string, bool) {
	if o == nil || o.AllOrNone == nil {
		return nil, false
	}
	return o.AllOrNone, true
}

// HasAllOrNone returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasAllOrNone() bool {
	if o != nil && o.AllOrNone != nil {
		return true
	}

	return false
}

// SetAllOrNone gets a reference to the given string and assigns it to the AllOrNone field.
func (o *SubmitNftOrderRequestV3) SetAllOrNone(v string) {
	o.AllOrNone = &v
}

// GetFillAmountBOrS returns the FillAmountBOrS field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetFillAmountBOrS() string {
	if o == nil || o.FillAmountBOrS == nil {
		var ret string
		return ret
	}
	return *o.FillAmountBOrS
}

// GetFillAmountBOrSOk returns a tuple with the FillAmountBOrS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetFillAmountBOrSOk() (*string, bool) {
	if o == nil || o.FillAmountBOrS == nil {
		return nil, false
	}
	return o.FillAmountBOrS, true
}

// HasFillAmountBOrS returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasFillAmountBOrS() bool {
	if o != nil && o.FillAmountBOrS != nil {
		return true
	}

	return false
}

// SetFillAmountBOrS gets a reference to the given string and assigns it to the FillAmountBOrS field.
func (o *SubmitNftOrderRequestV3) SetFillAmountBOrS(v string) {
	o.FillAmountBOrS = &v
}

// GetValidUntil returns the ValidUntil field value
func (o *SubmitNftOrderRequestV3) GetValidUntil() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetValidUntilOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *SubmitNftOrderRequestV3) SetValidUntil(v int64) {
	o.ValidUntil = v
}

// GetMaxFeeBips returns the MaxFeeBips field value
func (o *SubmitNftOrderRequestV3) GetMaxFeeBips() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxFeeBips
}

// GetMaxFeeBipsOk returns a tuple with the MaxFeeBips field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetMaxFeeBipsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFeeBips, true
}

// SetMaxFeeBips sets field value
func (o *SubmitNftOrderRequestV3) SetMaxFeeBips(v int32) {
	o.MaxFeeBips = v
}

// GetEddsaSignature returns the EddsaSignature field value
func (o *SubmitNftOrderRequestV3) GetEddsaSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EddsaSignature
}

// GetEddsaSignatureOk returns a tuple with the EddsaSignature field value
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetEddsaSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EddsaSignature, true
}

// SetEddsaSignature sets field value
func (o *SubmitNftOrderRequestV3) SetEddsaSignature(v string) {
	o.EddsaSignature = v
}

// GetClientOrderId returns the ClientOrderId field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetClientOrderId() string {
	if o == nil || o.ClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetClientOrderIdOk() (*string, bool) {
	if o == nil || o.ClientOrderId == nil {
		return nil, false
	}
	return o.ClientOrderId, true
}

// HasClientOrderId returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasClientOrderId() bool {
	if o != nil && o.ClientOrderId != nil {
		return true
	}

	return false
}

// SetClientOrderId gets a reference to the given string and assigns it to the ClientOrderId field.
func (o *SubmitNftOrderRequestV3) SetClientOrderId(v string) {
	o.ClientOrderId = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetOrderType() string {
	if o == nil || o.OrderType == nil {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetOrderTypeOk() (*string, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *SubmitNftOrderRequestV3) SetOrderType(v string) {
	o.OrderType = &v
}

// GetTradeChannel returns the TradeChannel field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetTradeChannel() string {
	if o == nil || o.TradeChannel == nil {
		var ret string
		return ret
	}
	return *o.TradeChannel
}

// GetTradeChannelOk returns a tuple with the TradeChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetTradeChannelOk() (*string, bool) {
	if o == nil || o.TradeChannel == nil {
		return nil, false
	}
	return o.TradeChannel, true
}

// HasTradeChannel returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasTradeChannel() bool {
	if o != nil && o.TradeChannel != nil {
		return true
	}

	return false
}

// SetTradeChannel gets a reference to the given string and assigns it to the TradeChannel field.
func (o *SubmitNftOrderRequestV3) SetTradeChannel(v string) {
	o.TradeChannel = &v
}

// GetTaker returns the Taker field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetTaker() string {
	if o == nil || o.Taker == nil {
		var ret string
		return ret
	}
	return *o.Taker
}

// GetTakerOk returns a tuple with the Taker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetTakerOk() (*string, bool) {
	if o == nil || o.Taker == nil {
		return nil, false
	}
	return o.Taker, true
}

// HasTaker returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasTaker() bool {
	if o != nil && o.Taker != nil {
		return true
	}

	return false
}

// SetTaker gets a reference to the given string and assigns it to the Taker field.
func (o *SubmitNftOrderRequestV3) SetTaker(v string) {
	o.Taker = &v
}

// GetAffiliate returns the Affiliate field value if set, zero value otherwise.
func (o *SubmitNftOrderRequestV3) GetAffiliate() string {
	if o == nil || o.Affiliate == nil {
		var ret string
		return ret
	}
	return *o.Affiliate
}

// GetAffiliateOk returns a tuple with the Affiliate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitNftOrderRequestV3) GetAffiliateOk() (*string, bool) {
	if o == nil || o.Affiliate == nil {
		return nil, false
	}
	return o.Affiliate, true
}

// HasAffiliate returns a boolean if a field has been set.
func (o *SubmitNftOrderRequestV3) HasAffiliate() bool {
	if o != nil && o.Affiliate != nil {
		return true
	}

	return false
}

// SetAffiliate gets a reference to the given string and assigns it to the Affiliate field.
func (o *SubmitNftOrderRequestV3) SetAffiliate(v string) {
	o.Affiliate = &v
}

func (o SubmitNftOrderRequestV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	if true {
		toSerialize["sellToken"] = o.SellToken
	}
	if true {
		toSerialize["buyToken"] = o.BuyToken
	}
	if o.AllOrNone != nil {
		toSerialize["allOrNone"] = o.AllOrNone
	}
	if o.FillAmountBOrS != nil {
		toSerialize["fillAmountBOrS"] = o.FillAmountBOrS
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if true {
		toSerialize["maxFeeBips"] = o.MaxFeeBips
	}
	if true {
		toSerialize["eddsaSignature"] = o.EddsaSignature
	}
	if o.ClientOrderId != nil {
		toSerialize["clientOrderId"] = o.ClientOrderId
	}
	if o.OrderType != nil {
		toSerialize["orderType"] = o.OrderType
	}
	if o.TradeChannel != nil {
		toSerialize["tradeChannel"] = o.TradeChannel
	}
	if o.Taker != nil {
		toSerialize["taker"] = o.Taker
	}
	if o.Affiliate != nil {
		toSerialize["affiliate"] = o.Affiliate
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitNftOrderRequestV3 struct {
	value *SubmitNftOrderRequestV3
	isSet bool
}

func (v NullableSubmitNftOrderRequestV3) Get() *SubmitNftOrderRequestV3 {
	return v.value
}

func (v *NullableSubmitNftOrderRequestV3) Set(val *SubmitNftOrderRequestV3) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitNftOrderRequestV3) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitNftOrderRequestV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitNftOrderRequestV3(val *SubmitNftOrderRequestV3) *NullableSubmitNftOrderRequestV3 {
	return &NullableSubmitNftOrderRequestV3{value: val, isSet: true}
}

func (v NullableSubmitNftOrderRequestV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitNftOrderRequestV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
