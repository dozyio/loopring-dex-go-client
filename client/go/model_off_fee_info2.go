/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OffFeeInfo2 Off-chain fee info charged by loopring exchange.
type OffFeeInfo2 struct {
	// fee token
	Token string `json:"token"`
	// field.offFeeInfo.tokenId
	TokenId int32 `json:"tokenId"`
	// fee amount
	Fee string `json:"fee"`
	// token discount
	Discount float64 `json:"discount"`
}

// NewOffFeeInfo2 instantiates a new OffFeeInfo2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffFeeInfo2(token string, tokenId int32, fee string, discount float64) *OffFeeInfo2 {
	this := OffFeeInfo2{}
	this.Token = token
	this.TokenId = tokenId
	this.Fee = fee
	this.Discount = discount
	return &this
}

// NewOffFeeInfo2WithDefaults instantiates a new OffFeeInfo2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffFeeInfo2WithDefaults() *OffFeeInfo2 {
	this := OffFeeInfo2{}
	return &this
}

// GetToken returns the Token field value
func (o *OffFeeInfo2) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *OffFeeInfo2) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *OffFeeInfo2) SetToken(v string) {
	o.Token = v
}

// GetTokenId returns the TokenId field value
func (o *OffFeeInfo2) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *OffFeeInfo2) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *OffFeeInfo2) SetTokenId(v int32) {
	o.TokenId = v
}

// GetFee returns the Fee field value
func (o *OffFeeInfo2) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *OffFeeInfo2) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *OffFeeInfo2) SetFee(v string) {
	o.Fee = v
}

// GetDiscount returns the Discount field value
func (o *OffFeeInfo2) GetDiscount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value
// and a boolean to check if the value has been set.
func (o *OffFeeInfo2) GetDiscountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discount, true
}

// SetDiscount sets field value
func (o *OffFeeInfo2) SetDiscount(v float64) {
	o.Discount = v
}

func (o OffFeeInfo2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if true {
		toSerialize["discount"] = o.Discount
	}
	return json.Marshal(toSerialize)
}

type NullableOffFeeInfo2 struct {
	value *OffFeeInfo2
	isSet bool
}

func (v NullableOffFeeInfo2) Get() *OffFeeInfo2 {
	return v.value
}

func (v *NullableOffFeeInfo2) Set(val *OffFeeInfo2) {
	v.value = val
	v.isSet = true
}

func (v NullableOffFeeInfo2) IsSet() bool {
	return v.isSet
}

func (v *NullableOffFeeInfo2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffFeeInfo2(val *OffFeeInfo2) *NullableOffFeeInfo2 {
	return &NullableOffFeeInfo2{value: val, isSet: true}
}

func (v NullableOffFeeInfo2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffFeeInfo2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
