/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftTxData NFT transaction detail
type NftTxData struct {
	// Unique ID
	Id int64 `json:"id"`
	// Request Id
	RequestId *int64 `json:"requestId,omitempty"`
	// hash
	Hash string `json:"hash"`
	// Transaction hash
	TxHash string `json:"txHash"`
	// User transaction type
	NftTxType string `json:"nftTxType"`
	// The NFT tokens nftData in this transaction
	NftData string `json:"nftData"`
	// Amount requested by the user
	Amount string `json:"amount"`
	// fee Token Id
	FeeTokenSymbol string `json:"feeTokenSymbol"`
	// Fee amount in wei
	FeeAmount string `json:"feeAmount"`
	// Current transaction status
	Status string `json:"status"`
	// Create time
	Timestamp int64 `json:"timestamp"`
	// Update time
	UpdatedAt int64 `json:"updatedAt"`
	// User memo
	Memo string `json:"memo"`
	// The transfer receiver's address
	ReceiverAddress *string `json:"receiverAddress,omitempty"`
	// field.NftTxData.senderAddress
	SenderAddress *string `json:"senderAddress,omitempty"`
	// Receiver ID
	Receiver       *int64             `json:"receiver,omitempty"`
	StorageInfo    *StorageInfo       `json:"storageInfo,omitempty"`
	WithdrawalInfo *WithdrawalInfo    `json:"withdrawalInfo,omitempty"`
	MinterInfo     *MinterInfo        `json:"minterInfo,omitempty"`
	NftStatusInfo  *NftStatusInfo     `json:"nftStatusInfo,omitempty"`
	Metadata       *NftMetadataL2Info `json:"metadata,omitempty"`
}

// NewNftTxData instantiates a new NftTxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTxData(id int64, hash string, txHash string, nftTxType string, nftData string, amount string, feeTokenSymbol string, feeAmount string, status string, timestamp int64, updatedAt int64, memo string) *NftTxData {
	this := NftTxData{}
	this.Id = id
	this.Hash = hash
	this.TxHash = txHash
	this.NftTxType = nftTxType
	this.NftData = nftData
	this.Amount = amount
	this.FeeTokenSymbol = feeTokenSymbol
	this.FeeAmount = feeAmount
	this.Status = status
	this.Timestamp = timestamp
	this.UpdatedAt = updatedAt
	this.Memo = memo
	return &this
}

// NewNftTxDataWithDefaults instantiates a new NftTxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTxDataWithDefaults() *NftTxData {
	this := NftTxData{}
	return &this
}

// GetId returns the Id field value
func (o *NftTxData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NftTxData) SetId(v int64) {
	o.Id = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *NftTxData) GetRequestId() int64 {
	if o == nil || o.RequestId == nil {
		var ret int64
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetRequestIdOk() (*int64, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *NftTxData) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given int64 and assigns it to the RequestId field.
func (o *NftTxData) SetRequestId(v int64) {
	o.RequestId = &v
}

// GetHash returns the Hash field value
func (o *NftTxData) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *NftTxData) SetHash(v string) {
	o.Hash = v
}

// GetTxHash returns the TxHash field value
func (o *NftTxData) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *NftTxData) SetTxHash(v string) {
	o.TxHash = v
}

// GetNftTxType returns the NftTxType field value
func (o *NftTxData) GetNftTxType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftTxType
}

// GetNftTxTypeOk returns a tuple with the NftTxType field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetNftTxTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftTxType, true
}

// SetNftTxType sets field value
func (o *NftTxData) SetNftTxType(v string) {
	o.NftTxType = v
}

// GetNftData returns the NftData field value
func (o *NftTxData) GetNftData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetNftDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftData, true
}

// SetNftData sets field value
func (o *NftTxData) SetNftData(v string) {
	o.NftData = v
}

// GetAmount returns the Amount field value
func (o *NftTxData) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *NftTxData) SetAmount(v string) {
	o.Amount = v
}

// GetFeeTokenSymbol returns the FeeTokenSymbol field value
func (o *NftTxData) GetFeeTokenSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeTokenSymbol
}

// GetFeeTokenSymbolOk returns a tuple with the FeeTokenSymbol field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetFeeTokenSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeTokenSymbol, true
}

// SetFeeTokenSymbol sets field value
func (o *NftTxData) SetFeeTokenSymbol(v string) {
	o.FeeTokenSymbol = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *NftTxData) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *NftTxData) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetStatus returns the Status field value
func (o *NftTxData) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NftTxData) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *NftTxData) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *NftTxData) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *NftTxData) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *NftTxData) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetMemo returns the Memo field value
func (o *NftTxData) GetMemo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memo
}

// GetMemoOk returns a tuple with the Memo field value
// and a boolean to check if the value has been set.
func (o *NftTxData) GetMemoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memo, true
}

// SetMemo sets field value
func (o *NftTxData) SetMemo(v string) {
	o.Memo = v
}

// GetReceiverAddress returns the ReceiverAddress field value if set, zero value otherwise.
func (o *NftTxData) GetReceiverAddress() string {
	if o == nil || o.ReceiverAddress == nil {
		var ret string
		return ret
	}
	return *o.ReceiverAddress
}

// GetReceiverAddressOk returns a tuple with the ReceiverAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetReceiverAddressOk() (*string, bool) {
	if o == nil || o.ReceiverAddress == nil {
		return nil, false
	}
	return o.ReceiverAddress, true
}

// HasReceiverAddress returns a boolean if a field has been set.
func (o *NftTxData) HasReceiverAddress() bool {
	if o != nil && o.ReceiverAddress != nil {
		return true
	}

	return false
}

// SetReceiverAddress gets a reference to the given string and assigns it to the ReceiverAddress field.
func (o *NftTxData) SetReceiverAddress(v string) {
	o.ReceiverAddress = &v
}

// GetSenderAddress returns the SenderAddress field value if set, zero value otherwise.
func (o *NftTxData) GetSenderAddress() string {
	if o == nil || o.SenderAddress == nil {
		var ret string
		return ret
	}
	return *o.SenderAddress
}

// GetSenderAddressOk returns a tuple with the SenderAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetSenderAddressOk() (*string, bool) {
	if o == nil || o.SenderAddress == nil {
		return nil, false
	}
	return o.SenderAddress, true
}

// HasSenderAddress returns a boolean if a field has been set.
func (o *NftTxData) HasSenderAddress() bool {
	if o != nil && o.SenderAddress != nil {
		return true
	}

	return false
}

// SetSenderAddress gets a reference to the given string and assigns it to the SenderAddress field.
func (o *NftTxData) SetSenderAddress(v string) {
	o.SenderAddress = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *NftTxData) GetReceiver() int64 {
	if o == nil || o.Receiver == nil {
		var ret int64
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetReceiverOk() (*int64, bool) {
	if o == nil || o.Receiver == nil {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *NftTxData) HasReceiver() bool {
	if o != nil && o.Receiver != nil {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given int64 and assigns it to the Receiver field.
func (o *NftTxData) SetReceiver(v int64) {
	o.Receiver = &v
}

// GetStorageInfo returns the StorageInfo field value if set, zero value otherwise.
func (o *NftTxData) GetStorageInfo() StorageInfo {
	if o == nil || o.StorageInfo == nil {
		var ret StorageInfo
		return ret
	}
	return *o.StorageInfo
}

// GetStorageInfoOk returns a tuple with the StorageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetStorageInfoOk() (*StorageInfo, bool) {
	if o == nil || o.StorageInfo == nil {
		return nil, false
	}
	return o.StorageInfo, true
}

// HasStorageInfo returns a boolean if a field has been set.
func (o *NftTxData) HasStorageInfo() bool {
	if o != nil && o.StorageInfo != nil {
		return true
	}

	return false
}

// SetStorageInfo gets a reference to the given StorageInfo and assigns it to the StorageInfo field.
func (o *NftTxData) SetStorageInfo(v StorageInfo) {
	o.StorageInfo = &v
}

// GetWithdrawalInfo returns the WithdrawalInfo field value if set, zero value otherwise.
func (o *NftTxData) GetWithdrawalInfo() WithdrawalInfo {
	if o == nil || o.WithdrawalInfo == nil {
		var ret WithdrawalInfo
		return ret
	}
	return *o.WithdrawalInfo
}

// GetWithdrawalInfoOk returns a tuple with the WithdrawalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetWithdrawalInfoOk() (*WithdrawalInfo, bool) {
	if o == nil || o.WithdrawalInfo == nil {
		return nil, false
	}
	return o.WithdrawalInfo, true
}

// HasWithdrawalInfo returns a boolean if a field has been set.
func (o *NftTxData) HasWithdrawalInfo() bool {
	if o != nil && o.WithdrawalInfo != nil {
		return true
	}

	return false
}

// SetWithdrawalInfo gets a reference to the given WithdrawalInfo and assigns it to the WithdrawalInfo field.
func (o *NftTxData) SetWithdrawalInfo(v WithdrawalInfo) {
	o.WithdrawalInfo = &v
}

// GetMinterInfo returns the MinterInfo field value if set, zero value otherwise.
func (o *NftTxData) GetMinterInfo() MinterInfo {
	if o == nil || o.MinterInfo == nil {
		var ret MinterInfo
		return ret
	}
	return *o.MinterInfo
}

// GetMinterInfoOk returns a tuple with the MinterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetMinterInfoOk() (*MinterInfo, bool) {
	if o == nil || o.MinterInfo == nil {
		return nil, false
	}
	return o.MinterInfo, true
}

// HasMinterInfo returns a boolean if a field has been set.
func (o *NftTxData) HasMinterInfo() bool {
	if o != nil && o.MinterInfo != nil {
		return true
	}

	return false
}

// SetMinterInfo gets a reference to the given MinterInfo and assigns it to the MinterInfo field.
func (o *NftTxData) SetMinterInfo(v MinterInfo) {
	o.MinterInfo = &v
}

// GetNftStatusInfo returns the NftStatusInfo field value if set, zero value otherwise.
func (o *NftTxData) GetNftStatusInfo() NftStatusInfo {
	if o == nil || o.NftStatusInfo == nil {
		var ret NftStatusInfo
		return ret
	}
	return *o.NftStatusInfo
}

// GetNftStatusInfoOk returns a tuple with the NftStatusInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetNftStatusInfoOk() (*NftStatusInfo, bool) {
	if o == nil || o.NftStatusInfo == nil {
		return nil, false
	}
	return o.NftStatusInfo, true
}

// HasNftStatusInfo returns a boolean if a field has been set.
func (o *NftTxData) HasNftStatusInfo() bool {
	if o != nil && o.NftStatusInfo != nil {
		return true
	}

	return false
}

// SetNftStatusInfo gets a reference to the given NftStatusInfo and assigns it to the NftStatusInfo field.
func (o *NftTxData) SetNftStatusInfo(v NftStatusInfo) {
	o.NftStatusInfo = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NftTxData) GetMetadata() NftMetadataL2Info {
	if o == nil || o.Metadata == nil {
		var ret NftMetadataL2Info
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTxData) GetMetadataOk() (*NftMetadataL2Info, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NftTxData) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NftMetadataL2Info and assigns it to the Metadata field.
func (o *NftTxData) SetMetadata(v NftMetadataL2Info) {
	o.Metadata = &v
}

func (o NftTxData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["txHash"] = o.TxHash
	}
	if true {
		toSerialize["nftTxType"] = o.NftTxType
	}
	if true {
		toSerialize["nftData"] = o.NftData
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["feeTokenSymbol"] = o.FeeTokenSymbol
	}
	if true {
		toSerialize["feeAmount"] = o.FeeAmount
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if true {
		toSerialize["memo"] = o.Memo
	}
	if o.ReceiverAddress != nil {
		toSerialize["receiverAddress"] = o.ReceiverAddress
	}
	if o.SenderAddress != nil {
		toSerialize["senderAddress"] = o.SenderAddress
	}
	if o.Receiver != nil {
		toSerialize["receiver"] = o.Receiver
	}
	if o.StorageInfo != nil {
		toSerialize["storageInfo"] = o.StorageInfo
	}
	if o.WithdrawalInfo != nil {
		toSerialize["withdrawalInfo"] = o.WithdrawalInfo
	}
	if o.MinterInfo != nil {
		toSerialize["minterInfo"] = o.MinterInfo
	}
	if o.NftStatusInfo != nil {
		toSerialize["nftStatusInfo"] = o.NftStatusInfo
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableNftTxData struct {
	value *NftTxData
	isSet bool
}

func (v NullableNftTxData) Get() *NftTxData {
	return v.value
}

func (v *NullableNftTxData) Set(val *NftTxData) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTxData) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTxData(val *NftTxData) *NullableNftTxData {
	return &NullableNftTxData{value: val, isSet: true}
}

func (v NullableNftTxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
