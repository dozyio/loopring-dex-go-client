/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// DepthV3 Order book info
type DepthV3 struct {
	// An ever-increasing numeric version number that reflects its change history.
	Version int64 `json:"version"`
	// Update timestamp
	Timestamp int64 `json:"timestamp"`
	// Trading pair
	Market string `json:"market"`
	// Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.
	Bids [][]string `json:"bids"`
	// Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.
	Asks [][]string `json:"asks"`
}

// NewDepthV3 instantiates a new DepthV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepthV3(version int64, timestamp int64, market string, bids [][]string, asks [][]string) *DepthV3 {
	this := DepthV3{}
	this.Version = version
	this.Timestamp = timestamp
	this.Market = market
	this.Bids = bids
	this.Asks = asks
	return &this
}

// NewDepthV3WithDefaults instantiates a new DepthV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepthV3WithDefaults() *DepthV3 {
	this := DepthV3{}
	return &this
}

// GetVersion returns the Version field value
func (o *DepthV3) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DepthV3) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DepthV3) SetVersion(v int64) {
	o.Version = v
}

// GetTimestamp returns the Timestamp field value
func (o *DepthV3) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DepthV3) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DepthV3) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetMarket returns the Market field value
func (o *DepthV3) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *DepthV3) GetMarketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *DepthV3) SetMarket(v string) {
	o.Market = v
}

// GetBids returns the Bids field value
func (o *DepthV3) GetBids() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Bids
}

// GetBidsOk returns a tuple with the Bids field value
// and a boolean to check if the value has been set.
func (o *DepthV3) GetBidsOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bids, true
}

// SetBids sets field value
func (o *DepthV3) SetBids(v [][]string) {
	o.Bids = v
}

// GetAsks returns the Asks field value
func (o *DepthV3) GetAsks() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Asks
}

// GetAsksOk returns a tuple with the Asks field value
// and a boolean to check if the value has been set.
func (o *DepthV3) GetAsksOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Asks, true
}

// SetAsks sets field value
func (o *DepthV3) SetAsks(v [][]string) {
	o.Asks = v
}

func (o DepthV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["market"] = o.Market
	}
	if true {
		toSerialize["bids"] = o.Bids
	}
	if true {
		toSerialize["asks"] = o.Asks
	}
	return json.Marshal(toSerialize)
}

type NullableDepthV3 struct {
	value *DepthV3
	isSet bool
}

func (v NullableDepthV3) Get() *DepthV3 {
	return v.value
}

func (v *NullableDepthV3) Set(val *DepthV3) {
	v.value = val
	v.isSet = true
}

func (v NullableDepthV3) IsSet() bool {
	return v.isSet
}

func (v *NullableDepthV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepthV3(val *DepthV3) *NullableDepthV3 {
	return &NullableDepthV3{value: val, isSet: true}
}

func (v NullableDepthV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepthV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
