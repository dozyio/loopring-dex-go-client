/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// GetOrderGroupAmountData The result of query minimum amount
type GetOrderGroupAmountData struct {
	// The gas price use to calculate amount
	GasPrice *string `json:"gasPrice,omitempty"`
	// Amounts
	Amounts []TokenAmount `json:"amounts,omitempty"`
	// Cached price data overdue time
	CacheOverdueAt *int64 `json:"cacheOverdueAt,omitempty"`
}

// NewGetOrderGroupAmountData instantiates a new GetOrderGroupAmountData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrderGroupAmountData() *GetOrderGroupAmountData {
	this := GetOrderGroupAmountData{}
	return &this
}

// NewGetOrderGroupAmountDataWithDefaults instantiates a new GetOrderGroupAmountData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrderGroupAmountDataWithDefaults() *GetOrderGroupAmountData {
	this := GetOrderGroupAmountData{}
	return &this
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *GetOrderGroupAmountData) GetGasPrice() string {
	if o == nil || o.GasPrice == nil {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrderGroupAmountData) GetGasPriceOk() (*string, bool) {
	if o == nil || o.GasPrice == nil {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *GetOrderGroupAmountData) HasGasPrice() bool {
	if o != nil && o.GasPrice != nil {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *GetOrderGroupAmountData) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetAmounts returns the Amounts field value if set, zero value otherwise.
func (o *GetOrderGroupAmountData) GetAmounts() []TokenAmount {
	if o == nil || o.Amounts == nil {
		var ret []TokenAmount
		return ret
	}
	return o.Amounts
}

// GetAmountsOk returns a tuple with the Amounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrderGroupAmountData) GetAmountsOk() ([]TokenAmount, bool) {
	if o == nil || o.Amounts == nil {
		return nil, false
	}
	return o.Amounts, true
}

// HasAmounts returns a boolean if a field has been set.
func (o *GetOrderGroupAmountData) HasAmounts() bool {
	if o != nil && o.Amounts != nil {
		return true
	}

	return false
}

// SetAmounts gets a reference to the given []TokenAmount and assigns it to the Amounts field.
func (o *GetOrderGroupAmountData) SetAmounts(v []TokenAmount) {
	o.Amounts = v
}

// GetCacheOverdueAt returns the CacheOverdueAt field value if set, zero value otherwise.
func (o *GetOrderGroupAmountData) GetCacheOverdueAt() int64 {
	if o == nil || o.CacheOverdueAt == nil {
		var ret int64
		return ret
	}
	return *o.CacheOverdueAt
}

// GetCacheOverdueAtOk returns a tuple with the CacheOverdueAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrderGroupAmountData) GetCacheOverdueAtOk() (*int64, bool) {
	if o == nil || o.CacheOverdueAt == nil {
		return nil, false
	}
	return o.CacheOverdueAt, true
}

// HasCacheOverdueAt returns a boolean if a field has been set.
func (o *GetOrderGroupAmountData) HasCacheOverdueAt() bool {
	if o != nil && o.CacheOverdueAt != nil {
		return true
	}

	return false
}

// SetCacheOverdueAt gets a reference to the given int64 and assigns it to the CacheOverdueAt field.
func (o *GetOrderGroupAmountData) SetCacheOverdueAt(v int64) {
	o.CacheOverdueAt = &v
}

func (o GetOrderGroupAmountData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GasPrice != nil {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if o.Amounts != nil {
		toSerialize["amounts"] = o.Amounts
	}
	if o.CacheOverdueAt != nil {
		toSerialize["cacheOverdueAt"] = o.CacheOverdueAt
	}
	return json.Marshal(toSerialize)
}

type NullableGetOrderGroupAmountData struct {
	value *GetOrderGroupAmountData
	isSet bool
}

func (v NullableGetOrderGroupAmountData) Get() *GetOrderGroupAmountData {
	return v.value
}

func (v *NullableGetOrderGroupAmountData) Set(val *GetOrderGroupAmountData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrderGroupAmountData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrderGroupAmountData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrderGroupAmountData(val *GetOrderGroupAmountData) *NullableGetOrderGroupAmountData {
	return &NullableGetOrderGroupAmountData{value: val, isSet: true}
}

func (v NullableGetOrderGroupAmountData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrderGroupAmountData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
