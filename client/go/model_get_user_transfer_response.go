/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// GetUserTransferResponse Response body
type GetUserTransferResponse struct {
	ResultInfo ResultInfo        `json:"resultInfo"`
	Data       *TransferDataList `json:"data,omitempty"`
}

// NewGetUserTransferResponse instantiates a new GetUserTransferResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserTransferResponse(resultInfo ResultInfo) *GetUserTransferResponse {
	this := GetUserTransferResponse{}
	this.ResultInfo = resultInfo
	return &this
}

// NewGetUserTransferResponseWithDefaults instantiates a new GetUserTransferResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserTransferResponseWithDefaults() *GetUserTransferResponse {
	this := GetUserTransferResponse{}
	return &this
}

// GetResultInfo returns the ResultInfo field value
func (o *GetUserTransferResponse) GetResultInfo() ResultInfo {
	if o == nil {
		var ret ResultInfo
		return ret
	}

	return o.ResultInfo
}

// GetResultInfoOk returns a tuple with the ResultInfo field value
// and a boolean to check if the value has been set.
func (o *GetUserTransferResponse) GetResultInfoOk() (*ResultInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultInfo, true
}

// SetResultInfo sets field value
func (o *GetUserTransferResponse) SetResultInfo(v ResultInfo) {
	o.ResultInfo = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetUserTransferResponse) GetData() TransferDataList {
	if o == nil || o.Data == nil {
		var ret TransferDataList
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserTransferResponse) GetDataOk() (*TransferDataList, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetUserTransferResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given TransferDataList and assigns it to the Data field.
func (o *GetUserTransferResponse) SetData(v TransferDataList) {
	o.Data = &v
}

func (o GetUserTransferResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resultInfo"] = o.ResultInfo
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGetUserTransferResponse struct {
	value *GetUserTransferResponse
	isSet bool
}

func (v NullableGetUserTransferResponse) Get() *GetUserTransferResponse {
	return v.value
}

func (v *NullableGetUserTransferResponse) Set(val *GetUserTransferResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserTransferResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserTransferResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserTransferResponse(val *GetUserTransferResponse) *NullableGetUserTransferResponse {
	return &NullableGetUserTransferResponse{value: val, isSet: true}
}

func (v NullableGetUserTransferResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserTransferResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
