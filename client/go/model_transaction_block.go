/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TransactionBlock struct for TransactionBlock
type TransactionBlock struct {
	// The txType of the transaction, one in [Noop,Deposit,Withdraw,Transfer,SpotTrade,AccountUpdate,AmmUpdate,JoinAmm,ExitAmm,SignatureVerification,NftMint,NftData]
	TxType string `json:"txType"`
	// The accountId of the transaction
	AccountId *int64 `json:"accountId,omitempty"`
	// The owner of the transaction
	Owner   *string `json:"owner,omitempty"`
	Token   *Token  `json:"token,omitempty"`
	ToToken *Token  `json:"toToken,omitempty"`
	Fee     *Token  `json:"fee,omitempty"`
	// The validUntil of the transaction
	ValidUntil *int64 `json:"validUntil,omitempty"`
	// The toAccountId of the transaction if tx has a destination account
	ToAccountId *int64 `json:"toAccountId,omitempty"`
	// The toAccountAddress of the transaction if tx has a destination account
	ToAccountAddress *string `json:"toAccountAddress,omitempty"`
	// The storageId of the transaction
	StorageId *int64 `json:"storageId,omitempty"`
	OrderA    *Order `json:"orderA,omitempty"`
	OrderB    *Order `json:"orderB,omitempty"`
	// The validness of the transaction
	Valid *bool `json:"valid,omitempty"`
	// The nonce of the transaction if it uses nonce
	Nonce *int32 `json:"nonce,omitempty"`
	// The minterAccountId of the transaction if its a mint tx
	MinterAccountId *int64 `json:"minterAccountId,omitempty"`
	// The minter of the transaction if its a mint tx
	Minter   *string `json:"minter,omitempty"`
	NftToken *Token  `json:"nftToken,omitempty"`
	// The nftType of the transaction if its a mint tx
	NftType *string `json:"nftType,omitempty"`
	// field.TransactionBlock.fromAddress
	FromAddress *string `json:"fromAddress,omitempty"`
	// field.TransactionBlock.toAddress
	ToAddress     *string        `json:"toAddress,omitempty"`
	SpotTradeInfo *SpotTradeInfo `json:"spotTradeInfo,omitempty"`
}

// NewTransactionBlock instantiates a new TransactionBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionBlock(txType string) *TransactionBlock {
	this := TransactionBlock{}
	this.TxType = txType
	return &this
}

// NewTransactionBlockWithDefaults instantiates a new TransactionBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionBlockWithDefaults() *TransactionBlock {
	this := TransactionBlock{}
	return &this
}

// GetTxType returns the TxType field value
func (o *TransactionBlock) GetTxType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxType
}

// GetTxTypeOk returns a tuple with the TxType field value
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetTxTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxType, true
}

// SetTxType sets field value
func (o *TransactionBlock) SetTxType(v string) {
	o.TxType = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TransactionBlock) GetAccountId() int64 {
	if o == nil || o.AccountId == nil {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetAccountIdOk() (*int64, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TransactionBlock) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *TransactionBlock) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *TransactionBlock) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *TransactionBlock) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *TransactionBlock) SetOwner(v string) {
	o.Owner = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TransactionBlock) GetToken() Token {
	if o == nil || o.Token == nil {
		var ret Token
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetTokenOk() (*Token, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TransactionBlock) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given Token and assigns it to the Token field.
func (o *TransactionBlock) SetToken(v Token) {
	o.Token = &v
}

// GetToToken returns the ToToken field value if set, zero value otherwise.
func (o *TransactionBlock) GetToToken() Token {
	if o == nil || o.ToToken == nil {
		var ret Token
		return ret
	}
	return *o.ToToken
}

// GetToTokenOk returns a tuple with the ToToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetToTokenOk() (*Token, bool) {
	if o == nil || o.ToToken == nil {
		return nil, false
	}
	return o.ToToken, true
}

// HasToToken returns a boolean if a field has been set.
func (o *TransactionBlock) HasToToken() bool {
	if o != nil && o.ToToken != nil {
		return true
	}

	return false
}

// SetToToken gets a reference to the given Token and assigns it to the ToToken field.
func (o *TransactionBlock) SetToToken(v Token) {
	o.ToToken = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *TransactionBlock) GetFee() Token {
	if o == nil || o.Fee == nil {
		var ret Token
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetFeeOk() (*Token, bool) {
	if o == nil || o.Fee == nil {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *TransactionBlock) HasFee() bool {
	if o != nil && o.Fee != nil {
		return true
	}

	return false
}

// SetFee gets a reference to the given Token and assigns it to the Fee field.
func (o *TransactionBlock) SetFee(v Token) {
	o.Fee = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *TransactionBlock) GetValidUntil() int64 {
	if o == nil || o.ValidUntil == nil {
		var ret int64
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetValidUntilOk() (*int64, bool) {
	if o == nil || o.ValidUntil == nil {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *TransactionBlock) HasValidUntil() bool {
	if o != nil && o.ValidUntil != nil {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given int64 and assigns it to the ValidUntil field.
func (o *TransactionBlock) SetValidUntil(v int64) {
	o.ValidUntil = &v
}

// GetToAccountId returns the ToAccountId field value if set, zero value otherwise.
func (o *TransactionBlock) GetToAccountId() int64 {
	if o == nil || o.ToAccountId == nil {
		var ret int64
		return ret
	}
	return *o.ToAccountId
}

// GetToAccountIdOk returns a tuple with the ToAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetToAccountIdOk() (*int64, bool) {
	if o == nil || o.ToAccountId == nil {
		return nil, false
	}
	return o.ToAccountId, true
}

// HasToAccountId returns a boolean if a field has been set.
func (o *TransactionBlock) HasToAccountId() bool {
	if o != nil && o.ToAccountId != nil {
		return true
	}

	return false
}

// SetToAccountId gets a reference to the given int64 and assigns it to the ToAccountId field.
func (o *TransactionBlock) SetToAccountId(v int64) {
	o.ToAccountId = &v
}

// GetToAccountAddress returns the ToAccountAddress field value if set, zero value otherwise.
func (o *TransactionBlock) GetToAccountAddress() string {
	if o == nil || o.ToAccountAddress == nil {
		var ret string
		return ret
	}
	return *o.ToAccountAddress
}

// GetToAccountAddressOk returns a tuple with the ToAccountAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetToAccountAddressOk() (*string, bool) {
	if o == nil || o.ToAccountAddress == nil {
		return nil, false
	}
	return o.ToAccountAddress, true
}

// HasToAccountAddress returns a boolean if a field has been set.
func (o *TransactionBlock) HasToAccountAddress() bool {
	if o != nil && o.ToAccountAddress != nil {
		return true
	}

	return false
}

// SetToAccountAddress gets a reference to the given string and assigns it to the ToAccountAddress field.
func (o *TransactionBlock) SetToAccountAddress(v string) {
	o.ToAccountAddress = &v
}

// GetStorageId returns the StorageId field value if set, zero value otherwise.
func (o *TransactionBlock) GetStorageId() int64 {
	if o == nil || o.StorageId == nil {
		var ret int64
		return ret
	}
	return *o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetStorageIdOk() (*int64, bool) {
	if o == nil || o.StorageId == nil {
		return nil, false
	}
	return o.StorageId, true
}

// HasStorageId returns a boolean if a field has been set.
func (o *TransactionBlock) HasStorageId() bool {
	if o != nil && o.StorageId != nil {
		return true
	}

	return false
}

// SetStorageId gets a reference to the given int64 and assigns it to the StorageId field.
func (o *TransactionBlock) SetStorageId(v int64) {
	o.StorageId = &v
}

// GetOrderA returns the OrderA field value if set, zero value otherwise.
func (o *TransactionBlock) GetOrderA() Order {
	if o == nil || o.OrderA == nil {
		var ret Order
		return ret
	}
	return *o.OrderA
}

// GetOrderAOk returns a tuple with the OrderA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetOrderAOk() (*Order, bool) {
	if o == nil || o.OrderA == nil {
		return nil, false
	}
	return o.OrderA, true
}

// HasOrderA returns a boolean if a field has been set.
func (o *TransactionBlock) HasOrderA() bool {
	if o != nil && o.OrderA != nil {
		return true
	}

	return false
}

// SetOrderA gets a reference to the given Order and assigns it to the OrderA field.
func (o *TransactionBlock) SetOrderA(v Order) {
	o.OrderA = &v
}

// GetOrderB returns the OrderB field value if set, zero value otherwise.
func (o *TransactionBlock) GetOrderB() Order {
	if o == nil || o.OrderB == nil {
		var ret Order
		return ret
	}
	return *o.OrderB
}

// GetOrderBOk returns a tuple with the OrderB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetOrderBOk() (*Order, bool) {
	if o == nil || o.OrderB == nil {
		return nil, false
	}
	return o.OrderB, true
}

// HasOrderB returns a boolean if a field has been set.
func (o *TransactionBlock) HasOrderB() bool {
	if o != nil && o.OrderB != nil {
		return true
	}

	return false
}

// SetOrderB gets a reference to the given Order and assigns it to the OrderB field.
func (o *TransactionBlock) SetOrderB(v Order) {
	o.OrderB = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *TransactionBlock) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *TransactionBlock) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *TransactionBlock) SetValid(v bool) {
	o.Valid = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *TransactionBlock) GetNonce() int32 {
	if o == nil || o.Nonce == nil {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetNonceOk() (*int32, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *TransactionBlock) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *TransactionBlock) SetNonce(v int32) {
	o.Nonce = &v
}

// GetMinterAccountId returns the MinterAccountId field value if set, zero value otherwise.
func (o *TransactionBlock) GetMinterAccountId() int64 {
	if o == nil || o.MinterAccountId == nil {
		var ret int64
		return ret
	}
	return *o.MinterAccountId
}

// GetMinterAccountIdOk returns a tuple with the MinterAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetMinterAccountIdOk() (*int64, bool) {
	if o == nil || o.MinterAccountId == nil {
		return nil, false
	}
	return o.MinterAccountId, true
}

// HasMinterAccountId returns a boolean if a field has been set.
func (o *TransactionBlock) HasMinterAccountId() bool {
	if o != nil && o.MinterAccountId != nil {
		return true
	}

	return false
}

// SetMinterAccountId gets a reference to the given int64 and assigns it to the MinterAccountId field.
func (o *TransactionBlock) SetMinterAccountId(v int64) {
	o.MinterAccountId = &v
}

// GetMinter returns the Minter field value if set, zero value otherwise.
func (o *TransactionBlock) GetMinter() string {
	if o == nil || o.Minter == nil {
		var ret string
		return ret
	}
	return *o.Minter
}

// GetMinterOk returns a tuple with the Minter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetMinterOk() (*string, bool) {
	if o == nil || o.Minter == nil {
		return nil, false
	}
	return o.Minter, true
}

// HasMinter returns a boolean if a field has been set.
func (o *TransactionBlock) HasMinter() bool {
	if o != nil && o.Minter != nil {
		return true
	}

	return false
}

// SetMinter gets a reference to the given string and assigns it to the Minter field.
func (o *TransactionBlock) SetMinter(v string) {
	o.Minter = &v
}

// GetNftToken returns the NftToken field value if set, zero value otherwise.
func (o *TransactionBlock) GetNftToken() Token {
	if o == nil || o.NftToken == nil {
		var ret Token
		return ret
	}
	return *o.NftToken
}

// GetNftTokenOk returns a tuple with the NftToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetNftTokenOk() (*Token, bool) {
	if o == nil || o.NftToken == nil {
		return nil, false
	}
	return o.NftToken, true
}

// HasNftToken returns a boolean if a field has been set.
func (o *TransactionBlock) HasNftToken() bool {
	if o != nil && o.NftToken != nil {
		return true
	}

	return false
}

// SetNftToken gets a reference to the given Token and assigns it to the NftToken field.
func (o *TransactionBlock) SetNftToken(v Token) {
	o.NftToken = &v
}

// GetNftType returns the NftType field value if set, zero value otherwise.
func (o *TransactionBlock) GetNftType() string {
	if o == nil || o.NftType == nil {
		var ret string
		return ret
	}
	return *o.NftType
}

// GetNftTypeOk returns a tuple with the NftType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetNftTypeOk() (*string, bool) {
	if o == nil || o.NftType == nil {
		return nil, false
	}
	return o.NftType, true
}

// HasNftType returns a boolean if a field has been set.
func (o *TransactionBlock) HasNftType() bool {
	if o != nil && o.NftType != nil {
		return true
	}

	return false
}

// SetNftType gets a reference to the given string and assigns it to the NftType field.
func (o *TransactionBlock) SetNftType(v string) {
	o.NftType = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *TransactionBlock) GetFromAddress() string {
	if o == nil || o.FromAddress == nil {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetFromAddressOk() (*string, bool) {
	if o == nil || o.FromAddress == nil {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *TransactionBlock) HasFromAddress() bool {
	if o != nil && o.FromAddress != nil {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *TransactionBlock) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *TransactionBlock) GetToAddress() string {
	if o == nil || o.ToAddress == nil {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetToAddressOk() (*string, bool) {
	if o == nil || o.ToAddress == nil {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *TransactionBlock) HasToAddress() bool {
	if o != nil && o.ToAddress != nil {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *TransactionBlock) SetToAddress(v string) {
	o.ToAddress = &v
}

// GetSpotTradeInfo returns the SpotTradeInfo field value if set, zero value otherwise.
func (o *TransactionBlock) GetSpotTradeInfo() SpotTradeInfo {
	if o == nil || o.SpotTradeInfo == nil {
		var ret SpotTradeInfo
		return ret
	}
	return *o.SpotTradeInfo
}

// GetSpotTradeInfoOk returns a tuple with the SpotTradeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionBlock) GetSpotTradeInfoOk() (*SpotTradeInfo, bool) {
	if o == nil || o.SpotTradeInfo == nil {
		return nil, false
	}
	return o.SpotTradeInfo, true
}

// HasSpotTradeInfo returns a boolean if a field has been set.
func (o *TransactionBlock) HasSpotTradeInfo() bool {
	if o != nil && o.SpotTradeInfo != nil {
		return true
	}

	return false
}

// SetSpotTradeInfo gets a reference to the given SpotTradeInfo and assigns it to the SpotTradeInfo field.
func (o *TransactionBlock) SetSpotTradeInfo(v SpotTradeInfo) {
	o.SpotTradeInfo = &v
}

func (o TransactionBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["txType"] = o.TxType
	}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.ToToken != nil {
		toSerialize["toToken"] = o.ToToken
	}
	if o.Fee != nil {
		toSerialize["fee"] = o.Fee
	}
	if o.ValidUntil != nil {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if o.ToAccountId != nil {
		toSerialize["toAccountId"] = o.ToAccountId
	}
	if o.ToAccountAddress != nil {
		toSerialize["toAccountAddress"] = o.ToAccountAddress
	}
	if o.StorageId != nil {
		toSerialize["storageId"] = o.StorageId
	}
	if o.OrderA != nil {
		toSerialize["orderA"] = o.OrderA
	}
	if o.OrderB != nil {
		toSerialize["orderB"] = o.OrderB
	}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.MinterAccountId != nil {
		toSerialize["minterAccountId"] = o.MinterAccountId
	}
	if o.Minter != nil {
		toSerialize["minter"] = o.Minter
	}
	if o.NftToken != nil {
		toSerialize["nftToken"] = o.NftToken
	}
	if o.NftType != nil {
		toSerialize["nftType"] = o.NftType
	}
	if o.FromAddress != nil {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if o.ToAddress != nil {
		toSerialize["toAddress"] = o.ToAddress
	}
	if o.SpotTradeInfo != nil {
		toSerialize["spotTradeInfo"] = o.SpotTradeInfo
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionBlock struct {
	value *TransactionBlock
	isSet bool
}

func (v NullableTransactionBlock) Get() *TransactionBlock {
	return v.value
}

func (v *NullableTransactionBlock) Set(val *TransactionBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionBlock(val *TransactionBlock) *NullableTransactionBlock {
	return &NullableTransactionBlock{value: val, isSet: true}
}

func (v NullableTransactionBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
