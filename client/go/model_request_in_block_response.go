/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// RequestInBlockResponse struct for RequestInBlockResponse
type RequestInBlockResponse struct {
	Hash string `json:"hash"`
	// The block Id.
	BlockId int64 `json:"blockId"`
	// The tx index/postion in block
	IndexInBlock int32 `json:"indexInBlock"`
}

// NewRequestInBlockResponse instantiates a new RequestInBlockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestInBlockResponse(hash string, blockId int64, indexInBlock int32) *RequestInBlockResponse {
	this := RequestInBlockResponse{}
	this.Hash = hash
	this.BlockId = blockId
	this.IndexInBlock = indexInBlock
	return &this
}

// NewRequestInBlockResponseWithDefaults instantiates a new RequestInBlockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestInBlockResponseWithDefaults() *RequestInBlockResponse {
	this := RequestInBlockResponse{}
	return &this
}

// GetHash returns the Hash field value
func (o *RequestInBlockResponse) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *RequestInBlockResponse) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *RequestInBlockResponse) SetHash(v string) {
	o.Hash = v
}

// GetBlockId returns the BlockId field value
func (o *RequestInBlockResponse) GetBlockId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value
// and a boolean to check if the value has been set.
func (o *RequestInBlockResponse) GetBlockIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockId, true
}

// SetBlockId sets field value
func (o *RequestInBlockResponse) SetBlockId(v int64) {
	o.BlockId = v
}

// GetIndexInBlock returns the IndexInBlock field value
func (o *RequestInBlockResponse) GetIndexInBlock() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IndexInBlock
}

// GetIndexInBlockOk returns a tuple with the IndexInBlock field value
// and a boolean to check if the value has been set.
func (o *RequestInBlockResponse) GetIndexInBlockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexInBlock, true
}

// SetIndexInBlock sets field value
func (o *RequestInBlockResponse) SetIndexInBlock(v int32) {
	o.IndexInBlock = v
}

func (o RequestInBlockResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["blockId"] = o.BlockId
	}
	if true {
		toSerialize["indexInBlock"] = o.IndexInBlock
	}
	return json.Marshal(toSerialize)
}

type NullableRequestInBlockResponse struct {
	value *RequestInBlockResponse
	isSet bool
}

func (v NullableRequestInBlockResponse) Get() *RequestInBlockResponse {
	return v.value
}

func (v *NullableRequestInBlockResponse) Set(val *RequestInBlockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestInBlockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestInBlockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestInBlockResponse(val *RequestInBlockResponse) *NullableRequestInBlockResponse {
	return &NullableRequestInBlockResponse{value: val, isSet: true}
}

func (v NullableRequestInBlockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestInBlockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
