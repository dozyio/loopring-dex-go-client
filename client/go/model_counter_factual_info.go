/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// CounterFactualInfo struct for CounterFactualInfo
type CounterFactualInfo struct {
	// Counter factual wallet factory contract address
	WalletFactory string `json:"walletFactory"`
	// Counter factual wallet owner address, NOT the wallet address
	WalletOwner string `json:"walletOwner"`
	// Salt to generate address from owner & other related info
	WalletSalt string `json:"walletSalt"`
}

// NewCounterFactualInfo instantiates a new CounterFactualInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCounterFactualInfo(walletFactory string, walletOwner string, walletSalt string) *CounterFactualInfo {
	this := CounterFactualInfo{}
	this.WalletFactory = walletFactory
	this.WalletOwner = walletOwner
	this.WalletSalt = walletSalt
	return &this
}

// NewCounterFactualInfoWithDefaults instantiates a new CounterFactualInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCounterFactualInfoWithDefaults() *CounterFactualInfo {
	this := CounterFactualInfo{}
	return &this
}

// GetWalletFactory returns the WalletFactory field value
func (o *CounterFactualInfo) GetWalletFactory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletFactory
}

// GetWalletFactoryOk returns a tuple with the WalletFactory field value
// and a boolean to check if the value has been set.
func (o *CounterFactualInfo) GetWalletFactoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletFactory, true
}

// SetWalletFactory sets field value
func (o *CounterFactualInfo) SetWalletFactory(v string) {
	o.WalletFactory = v
}

// GetWalletOwner returns the WalletOwner field value
func (o *CounterFactualInfo) GetWalletOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletOwner
}

// GetWalletOwnerOk returns a tuple with the WalletOwner field value
// and a boolean to check if the value has been set.
func (o *CounterFactualInfo) GetWalletOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletOwner, true
}

// SetWalletOwner sets field value
func (o *CounterFactualInfo) SetWalletOwner(v string) {
	o.WalletOwner = v
}

// GetWalletSalt returns the WalletSalt field value
func (o *CounterFactualInfo) GetWalletSalt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletSalt
}

// GetWalletSaltOk returns a tuple with the WalletSalt field value
// and a boolean to check if the value has been set.
func (o *CounterFactualInfo) GetWalletSaltOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletSalt, true
}

// SetWalletSalt sets field value
func (o *CounterFactualInfo) SetWalletSalt(v string) {
	o.WalletSalt = v
}

func (o CounterFactualInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["walletFactory"] = o.WalletFactory
	}
	if true {
		toSerialize["walletOwner"] = o.WalletOwner
	}
	if true {
		toSerialize["walletSalt"] = o.WalletSalt
	}
	return json.Marshal(toSerialize)
}

type NullableCounterFactualInfo struct {
	value *CounterFactualInfo
	isSet bool
}

func (v NullableCounterFactualInfo) Get() *CounterFactualInfo {
	return v.value
}

func (v *NullableCounterFactualInfo) Set(val *CounterFactualInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCounterFactualInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCounterFactualInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCounterFactualInfo(val *CounterFactualInfo) *NullableCounterFactualInfo {
	return &NullableCounterFactualInfo{value: val, isSet: true}
}

func (v NullableCounterFactualInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCounterFactualInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
