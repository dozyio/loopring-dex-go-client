/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TokenInfoV3 Token Detail
type TokenInfoV3 struct {
	// Token Type
	Type string `json:"type"`
	// Token's numeric ID
	TokenId int32 `json:"tokenId"`
	// Token symbol
	Symbol string `json:"symbol"`
	// Token name
	Name string `json:"name"`
	// Token ERC20 contract address
	Address string `json:"address"`
	// Token decimals
	Decimals int32 `json:"decimals"`
	// Max decimals that relayer uses for the token, smaller amount will be treated as zero.
	Precision int32 `json:"precision"`
	// Max decimals that relayer uses for the token, smaller amount will be treated as zero.
	PrecisionForOrder int32          `json:"precisionForOrder"`
	OrderAmounts      OrderAmountsV3 `json:"orderAmounts"`
	LuckyTokenAmounts OrderAmountsV3 `json:"luckyTokenAmounts"`
	// The maximum amount for single fast withdrawal
	FastWithdrawLimit string           `json:"fastWithdrawLimit"`
	GasAmounts        GasAmountLimitV3 `json:"gasAmounts"`
	// Whether the token is currently enabled for deposits and withdrawals.
	Enabled bool `json:"enabled"`
}

// NewTokenInfoV3 instantiates a new TokenInfoV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfoV3(type_ string, tokenId int32, symbol string, name string, address string, decimals int32, precision int32, precisionForOrder int32, orderAmounts OrderAmountsV3, luckyTokenAmounts OrderAmountsV3, fastWithdrawLimit string, gasAmounts GasAmountLimitV3, enabled bool) *TokenInfoV3 {
	this := TokenInfoV3{}
	this.Type = type_
	this.TokenId = tokenId
	this.Symbol = symbol
	this.Name = name
	this.Address = address
	this.Decimals = decimals
	this.Precision = precision
	this.PrecisionForOrder = precisionForOrder
	this.OrderAmounts = orderAmounts
	this.LuckyTokenAmounts = luckyTokenAmounts
	this.FastWithdrawLimit = fastWithdrawLimit
	this.GasAmounts = gasAmounts
	this.Enabled = enabled
	return &this
}

// NewTokenInfoV3WithDefaults instantiates a new TokenInfoV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoV3WithDefaults() *TokenInfoV3 {
	this := TokenInfoV3{}
	return &this
}

// GetType returns the Type field value
func (o *TokenInfoV3) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TokenInfoV3) SetType(v string) {
	o.Type = v
}

// GetTokenId returns the TokenId field value
func (o *TokenInfoV3) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenInfoV3) SetTokenId(v int32) {
	o.TokenId = v
}

// GetSymbol returns the Symbol field value
func (o *TokenInfoV3) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenInfoV3) SetSymbol(v string) {
	o.Symbol = v
}

// GetName returns the Name field value
func (o *TokenInfoV3) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenInfoV3) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *TokenInfoV3) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenInfoV3) SetAddress(v string) {
	o.Address = v
}

// GetDecimals returns the Decimals field value
func (o *TokenInfoV3) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenInfoV3) SetDecimals(v int32) {
	o.Decimals = v
}

// GetPrecision returns the Precision field value
func (o *TokenInfoV3) GetPrecision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetPrecisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Precision, true
}

// SetPrecision sets field value
func (o *TokenInfoV3) SetPrecision(v int32) {
	o.Precision = v
}

// GetPrecisionForOrder returns the PrecisionForOrder field value
func (o *TokenInfoV3) GetPrecisionForOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrecisionForOrder
}

// GetPrecisionForOrderOk returns a tuple with the PrecisionForOrder field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetPrecisionForOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrecisionForOrder, true
}

// SetPrecisionForOrder sets field value
func (o *TokenInfoV3) SetPrecisionForOrder(v int32) {
	o.PrecisionForOrder = v
}

// GetOrderAmounts returns the OrderAmounts field value
func (o *TokenInfoV3) GetOrderAmounts() OrderAmountsV3 {
	if o == nil {
		var ret OrderAmountsV3
		return ret
	}

	return o.OrderAmounts
}

// GetOrderAmountsOk returns a tuple with the OrderAmounts field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetOrderAmountsOk() (*OrderAmountsV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmounts, true
}

// SetOrderAmounts sets field value
func (o *TokenInfoV3) SetOrderAmounts(v OrderAmountsV3) {
	o.OrderAmounts = v
}

// GetLuckyTokenAmounts returns the LuckyTokenAmounts field value
func (o *TokenInfoV3) GetLuckyTokenAmounts() OrderAmountsV3 {
	if o == nil {
		var ret OrderAmountsV3
		return ret
	}

	return o.LuckyTokenAmounts
}

// GetLuckyTokenAmountsOk returns a tuple with the LuckyTokenAmounts field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetLuckyTokenAmountsOk() (*OrderAmountsV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LuckyTokenAmounts, true
}

// SetLuckyTokenAmounts sets field value
func (o *TokenInfoV3) SetLuckyTokenAmounts(v OrderAmountsV3) {
	o.LuckyTokenAmounts = v
}

// GetFastWithdrawLimit returns the FastWithdrawLimit field value
func (o *TokenInfoV3) GetFastWithdrawLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FastWithdrawLimit
}

// GetFastWithdrawLimitOk returns a tuple with the FastWithdrawLimit field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetFastWithdrawLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FastWithdrawLimit, true
}

// SetFastWithdrawLimit sets field value
func (o *TokenInfoV3) SetFastWithdrawLimit(v string) {
	o.FastWithdrawLimit = v
}

// GetGasAmounts returns the GasAmounts field value
func (o *TokenInfoV3) GetGasAmounts() GasAmountLimitV3 {
	if o == nil {
		var ret GasAmountLimitV3
		return ret
	}

	return o.GasAmounts
}

// GetGasAmountsOk returns a tuple with the GasAmounts field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetGasAmountsOk() (*GasAmountLimitV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasAmounts, true
}

// SetGasAmounts sets field value
func (o *TokenInfoV3) SetGasAmounts(v GasAmountLimitV3) {
	o.GasAmounts = v
}

// GetEnabled returns the Enabled field value
func (o *TokenInfoV3) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TokenInfoV3) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TokenInfoV3) SetEnabled(v bool) {
	o.Enabled = v
}

func (o TokenInfoV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["decimals"] = o.Decimals
	}
	if true {
		toSerialize["precision"] = o.Precision
	}
	if true {
		toSerialize["precisionForOrder"] = o.PrecisionForOrder
	}
	if true {
		toSerialize["orderAmounts"] = o.OrderAmounts
	}
	if true {
		toSerialize["luckyTokenAmounts"] = o.LuckyTokenAmounts
	}
	if true {
		toSerialize["fastWithdrawLimit"] = o.FastWithdrawLimit
	}
	if true {
		toSerialize["gasAmounts"] = o.GasAmounts
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableTokenInfoV3 struct {
	value *TokenInfoV3
	isSet bool
}

func (v NullableTokenInfoV3) Get() *TokenInfoV3 {
	return v.value
}

func (v *NullableTokenInfoV3) Set(val *TokenInfoV3) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfoV3) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfoV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfoV3(val *TokenInfoV3) *NullableTokenInfoV3 {
	return &NullableTokenInfoV3{value: val, isSet: true}
}

func (v NullableTokenInfoV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfoV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
