/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	// The storageId of the order
	StorageID int64 `json:"storageID"`
	// The accountID of the order
	AccountID int64 `json:"accountID"`
	// The amountS of the order
	AmountS string `json:"amountS"`
	// The amountB of the order
	AmountB string `json:"amountB"`
	// The tokenS of the order
	TokenS int32 `json:"tokenS"`
	// The tokenB of the order
	TokenB int32 `json:"tokenB"`
	// The validUntil of the order
	ValidUntil int64 `json:"validUntil"`
	// The taker of the order
	Taker string `json:"taker"`
	// The feeBips of the order
	FeeBips int32 `json:"feeBips"`
	// If the order isAmm
	IsAmm bool `json:"isAmm"`
	// The nftData of the order, if its NFT order
	NftData string `json:"nftData"`
	// The fillS of the order
	FillS int64 `json:"fillS"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(storageID int64, accountID int64, amountS string, amountB string, tokenS int32, tokenB int32, validUntil int64, taker string, feeBips int32, isAmm bool, nftData string, fillS int64) *Order {
	this := Order{}
	this.StorageID = storageID
	this.AccountID = accountID
	this.AmountS = amountS
	this.AmountB = amountB
	this.TokenS = tokenS
	this.TokenB = tokenB
	this.ValidUntil = validUntil
	this.Taker = taker
	this.FeeBips = feeBips
	this.IsAmm = isAmm
	this.NftData = nftData
	this.FillS = fillS
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetStorageID returns the StorageID field value
func (o *Order) GetStorageID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageID
}

// GetStorageIDOk returns a tuple with the StorageID field value
// and a boolean to check if the value has been set.
func (o *Order) GetStorageIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageID, true
}

// SetStorageID sets field value
func (o *Order) SetStorageID(v int64) {
	o.StorageID = v
}

// GetAccountID returns the AccountID field value
func (o *Order) GetAccountID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value
// and a boolean to check if the value has been set.
func (o *Order) GetAccountIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountID, true
}

// SetAccountID sets field value
func (o *Order) SetAccountID(v int64) {
	o.AccountID = v
}

// GetAmountS returns the AmountS field value
func (o *Order) GetAmountS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountS
}

// GetAmountSOk returns a tuple with the AmountS field value
// and a boolean to check if the value has been set.
func (o *Order) GetAmountSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountS, true
}

// SetAmountS sets field value
func (o *Order) SetAmountS(v string) {
	o.AmountS = v
}

// GetAmountB returns the AmountB field value
func (o *Order) GetAmountB() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountB
}

// GetAmountBOk returns a tuple with the AmountB field value
// and a boolean to check if the value has been set.
func (o *Order) GetAmountBOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountB, true
}

// SetAmountB sets field value
func (o *Order) SetAmountB(v string) {
	o.AmountB = v
}

// GetTokenS returns the TokenS field value
func (o *Order) GetTokenS() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenS
}

// GetTokenSOk returns a tuple with the TokenS field value
// and a boolean to check if the value has been set.
func (o *Order) GetTokenSOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenS, true
}

// SetTokenS sets field value
func (o *Order) SetTokenS(v int32) {
	o.TokenS = v
}

// GetTokenB returns the TokenB field value
func (o *Order) GetTokenB() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenB
}

// GetTokenBOk returns a tuple with the TokenB field value
// and a boolean to check if the value has been set.
func (o *Order) GetTokenBOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenB, true
}

// SetTokenB sets field value
func (o *Order) SetTokenB(v int32) {
	o.TokenB = v
}

// GetValidUntil returns the ValidUntil field value
func (o *Order) GetValidUntil() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *Order) GetValidUntilOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *Order) SetValidUntil(v int64) {
	o.ValidUntil = v
}

// GetTaker returns the Taker field value
func (o *Order) GetTaker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Taker
}

// GetTakerOk returns a tuple with the Taker field value
// and a boolean to check if the value has been set.
func (o *Order) GetTakerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Taker, true
}

// SetTaker sets field value
func (o *Order) SetTaker(v string) {
	o.Taker = v
}

// GetFeeBips returns the FeeBips field value
func (o *Order) GetFeeBips() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FeeBips
}

// GetFeeBipsOk returns a tuple with the FeeBips field value
// and a boolean to check if the value has been set.
func (o *Order) GetFeeBipsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeBips, true
}

// SetFeeBips sets field value
func (o *Order) SetFeeBips(v int32) {
	o.FeeBips = v
}

// GetIsAmm returns the IsAmm field value
func (o *Order) GetIsAmm() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAmm
}

// GetIsAmmOk returns a tuple with the IsAmm field value
// and a boolean to check if the value has been set.
func (o *Order) GetIsAmmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAmm, true
}

// SetIsAmm sets field value
func (o *Order) SetIsAmm(v bool) {
	o.IsAmm = v
}

// GetNftData returns the NftData field value
func (o *Order) GetNftData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value
// and a boolean to check if the value has been set.
func (o *Order) GetNftDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftData, true
}

// SetNftData sets field value
func (o *Order) SetNftData(v string) {
	o.NftData = v
}

// GetFillS returns the FillS field value
func (o *Order) GetFillS() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FillS
}

// GetFillSOk returns a tuple with the FillS field value
// and a boolean to check if the value has been set.
func (o *Order) GetFillSOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FillS, true
}

// SetFillS sets field value
func (o *Order) SetFillS(v int64) {
	o.FillS = v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["storageID"] = o.StorageID
	}
	if true {
		toSerialize["accountID"] = o.AccountID
	}
	if true {
		toSerialize["amountS"] = o.AmountS
	}
	if true {
		toSerialize["amountB"] = o.AmountB
	}
	if true {
		toSerialize["tokenS"] = o.TokenS
	}
	if true {
		toSerialize["tokenB"] = o.TokenB
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if true {
		toSerialize["taker"] = o.Taker
	}
	if true {
		toSerialize["feeBips"] = o.FeeBips
	}
	if true {
		toSerialize["isAmm"] = o.IsAmm
	}
	if true {
		toSerialize["nftData"] = o.NftData
	}
	if true {
		toSerialize["fillS"] = o.FillS
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
