/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// Token struct for Token
type Token struct {
	// The tokenId of the token
	TokenId map[string]interface{} `json:"tokenId,omitempty"`
	// The token Address
	TokenAddress *string `json:"tokenAddress,omitempty"`
	// The nftData of the NFT token
	NftData *string `json:"nftData,omitempty"`
	// The NFT_ID of the NFT token
	NftId *string `json:"nftId,omitempty"`
	// The token amount
	Amount *string `json:"amount,omitempty"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *Token) GetTokenId() map[string]interface{} {
	if o == nil || o.TokenId == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetTokenIdOk() (map[string]interface{}, bool) {
	if o == nil || o.TokenId == nil {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *Token) HasTokenId() bool {
	if o != nil && o.TokenId != nil {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given map[string]interface{} and assigns it to the TokenId field.
func (o *Token) SetTokenId(v map[string]interface{}) {
	o.TokenId = v
}

// GetTokenAddress returns the TokenAddress field value if set, zero value otherwise.
func (o *Token) GetTokenAddress() string {
	if o == nil || o.TokenAddress == nil {
		var ret string
		return ret
	}
	return *o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetTokenAddressOk() (*string, bool) {
	if o == nil || o.TokenAddress == nil {
		return nil, false
	}
	return o.TokenAddress, true
}

// HasTokenAddress returns a boolean if a field has been set.
func (o *Token) HasTokenAddress() bool {
	if o != nil && o.TokenAddress != nil {
		return true
	}

	return false
}

// SetTokenAddress gets a reference to the given string and assigns it to the TokenAddress field.
func (o *Token) SetTokenAddress(v string) {
	o.TokenAddress = &v
}

// GetNftData returns the NftData field value if set, zero value otherwise.
func (o *Token) GetNftData() string {
	if o == nil || o.NftData == nil {
		var ret string
		return ret
	}
	return *o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetNftDataOk() (*string, bool) {
	if o == nil || o.NftData == nil {
		return nil, false
	}
	return o.NftData, true
}

// HasNftData returns a boolean if a field has been set.
func (o *Token) HasNftData() bool {
	if o != nil && o.NftData != nil {
		return true
	}

	return false
}

// SetNftData gets a reference to the given string and assigns it to the NftData field.
func (o *Token) SetNftData(v string) {
	o.NftData = &v
}

// GetNftId returns the NftId field value if set, zero value otherwise.
func (o *Token) GetNftId() string {
	if o == nil || o.NftId == nil {
		var ret string
		return ret
	}
	return *o.NftId
}

// GetNftIdOk returns a tuple with the NftId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetNftIdOk() (*string, bool) {
	if o == nil || o.NftId == nil {
		return nil, false
	}
	return o.NftId, true
}

// HasNftId returns a boolean if a field has been set.
func (o *Token) HasNftId() bool {
	if o != nil && o.NftId != nil {
		return true
	}

	return false
}

// SetNftId gets a reference to the given string and assigns it to the NftId field.
func (o *Token) SetNftId(v string) {
	o.NftId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Token) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Token) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *Token) SetAmount(v string) {
	o.Amount = &v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenId != nil {
		toSerialize["tokenId"] = o.TokenId
	}
	if o.TokenAddress != nil {
		toSerialize["tokenAddress"] = o.TokenAddress
	}
	if o.NftData != nil {
		toSerialize["nftData"] = o.NftData
	}
	if o.NftId != nil {
		toSerialize["nftId"] = o.NftId
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
