/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftHolder model.NftHolder.description
type NftHolder struct {
	// Sender accountId of the Tx
	AccountId int64 `json:"accountId"`
	// The Loopring's NFT token identifier.
	TokenId int32 `json:"tokenId"`
	// The amount of the NFT token
	Amount string `json:"amount"`
}

// NewNftHolder instantiates a new NftHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftHolder(accountId int64, tokenId int32, amount string) *NftHolder {
	this := NftHolder{}
	this.AccountId = accountId
	this.TokenId = tokenId
	this.Amount = amount
	return &this
}

// NewNftHolderWithDefaults instantiates a new NftHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftHolderWithDefaults() *NftHolder {
	this := NftHolder{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *NftHolder) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NftHolder) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NftHolder) SetAccountId(v int64) {
	o.AccountId = v
}

// GetTokenId returns the TokenId field value
func (o *NftHolder) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *NftHolder) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *NftHolder) SetTokenId(v int32) {
	o.TokenId = v
}

// GetAmount returns the Amount field value
func (o *NftHolder) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *NftHolder) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *NftHolder) SetAmount(v string) {
	o.Amount = v
}

func (o NftHolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableNftHolder struct {
	value *NftHolder
	isSet bool
}

func (v NullableNftHolder) Get() *NftHolder {
	return v.value
}

func (v *NullableNftHolder) Set(val *NftHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableNftHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableNftHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftHolder(val *NftHolder) *NullableNftHolder {
	return &NullableNftHolder{value: val, isSet: true}
}

func (v NullableNftHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
