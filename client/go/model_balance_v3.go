/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// BalanceV3 Asset information
type BalanceV3 struct {
	// Token ID
	TokenId int32 `json:"tokenId"`
	// Amount of the asset
	Total string `json:"total"`
	// The part of the total balance which is currently not liquid and not at the users disposal (because of pending withdrawals or orders for example)
	Locked  string         `json:"locked"`
	Pending PendingBalance `json:"pending"`
}

// NewBalanceV3 instantiates a new BalanceV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceV3(tokenId int32, total string, locked string, pending PendingBalance) *BalanceV3 {
	this := BalanceV3{}
	this.TokenId = tokenId
	this.Total = total
	this.Locked = locked
	this.Pending = pending
	return &this
}

// NewBalanceV3WithDefaults instantiates a new BalanceV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceV3WithDefaults() *BalanceV3 {
	this := BalanceV3{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *BalanceV3) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *BalanceV3) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *BalanceV3) SetTokenId(v int32) {
	o.TokenId = v
}

// GetTotal returns the Total field value
func (o *BalanceV3) GetTotal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *BalanceV3) GetTotalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *BalanceV3) SetTotal(v string) {
	o.Total = v
}

// GetLocked returns the Locked field value
func (o *BalanceV3) GetLocked() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *BalanceV3) GetLockedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *BalanceV3) SetLocked(v string) {
	o.Locked = v
}

// GetPending returns the Pending field value
func (o *BalanceV3) GetPending() PendingBalance {
	if o == nil {
		var ret PendingBalance
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *BalanceV3) GetPendingOk() (*PendingBalance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *BalanceV3) SetPending(v PendingBalance) {
	o.Pending = v
}

func (o BalanceV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["locked"] = o.Locked
	}
	if true {
		toSerialize["pending"] = o.Pending
	}
	return json.Marshal(toSerialize)
}

type NullableBalanceV3 struct {
	value *BalanceV3
	isSet bool
}

func (v NullableBalanceV3) Get() *BalanceV3 {
	return v.value
}

func (v *NullableBalanceV3) Set(val *BalanceV3) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceV3) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceV3(val *BalanceV3) *NullableBalanceV3 {
	return &NullableBalanceV3{value: val, isSet: true}
}

func (v NullableBalanceV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
