openapi: 3.0.1
info:
  contact:
    name: Loopring@Loopring.com
  description: LightCone DEX function interpretation
  license:
    name: license Loopring
    url: https://loopring.org
  termsOfService: http://Loopring.com
  title: LightCone 2.0 API Documentation
  version: "1.0"
servers:
- url: //uat2.loopring.io/
tags:
- name: Loopring DEX Restful API
- name: LightCone WebSocket API
paths:
  /api/v2/timestamp:
    get:
      description: Returns the relayer's current time in millisecond
      operationId: getTimestampV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTimestampV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get relayer's current time
      tags:
      - Loopring DEX Restful API
  /api/v2/exchange/tokens:
    get:
      description: "Returns the configurations of all supported tokens, including\
        \ Ether."
      operationId: getTokensV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get token configurations
      tags:
      - Loopring DEX Restful API
  /api/v2/user/offchainFee:
    get:
      description: Returns the fee amount
      operationId: getBusinessFee2V2
      parameters:
      - description: Account ID
        example: 0
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Off-chain request type
        example: 1
        in: query
        name: requestType
        required: true
        schema:
          format: int32
          type: integer
      - description: The token to withdraw
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: The amount to withdraw
        example: "10000000000"
        in: query
        name: amount
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOffchainFee2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current fee amount
      tags:
      - Loopring DEX Restful API
  /api/v2/exchange/markets:
    get:
      description: Returns the configurations of all supported markets (trading pairs)
      operationId: getMarketsV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarketInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get market configurations
      tags:
      - Loopring DEX Restful API
  /api/v2/transfer:
    post:
      description: Submit internal transfer
      operationId: submitTransferV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OriginTransferRequest'
        description: Submit internal transfer post message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit internal transfer
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/account:
    get:
      description: Returns data associated with the user's exchange account.
      operationId: getAccountV2
      parameters:
      - description: Ethereum address
        example: 0x123456
        in: query
        name: owner
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "101001":
          content: {}
          description: The address was not found
        "101002":
          content: {}
          description: User not found
      summary: Query user information
      tags:
      - Loopring DEX Restful API
    post:
      description: "Updates the EDDSA key associated with the specified account, making\
        \ the previous one invalid in the process."
      operationId: submitUpdateAccountV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        description: api.submitUpdateAccount.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Update account EDDSA key
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/orders:
    delete:
      description: api.CancelOrders.notes
      operationId: cancelOrdersV2
      parameters:
      - description: request.cancelOrders.accountId
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: request.cancelOrders.orderHash
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        in: query
        name: orderHash
        schema:
          type: string
      - description: request.cancelOrders.clientOrderId
        example: "20200318000000001010"
        in: query
        name: clientOrderId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrdersResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "102117":
          content: {}
          description: No orders to cancel
        "102118":
          content: {}
          description: "Failed to cancel orders, please try again later"
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: api.CancelOrders.value
      tags:
      - Loopring DEX Restful API
    get:
      description: Get a list of orders satisfying certain criteria.
      operationId: getOrdersV2
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Trading pair
        example: LRC-ETH
        in: query
        name: market
        schema:
          type: string
      - description: Lower bound of order's creation timestamp in millisecond
        example: 1567053142000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: Upper bound of order's creation timestamp in millisecond
        example: 1567053242000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: '"BUY" or "SELL"'
        example: BUY
        in: query
        name: side
        schema:
          enum:
          - BUY
          - SELL
          type: string
      - description: 'Order status. You can specify one of the following values:'
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - failed
          - cancelled
          - cancelling
          - expired
          type: string
      - description: Limit of orders (default 50)
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Offset of orders (default 0)
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getOrders.orderTypes
        example: LIMIT_ORDER
        in: query
        name: orderTypes
        schema:
          enum:
          - LIMIT_ORDER
          - MAKER_ONLY
          - TAKER_ONLY
          - AMM
          type: string
      - description: field.SubmitOrderRequest.tradeChannel
        example: ORDER_BOOK
        in: query
        name: tradeChannels
        schema:
          enum:
          - ORDER_BOOK:0
          - AMM_POOL:1
          - MIXED:2
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrdersResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get multiple orders
      tags:
      - Loopring DEX Restful API
  /api/v3/hebao/getAvailableBroker:
    get:
      operationId: getAvailableBrokerV3Hebao
      parameters:
      - in: query
        name: organization
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getDepthV2
      parameters:
      - description: The ID of a trading pair.
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDepthResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v2/mix/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getMixedDepthV2
      parameters:
      - description: The ID of a trading pair.
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      - description: request.getDepth.showOverlap
        example: false
        in: query
        name: showOverlap
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDepthResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v2/ticker:
    get:
      description: "Gets a markets ticker. Generally speaking, a ticker in Loopring\
        \ consists in data from the market taken last 24Hours."
      operationId: getTickerV2
      parameters:
      - description: "Market pair, support multiple markets"
        example: "LRC-ETH,LRC-USDT"
        in: query
        name: market
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetTickerResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market ticker
      tags:
      - Loopring DEX Restful API
  /api/v2/mix/ticker:
    get:
      description: "Gets a markets ticker. Generally speaking, a ticker in Loopring\
        \ consists in data from the market taken last 24Hours."
      operationId: getMixedTickerV2
      parameters:
      - description: "Market pair, support multiple markets"
        example: "LRC-ETH,LRC-USDT"
        in: query
        name: market
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetTickerResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market ticker
      tags:
      - Loopring DEX Restful API
  /api/v2/price:
    get:
      description: "Fetches, for all the tokens supported by Loopring, their fiat\
        \ price."
      operationId: getPriceV2
      parameters:
      - description: request.getPrice.legal
        example: USD
        in: query
        name: legal
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPriceV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get token fiat prices
      tags:
      - Loopring DEX Restful API
  /api/v2/trade:
    get:
      description: Query trades with specified market
      operationId: getMarketTradeV2
      parameters:
      - description: Single market to query
        example: LRC-USDT
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: Number of queries
        example: 20
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarketTradesV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get market recent trades
      tags:
      - Loopring DEX Restful API
  /api/v2/candlestick:
    get:
      description: Return the candlestick data of a given trading pair.
      operationId: getCandlestickV2
      parameters:
      - description: "Trading pair ID, multi-market is not supported"
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Candlestick interval, Supported values are: 1min, 5min, 15min,\
          \ 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w"
        example: 5min
        in: query
        name: interval
        required: true
        schema:
          type: string
      - description: Start time
        example: 1584479105000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time
        example: 1584565505000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Number of data points. If more data points are available, the\
          \ API will only return the first 'limit' data points."
        example: 120
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandlestickResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market candlestick
      tags:
      - Loopring DEX Restful API
  /api/v2/mix/candlestick:
    get:
      description: Return the candlestick data of a given trading pair.
      operationId: getMixedCandlestickV2
      parameters:
      - description: "Trading pair ID, multi-market is not supported"
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Candlestick interval, Supported values are: 1min, 5min, 15min,\
          \ 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w"
        example: 5min
        in: query
        name: interval
        required: true
        schema:
          type: string
      - description: Start time
        example: 1584479105000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time
        example: 1584565505000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Number of data points. If more data points are available, the\
          \ API will only return the first 'limit' data points."
        example: 120
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandlestickResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market candlestick
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/nonce:
    get:
      description: Returns the next nonce of the Ethereum address associated with
        the user's account
      operationId: getEthNonceV3
      parameters:
      - description: Ethereum address
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: owner
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEthNonceV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104205":
          content: {}
          description: Error in internal request
        "104208":
          content: {}
          description: Unknown error in Ethereum node
      summary: Get user's next Ethereum nonce
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/balances:
    get:
      description: Returns user's Ether balance on Ethereum mainnet (not the Ether
        balance on Loopring.io)
      operationId: getEthBalanceV3
      parameters:
      - description: Ethereum address
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: owner
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEthBalancesV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104205":
          content: {}
          description: Error in internal request
        "104208":
          content: {}
          description: Unknown error in Ethereum node
      summary: Get user's Ether balance on Ethereum mainnet
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/tokenBalances:
    get:
      description: Returns user's token balance on Ethereum mainnet (not token's balance
        on Loopring.io)
      operationId: getTokenBalanceV3
      parameters:
      - description: Ethereum address
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: owner
        required: true
        schema:
          type: string
      - description: Token's ERC20 address
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: token
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenBalancesV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104205":
          content: {}
          description: Error in internal request
        "104208":
          content: {}
          description: Unknown error in Ethereum node
      summary: Get user token balance
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/allowances:
    get:
      description: Returns the allowance of a given token that the user has authorized
        for Loopring.io
      operationId: getAllowanceV3
      parameters:
      - description: Ethereum address
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: owner
        required: true
        schema:
          type: string
      - description: The token address to query
        example: 0x0000000000000000000000000000000000000000
        in: query
        name: token
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllowancesV2Response'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104205":
          content: {}
          description: Error in internal request
        "104208":
          content: {}
          description: Unknown error in Ethereum node
      summary: Get user token allowance
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/recommendedGasPrice:
    get:
      description: Get recommended gas price in Gwei.
      operationId: getRecommendedGasPriceV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecommendedGasPriceResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "105001":
          content: {}
          description: Failed to get recommended gas
      summary: Get recommended gas price
      tags:
      - Loopring DEX Restful API
  /api/v2/apiKey:
    get:
      description: Get the ApiKey associated with the user's account.
      operationId: getApiKeyV2
      parameters:
      - description: AccountID
        example: 10
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "101002":
          content: {}
          description: User not found
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: Get user ApiKey
      tags:
      - Loopring DEX Restful API
    post:
      description: Change the ApiKey associated with the user's account. The current
        ApiKey must be provided as the value of the X-API-KEY HTTP header.
      operationId: applyApiKeyV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GetApiKeyRequest'
        description: api.applyApiKey.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "101002":
          content: {}
          description: User not found
        "100001":
          content: {}
          description: Invalid argument
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: Update user's ApiKey
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/storageId:
    get:
      description: "Fetches the next order id for a given sold token. If the need\
        \ arises to repeatedly place orders in a short span of time, the order id\
        \ can be initially fetched through the API and then managed locally. Each\
        \ new order id can be derived from adding 2 to the last one"
      operationId: getNextStorageIdV2
      parameters:
      - description: Looprings account identifier
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: request.getNextStorageId.tokenSId
        example: 0
        in: query
        name: tokenSId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNextStorageIdResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get next storage ID
      tags:
      - Loopring DEX Restful API
  /api/v2/order:
    get:
      description: Get the details of an order based on order hash.
      operationId: getOrderDetailV2
      parameters:
      - description: "Account ID, could be empty if hash query is presented."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: Order hash
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        in: query
        name: orderHash
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderDetailResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "107002":
          content: {}
          description: Order Hash cannot be empty
        "107003":
          content: {}
          description: Order does not exist
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get order details
      tags:
      - Loopring DEX Restful API
    post:
      description: api.submitOrderV2.notes
      operationId: submitOrderV2V2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubmitOrderRequest'
        description: api.submitOrderV2.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOrderResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102002":
          content: {}
          description: Unsupported TokenId in the order
        "102003":
          content: {}
          description: Invalid account ID
        "102004":
          content: {}
          description: Invalid order ID
        "102005":
          content: {}
          description: Market does not support
        "102006":
          content: {}
          description: Illegal rate field
        "102007":
          content: {}
          description: Order already exists
        "102008":
          content: {}
          description: Order has expired
        "102010":
          content: {}
          description: Order is missing signature information
        "102011":
          content: {}
          description: Insufficient user balance
        "102012":
          content: {}
          description: The order amount is too small
        "102014":
          content: {}
          description: "Failed to freeze the amount, please try again later"
        "102020":
          content: {}
          description: Exceeded the maximum order amount
        "102027":
          content: {}
          description: Submit order failed
        "102120":
          content: {}
          description: Order is not valid
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: api.submitOrderV2.value
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/batchOrders:
    post:
      description: Submit up to 10 orders as a batch.
      operationId: batchSubmitOrderV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BatchSubmitOrderRequest'
        description: Body of batch submit orders.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitOrderResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "104209":
          content: {}
          description: Partial batch operation failed
      summary: Submit multiple orders
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/orders/byHash:
    delete:
      description: Cancel up to 10 orders by order hash.
      operationId: batchCancelOrdersByOrderHashV2
      parameters:
      - description: request.cancelOrders.accountId
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: "Hash of order to be canceled,separate multiple hashes with commas."
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860"
        in: query
        name: orderHash
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCancelOrderResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "104209":
          content: {}
          description: Partial batch operation failed
      summary: Cancel multiple orders by hash
      tags:
      - Loopring DEX Restful API
  /api/v2/orders/byClientOrderId:
    delete:
      description: Cancel up to 10 orders by clientOrderId.
      operationId: batchCancelOrdersByClientOrderIdV2
      parameters:
      - description: request.cancelOrders.accountId
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: ClientOrderIds of orders to be cancelled.
        example: "20200318000000001010,20200318000000001011"
        in: query
        name: clientOrderId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCancelOrderResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "104209":
          content: {}
          description: Partial batch operation failed
      summary: Cancel multiple orders by clientOrderId
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/sendTx:
    post:
      description: Relay a raw Ethereum transaction to Ethereum mainnet.
      operationId: sendTransactionV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ForwardEthTxRequest'
        description: Body of send raw transaction
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForwardEthTxResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104202":
          content: {}
          description: The current node service is not available
        "104205":
          content: {}
          description: Error in internal request
        "104208":
          content: {}
          description: Unknown error in Ethereum node
      summary: Send a raw Ethereum transaction
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/dualAuthTransfer:
    post:
      description: Submit dual authority transfer
      operationId: submitDualAuthTransferV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DualAuthTransferRequest'
        description: Submit dual authority transfer post message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit dual authority transfer
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/reward:
    post:
      operationId: submitRewardV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/user/balances:
    get:
      description: Returns user's Ether and token balances on exchange.
      operationId: getUserBalancesV2
      parameters:
      - description: AccountID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Query tokens
        example: "0,1"
        in: query
        name: tokens
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserBalancesResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user exchange balances
      tags:
      - Loopring DEX Restful API
  /api/v2/user/deposits:
    get:
      description: Returns a list of deposit records for the given user.
      operationId: getUserDepositsV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: ETH
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDepositResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user deposit history
      tags:
      - Loopring DEX Restful API
  /api/v2/user/withdrawals:
    get:
      description: Get user onchain withdrawal history.
      operationId: getUserWithdrawalsV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTxs.withdrawalTypes
        example: force_withdrawal
        in: query
        name: withdrawalTypes
        schema:
          enum:
          - force_withdrawal
          - offchain_withdrawal
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOnchainWithdrawalResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user onchain withdrawal history
      tags:
      - Loopring DEX Restful API
    post:
      description: Submit offchain withdraw request
      operationId: submitOffChainWithdrawalV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffChainWithdrawalRequest'
        description: Submit offchain withdraw request post message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit offchain withdraw request
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/user/transfers:
    get:
      description: Get user transfer list.
      operationId: getUserTransfersV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTxs.transferTypes
        example: "transfer, transfer_red"
        in: query
        name: transferTypes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserTransferResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user transfer list
      tags:
      - Loopring DEX Restful API
  /api/v2/user/createInfo:
    get:
      description: Returns a list Ethereum transactions from users for exchange account
        registration.
      operationId: getUserCreateV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCreateResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user registration transactions
      tags:
      - Loopring DEX Restful API
  /api/v2/user/updateInfo:
    get:
      description: Returns a list Ethereum transactions from users for resetting exchange
        passwords.
      operationId: getUserUpdateV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAccountUpdateResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get password reset transactions
      tags:
      - Loopring DEX Restful API
  /api/v2/user/trades:
    get:
      description: Get user trade history.
      operationId: getUserTradesV2
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Trading pair
        example: LRC-ETH
        in: query
        name: market
        schema:
          type: string
      - description: "If a value is provided, only returns the trades associated with\
          \ the given order"
        example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        in: query
        name: orderHash
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Pagination of data to return records earlier than the requested
          ID
        example: 1
        in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTrades.fillTypes
        example: dex
        in: query
        name: fillTypes
        schema:
          enum:
          - dex
          - amm
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserTradesResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user trade history
      tags:
      - Loopring DEX Restful API
  /api/v2/user/orderFee:
    get:
      description: Returns the fee rate of users placing orders in specific markets
      operationId: getUserFeeRates2V2
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: "List of markets to be queried separated by \",\""
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: Token ID
        example: 0
        in: query
        name: tokenB
        required: true
        schema:
          format: int32
          type: integer
      - description: Amount to buy
        example: "10000000000000000"
        in: query
        name: amountB
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserFeeRates2Request'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query user place order fee rate
      tags:
      - Loopring DEX Restful API
  /api/v2/user/orderAmount:
    get:
      description: Returns the minimum amount
      operationId: getOrderAmountV2
      parameters:
      - in: query
        name: tokenSymbol
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderAmountResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current token minimum amount to place order
      tags:
      - Loopring DEX Restful API
  /api/v2/user/orderUserRateAmount:
    get:
      description: Returns the minimum amount
      operationId: getOrderUserRateAmountV2
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: market
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderGroupAmountResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current token minimum amount to place order
      tags:
      - Loopring DEX Restful API
  /api/v3/user/bills:
    get:
      operationId: getUserBillV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int32
          type: integer
      - in: query
        name: billType
        schema:
          type: string
      - in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - in: query
        name: tokenId
        schema:
          default: -1
          format: int32
          type: integer
      - in: query
        name: income
        schema:
          default: false
          type: boolean
      - in: query
        name: transferAddress
        schema:
          type: string
      - in: query
        name: fromAddress
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/user/financeIncome:
    get:
      operationId: getFinanceIncomeV3
      parameters:
      - in: query
        name: address
        schema:
          type: string
      - in: query
        name: financeType
        schema:
          type: string
      - in: query
        name: tokenAddress
        schema:
          type: string
      - in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/crawl:
    get:
      operationId: crawlSiteV3
      parameters:
      - in: query
        name: site
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/crawlPriceFromBinance:
    get:
      operationId: crawlPriceFromBinanceV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/mix/markets:
    get:
      description: Returns the configurations of all supported markets (trading pairs)
      operationId: getMixedMarketsV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMixedMarketInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get market configurations
      tags:
      - Loopring DEX Restful API
  /api/v2/exchange/info:
    get:
      description: Return various configurations of Loopring.io
      operationId: getExchangeInfoV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get exchange configurations
      tags:
      - Loopring DEX Restful API
  /api/v2/exchange/feeInfo:
    get:
      description: Return various configurations of Loopring.io
      operationId: getExchangeFeeInfoV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeFeeInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get exchange configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/withdrawalAgents:
    get:
      description: api.getWithdrawalAgents.notes
      operationId: getWithdrawalAgentsV3
      parameters:
      - in: query
        name: tokenId
        schema:
          format: int32
          type: integer
      - in: query
        name: amount
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInfo'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getWithdrawalAgents.value
      tags:
      - Loopring DEX Restful API
  /api/v3/refer:
    post:
      operationId: setReferrerV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/liquidityMining:
    get:
      operationId: getLiquidityMiningRewardsV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: market
        schema:
          type: string
      - in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: timestamp
        schema:
          format: int64
          type: integer
      - in: query
        name: size
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/liquidityMiningTotal:
    get:
      operationId: getLiquidityMiningRewardTotalV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/liquidityMiningRank:
    get:
      operationId: getLiquidityMiningRankV3
      parameters:
      - in: query
        name: market
        schema:
          type: string
      - in: query
        name: top
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/liquidityMiningConf:
    get:
      operationId: getLiquidityMiningConfV3
      parameters:
      - in: query
        name: market
        schema:
          type: string
      - in: query
        name: running
        schema:
          default: false
          type: boolean
      - in: query
        name: pageIndex
        schema:
          format: int32
          type: integer
      - in: query
        name: size
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/activityRules:
    get:
      operationId: getActivityRulesV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/commissionReward:
    get:
      operationId: getCommissionRewardV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: tokenId
        schema:
          format: int32
          type: integer
      - in: query
        name: start
        schema:
          format: int64
          type: integer
      - in: query
        name: size
        schema:
          format: int32
          type: integer
      - in: query
        name: rewardType
        schema:
          format: int32
          type: integer
      - in: query
        name: taker
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/commissionRewardTotal:
    get:
      operationId: getCommissionTotalRewardV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/commissionRewardRank:
    get:
      operationId: getCommissionRewardRankV3
      parameters:
      - in: query
        name: tokenId
        schema:
          format: int32
          type: integer
      - in: query
        name: top
        schema:
          format: int32
          type: integer
      - in: query
        name: rewardType
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/profitShareReward:
    get:
      operationId: getProfitSharingStatusV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: tokenId
        schema:
          format: int32
          type: integer
      - in: query
        name: start
        schema:
          format: int64
          type: integer
      - in: query
        name: size
        schema:
          format: int32
          type: integer
      - in: query
        name: rewardType
        schema:
          format: int32
          type: integer
      - in: query
        name: taker
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/liquidityMiningUserHistory:
    get:
      operationId: getLiquidityMiningUserHistoryV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: markets
        schema:
          type: string
      - in: query
        name: start
        schema:
          format: int64
          type: integer
      - in: query
        name: end
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/verifyAllEcdsa:
    post:
      operationId: verifyAllEcdsaV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/spi/tokenInfo:
    get:
      description: api.getTokenInfo.notes
      operationId: getTokenInfoV3
      parameters:
      - description: token address to be queried
        example: ETH
        in: query
        name: tokenAddress
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserBalancesResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: api.getTokenInfo.value
      tags:
      - Loopring DEX Restful API
  /api/v3/spi/getAccountServices:
    get:
      operationId: getAccountServicesV3
      parameters:
      - in: query
        name: phone
        schema:
          type: string
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: wallet
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/hebao/refundPay:
    post:
      operationId: refundHebaoPayV3Hebao
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/hebao/preparePay:
    post:
      operationId: prepareHebaoPayV3Hebao
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/hebao/confirmPay:
    post:
      operationId: confirmHebaoPayV3Hebao
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/hebao/openAccount:
    post:
      operationId: openHebaoAccountV3Hebao
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/token/decimal:
    get:
      operationId: getTokenDecimalV2
      parameters:
      - description: token address to be queried
        example: "0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000001"
        in: query
        name: tokenAddresses
        required: true
        schema:
          type: string
      - description: network
        example: ETHEREUM or ARBITRUM
        in: query
        name: network
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/token/metadata:
    get:
      operationId: searchTokenMetadataV2
      parameters:
      - description: token address to be queried
        example: "0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000001"
        in: query
        name: tokenAddresses
        required: true
        schema:
          type: string
      - description: network
        example: ETHEREUM or ARBITRUM
        in: query
        name: network
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/currencyRates:
    get:
      operationId: getCurrencyRatesV2
      parameters:
      - description: Currency symbol to be queried
        example: "USD,CNY"
        in: query
        name: currencies
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/tokens/metadata:
    get:
      operationId: tokenMetadatasV2
      parameters:
      - in: query
        name: network
        schema:
          type: string
      - in: query
        name: offset
        schema:
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/tokens/search:
    get:
      operationId: searchTokenV2
      parameters:
      - in: query
        name: network
        schema:
          type: string
      - in: query
        name: key
        schema:
          type: string
      - in: query
        name: offset
        schema:
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/game/rank:
    get:
      operationId: getTournamentRankV3
      parameters:
      - in: query
        name: ammPoolMarket
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/game/user/rank:
    get:
      operationId: getUserTournamentRankV3
      parameters:
      - in: query
        name: owner
        schema:
          type: string
      - in: query
        name: ammPoolMarket
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/eth/recommendedGasPriceRange:
    get:
      description: Get recommended gas price in Gwei.
      operationId: getRecommendedGasPriceRangeV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecommendedGasPriceResponseRangeV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "105001":
          content: {}
          description: Failed to get recommended gas
      summary: Get recommended gas price
      tags:
      - Loopring DEX Restful API
  /v3/ws:
    get:
      operationId: wsV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WebSocket'
          description: successful operation
      tags:
      - LightCone WebSocket API
  /v2/ws/key:
    get:
      operationId: getWsKeyV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - LightCone WebSocket API
  /v3/ws/key:
    get:
      operationId: getWsKeyV3V3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - LightCone WebSocket API
  /api/v3/nft/mint:
    post:
      description: Mint a NFT token in Loopring L2
      operationId: submitMintNftV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubmitNftMintRequest'
        description: Mint a NFT token in Loopring L2
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitMintNftResponseItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
        "108003":
          content: {}
          description: code.108003
      summary: Mint a NFT token in Loopring L2
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/nft/transfer:
    post:
      description: api.submitNftTransfer.notes
      operationId: submitNftTransferV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NftTransferRequest'
        description: api.submitNftTransfer.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit internal NFT transfer
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/nft/validateOrder:
    post:
      description: Validate a NFT order
      operationId: validateNftOrderV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubmitNftOrderRequestV3'
        description: Validate a NFT order
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Validate a NFT order
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/nft/trade:
    post:
      description: Settle down an NFT trade which has two matched orders
      operationId: submitNftTradeV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubmitNftTradeRequestV3'
        description: Settle down an NFT trade which has two matched orders
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTradeResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Settle down an NFT trade which has two matched orders
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/nft/withdrawal:
    post:
      description: Withdraw a NFT token
      operationId: submitOffChainNftWithdrawalV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NftOffChainWithdrawalRequestV3'
        description: Withdraw a NFT token
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Withdraw a NFT token
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/nft/deployTokenAddress:
    post:
      operationId: deployTokenAddressV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/nfts:
    get:
      description: Query NFT info by looprings nftData
      operationId: getNftsInfoV3
      parameters:
      - description: The Loopring's NFT token data identifier which is a hash string
          of NFT token address and NFT_ID
        example: "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085,0xc3a9053f313eef7c932351ca7100400f7c186fa16209c018f7f1dba8aa831085"
        in: query
        name: nftDatas
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTokenInfo'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Query NFT info by looprings nftData
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/nftData:
    get:
      description: "Query nftDatas by minter, tokenAddress and nftID."
      operationId: getNftDataV3
      parameters:
      - description: The minters accountId.
        example: "10001"
        in: query
        name: minter
        required: true
        schema:
          type: string
      - description: The NFT token address
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: tokenAddress
        required: true
        schema:
          type: string
      - description: The NFT_ID of the NFT token
        example: 0x01
        in: query
        name: nftId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTokenInfo'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: "Query nftDatas by minter, tokenAddress and nftID."
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/nftHolders:
    get:
      description: Query NFT holders by looprings nftData
      operationId: getNftHoldersV3
      parameters:
      - description: The Loopring's NFT token data identifier which is a hash string
          of NFT token address and NFT_ID
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        required: true
        schema:
          type: string
      - description: Number of records to skip
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to return
        example: 100
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftHolders'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Query NFT holders by looprings nftData
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/orderUserRateAmount:
    get:
      description: "minAmount is the minFee under the basic feeRate of the user, tradeCosts\
        \ is the cost of L2 trade settlement, also it returns the market order requirements:\
        \ the min/max order amount. So an valid order should meet these 3 requirements:.1.\
        \ order.maxFeeBips >= feeRate.rate and order.amount >= minAmounts.2. order.amount\
        \ * order.maxFeeBips > tradeCosts if order.amount < minAmounts.3. marketOrderInfo.min\
        \ <= order.amount <= marketOrderInfo.max.These amounts change according to\
        \ ETH gas price and get refreshed every 15 mins."
      operationId: getNftOrderUserRateAmountV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 10086
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: NFT token address of order
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: nftTokenAddress
        required: true
        schema:
          type: string
      - description: Fee token symbol
        example: ETH
        in: query
        name: feeTokenSymbol
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftOrderRatesAmountsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current token minimum amount to place order based on users VIP
        level and max fee bips
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/minters:
    get:
      description: Filtered by channel and auth contract address
      operationId: getNftMintersV3
      parameters:
      - description: "channel id, if you dont know your channel id, please contact\
          \ with Loopring team."
        example: 1
        in: query
        name: channel
        required: true
        schema:
          format: int32
          type: integer
      - description: auth contract address
        in: query
        name: authContractAddress
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNftMintersResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get minters
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/nftTokenAddresses:
    get:
      description: Filtered by channel and auth contract address
      operationId: getNftTokenAddressesV3
      parameters:
      - description: "channel id, if you dont know your channel id, please contact\
          \ with Loopring team."
        example: 1
        in: query
        name: channel
        required: true
        schema:
          format: int32
          type: integer
      - description: auth contract address
        in: query
        name: authContractAddress
        schema:
          type: string
      - description: "amount to skip(default: 0)"
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Max amount of token addresses to return(default: 500)"
        example: 100
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNftTokenAddressesResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get Nft token addresses
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/canMint:
    get:
      description: "true if authorized, false otherwise."
      operationId: canMintV3
      parameters:
      - description: minter address
        in: query
        name: minter
        required: true
        schema:
          type: string
      - description: nft token address
        in: query
        name: nftTokenAddress
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: check if a minter is authorized on a nft token contract
      tags:
      - Loopring DEX Restful API
  /api/v3/nft/info/computeTokenAddress:
    get:
      operationId: computeTokenAddressV3
      parameters:
      - in: query
        name: nftFactory
        schema:
          type: string
      - in: query
        name: nftOwner
        schema:
          type: string
      - description: request.computeTokenAddress.nftBaseUri
        in: query
        name: nftBaseUri
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/balances:
    get:
      description: "Get users NFT balance, besides amount, it also includes tokenId\
        \ and nftData"
      operationId: getUserNftBalancesV3
      parameters:
      - description: AccountID
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: The Loopring's NFT token data identifier which is a hash string
          of NFT token address and NFT_ID
        example: "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085,0xc3a9053f313eef7c932351ca7100400f7c186fa16209c018f7f1dba8aa831085"
        in: query
        name: nftDatas
        schema:
          type: string
      - description: NFT token address
        example: "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085,0xc3a9053f313eef7c932351ca7100400f7c186fa16209c018f7f1dba8aa831085"
        in: query
        name: tokenAddrs
        schema:
          type: string
      - description: The token slot ID in loopring DEX.
        example: "32768,32769,32770"
        in: query
        name: tokenIds
        schema:
          type: string
      - description: Number of records to skip
        example: 12345
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 20
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Hide 0 balance NFT token, default is true"
        example: true
        in: query
        name: nonZero
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftBalancesResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get users NFT balance
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/trades:
    get:
      description: Users NFT trade list
      operationId: getNftTradesV3
      parameters:
      - description: users accountId.
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: the nftData of the NFT token
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: request.getNftTrades.orderHash
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: orderHash
        schema:
          type: string
      - description: request.getNftTrades.tradeHash
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: Start time in milliseconds
        example: 1567053142
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1567053142
        in: query
        name: startId
        schema:
          default: 0
          format: int64
          type: integer
      - description: The begin id of the query.
        example: 1234
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftTradeList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Users Nft trade list
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/transfers:
    get:
      description: Returns a list of NFT trade records for the given user.
      operationId: getNftTransfersV3
      parameters:
      - description: users accountId.
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: the nftData of the NFT token
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: Start time in milliseconds
        example: 1567053142
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1567053142
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: The begin id of the query.
        example: 1234
        in: query
        name: startId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: The transfer status
        example: processing
        in: query
        name: txStatus
        schema:
          enum:
          - processing
          - processed
          - failed
          - received
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftTransfersResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user NFT transfer history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/mints:
    get:
      description: Returns a list of NFT mint records for the given user.
      operationId: getUserNftMintsV3
      parameters:
      - description: users accountId.
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: the nftData of the NFT token
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: Start time in milliseconds
        example: 1567053142
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1567053142
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: The begin id of the query.
        example: 1234
        in: query
        name: startId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: The mint status
        example: processing
        in: query
        name: txStatus
        schema:
          enum:
          - processing
          - processed
          - failed
          - received
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftMintsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user NFT mint history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/deposits:
    get:
      description: Returns a list of NFT deposit records for the given user.
      operationId: getNftDepositsV3
      parameters:
      - description: users accountId.
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: the nftData of the NFT token
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: Start time in milliseconds
        example: 1567053142
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1567053142
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: The begin id of the query.
        example: 1234
        in: query
        name: startId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: The deposit status
        example: processing
        in: query
        name: txStatus
        schema:
          enum:
          - processing
          - processed
          - failed
          - received
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftDepositResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user NFT deposit history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/withdrawals:
    get:
      description: Returns a list of NFT withdraw records for the given user.
      operationId: getNftWithdrawalsV3
      parameters:
      - description: users accountId.
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: the nftData of the NFT token
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: Start time in milliseconds
        example: 1567053142
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1567053142
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: The begin id of the query.
        example: 1234
        in: query
        name: startId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: The withdrawal status
        example: processing
        in: query
        name: txStatus
        schema:
          enum:
          - processing
          - processed
          - failed
          - received
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftWithdrawalResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user NFT withdraw history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/offchainFee:
    get:
      description: Returns the NFT requests fee amount
      operationId: getNftRequestFeesV3
      parameters:
      - description: Account ID
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Off-chain request type
        example: 9
        in: query
        name: requestType
        required: true
        schema:
          format: int32
          type: integer
      - description: the NFT tokenAddress
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: tokenAddress
        schema:
          type: string
      - description: The amount to withdraw
        example: "10000000000"
        in: query
        name: amount
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffFeeInfo2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current NFT requests fee amount
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/orderFee:
    get:
      description: Returns the fee rate of users placing orders in specific markets
      operationId: getUserNftOrderFeeRatesV3
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: NFT token address of order
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftTokenAddress
        required: true
        schema:
          type: string
      - description: the quote token of the NFT-Quote market
        example: 0
        in: query
        name: quoteToken
        required: true
        schema:
          format: int32
          type: integer
      - description: request.getUserFeeRates.quoteAmount
        example: "10000000000000000"
        in: query
        name: quoteAmount
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftFeeRatesResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query user place order fee rate
      tags:
      - Loopring DEX Restful API
  /api/v3/user/nft/transactions:
    get:
      description: api.getUserNftTransactions.notes
      operationId: getUserNftTransactionsV3
      parameters:
      - description: request.getUserNftTransactions.accountId
        example: 10001
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: request.getUserNftTransactions.start
        example: 1
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserNftTransactions.end
        example: 100
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserNftTransactions.limit
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: request.getUserNftTransactions.offset
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserNftTransactions.nftHash
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: nftData
        schema:
          type: string
      - description: request.getUserNftTransactions.txStatus
        example: processing
        in: query
        name: txStatus
        schema:
          enum:
          - processing
          - processed
          - failed
          - received
          type: string
      - description: request.getUserNftTransactions.types
        example: "mint,deposit,transfer,onchain_withdrawal,offchain_withdrawal"
        in: query
        name: types
        schema:
          type: string
      - description: request.getUserNftTransactions.hashes
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserNftTxsResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: api.getUserNftTransactions.value
      tags:
      - Loopring DEX Restful API
  /api/v3/timestamp:
    get:
      description: Returns the relayer's current time in millisecond
      operationId: getTimestampV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimestampV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get relayer's current time
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/tokens:
    get:
      description: "Returns the configurations of all supported tokens, including\
        \ Ether."
      operationId: getTokensV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get token configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/notWithdrawContractTokens:
    get:
      description: api.getNotWithdrawContractTokens.notes
      operationId: getNotWithdrawContractTokensV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getNotWithdrawContractTokens.value
      tags:
      - Loopring DEX Restful API
  /api/v3/user/offchainFee:
    get:
      description: Returns the fee amount
      operationId: getBusinessFee2V3
      parameters:
      - description: Account ID
        example: 0
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Off-chain request type
        example: 1
        in: query
        name: requestType
        required: true
        schema:
          format: int32
          type: integer
      - description: The token to withdraw
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: The amount to withdraw
        example: "10000000000"
        in: query
        name: amount
        schema:
          type: string
      - description: The market
        example: LRC-USDT
        in: query
        name: market
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffFeeInfo2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current fee amount
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/markets:
    get:
      description: Returns the configurations of all supported markets (trading pairs)
      operationId: getMarketsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarketsResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get market configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/pools:
    get:
      description: Returns the configurations of all supported AMM pools
      operationId: getAmmPoolsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmPoolsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get AMM pool configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/transfer:
    post:
      description: Submit internal transfer
      operationId: submitTransferV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OriginTransferRequestV3'
        description: Submit internal transfer post message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit internal transfer
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/account:
    get:
      description: Returns data associated with the user's exchange account.
      operationId: getAccountV3
      parameters:
      - description: "Ethereum address, either owner or accountId should be presented."
        example: 0x123456
        in: query
        name: owner
        schema:
          type: string
      - description: "AccountID, if owner is presented, it must be align with the\
          \ owners accountId, otherwise an error occurs."
        example: 10003
        in: query
        name: accountId
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DexAccountV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "101001":
          content: {}
          description: The address was not found
        "101002":
          content: {}
          description: User not found
      summary: Query user information
      tags:
      - Loopring DEX Restful API
    post:
      description: "Updates the EDDSA key associated with the specified account, making\
        \ the previous one invalid in the process."
      operationId: submitUpdateAccountV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateAccountRequestV3'
        description: api.submitUpdateAccount.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Update account EDDSA key
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/orders:
    get:
      description: Get a list of orders satisfying certain criteria.
      operationId: getOrdersV3
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Trading pair
        example: LRC-ETH
        in: query
        name: market
        schema:
          type: string
      - description: Lower bound of order's creation timestamp in millisecond
        example: 1567053142000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: Upper bound of order's creation timestamp in millisecond
        example: 1567053242000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: '"BUY" or "SELL"'
        example: BUY
        in: query
        name: side
        schema:
          enum:
          - BUY
          - SELL
          type: string
      - description: 'Order status. You can specify one of the following values:'
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - failed
          - cancelled
          - cancelling
          - expired
          type: string
      - description: Limit of orders (default 50)
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Offset of orders (default 0)
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getOrders.orderTypes
        example: LIMIT_ORDER
        in: query
        name: orderTypes
        schema:
          enum:
          - LIMIT_ORDER
          - MAKER_ONLY
          - TAKER_ONLY
          - AMM
          type: string
      - description: field.SubmitOrderRequest.tradeChannel
        example: "ORDER_BOOK,AMM_POOL"
        in: query
        name: tradeChannels
        schema:
          enum:
          - ORDER_BOOK:0
          - AMM_POOL:1
          - MIXED:2
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersDetailV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get multiple orders
      tags:
      - Loopring DEX Restful API
  /api/v3/getAvailableBroker:
    get:
      operationId: getAvailableBrokerV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getDepthV3
      parameters:
      - description: The ID of a trading pair.
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DepthV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v3/mix/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getMixedDepthV3
      parameters:
      - description: The ID of a trading pair.
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      - description: request.getDepth.showOverlap
        example: false
        in: query
        name: showOverlap
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DepthV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get mixed market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v3/ticker:
    get:
      description: "Gets a markets ticker. Generally speaking, a ticker in Loopring\
        \ consists in data from the market taken last 24Hours."
      operationId: getTickerV3
      parameters:
      - description: "Market pair, support multiple markets"
        example: "LRC-ETH,LRC-USDT"
        in: query
        name: market
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetTickerResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market ticker
      tags:
      - Loopring DEX Restful API
  /api/v3/mix/ticker:
    get:
      description: "Gets a markets ticker. Generally speaking, a ticker in Loopring\
        \ consists in data from the market taken last 24Hours."
      operationId: getMixedTickerV3
      parameters:
      - description: "Market pair, support multiple markets"
        example: "LRC-ETH,LRC-USDT"
        in: query
        name: market
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetTickerResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get mixed market ticker
      tags:
      - Loopring DEX Restful API
  /api/v3/price:
    get:
      description: "Fetches, for all the tokens supported by Loopring, their fiat\
        \ price."
      operationId: getPriceV3
      parameters:
      - description: "The fiat currency to uses. Currently the following values are\
          \ supported: USD,CNY,JPY,EUR,GBP,HKD"
        example: USD
        in: query
        name: legal
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPriceResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get token fiat prices
      tags:
      - Loopring DEX Restful API
  /api/v3/trade:
    get:
      description: Query trades with specified market
      operationId: getMarketTradeV3
      parameters:
      - description: Single market to query
        example: LRC-USDT
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: Number of queries
        example: 20
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: request.getUserTxs.fillTypes
        example: dex
        in: query
        name: fillTypes
        schema:
          enum:
          - dex
          - amm
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketTradesV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get market recent trades
      tags:
      - Loopring DEX Restful API
  /api/v3/candlestick:
    get:
      description: Return the candlestick data of a given trading pair.
      operationId: getCandlestickV3
      parameters:
      - description: "Trading pair ID, multi-market is not supported"
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Candlestick interval, Supported values are: 1min, 5min, 15min,\
          \ 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w"
        example: 5min
        in: query
        name: interval
        required: true
        schema:
          type: string
      - description: Start time
        example: 1584479105000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time
        example: 1584565505000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Number of data points. If more data points are available, the\
          \ API will only return the first 'limit' data points."
        example: 120
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandlestickResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get market candlestick
      tags:
      - Loopring DEX Restful API
  /api/v3/mix/candlestick:
    get:
      description: Return the candlestick data of a given trading pair.
      operationId: getMixedCandlestickV3
      parameters:
      - description: "Trading pair ID, multi-market is not supported"
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: "Candlestick interval, Supported values are: 1min, 5min, 15min,\
          \ 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w"
        example: 5min
        in: query
        name: interval
        required: true
        schema:
          type: string
      - description: Start time
        example: 1584479105000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time
        example: 1584565505000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Number of data points. If more data points are available, the\
          \ API will only return the first 'limit' data points."
        example: 120
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandlestickResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
      summary: Get mixed market candlestick
      tags:
      - Loopring DEX Restful API
  /api/v3/apiKey:
    get:
      description: Get the ApiKey associated with the user's account.
      operationId: getApiKeyV3
      parameters:
      - description: AccountID
        example: 10
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "101002":
          content: {}
          description: User not found
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: Get user ApiKey
      tags:
      - Loopring DEX Restful API
    post:
      description: Change the ApiKey associated with the user's account. The current
        ApiKey must be provided as the value of the X-API-KEY HTTP header.
      operationId: applyApiKeyV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/GetApiKeyRequest'
        description: api.applyApiKey.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "101002":
          content: {}
          description: User not found
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: Update user's ApiKey
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/storageId:
    get:
      description: "Fetches the next order id for a given sold token. If the need\
        \ arises to repeatedly place orders in a short span of time, the order id\
        \ can be initially fetched through the API and then managed locally. Each\
        \ new order id can be derived from adding 2 to the last one"
      operationId: getNextStorageIdV3
      parameters:
      - description: Looprings account identifier
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: The unique identifier of the token which the user wants to sell
          in the next order.
        example: 0
        in: query
        name: sellTokenId
        required: true
        schema:
          format: int32
          type: integer
      - description: "Return the max of the next available storageId, so any storageId\
          \ > returned value is avaliable, to help user manage storageId by themselves.\
          \ for example, if [20, 60, 100] is avaliable, all other ids < 100 is used\
          \ before, user gets 20 if flag is false (and 60 in next run), but gets 100\
          \ if flag is true, so he can use 102, 104 freely"
        example: "0"
        in: query
        name: maxNext
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NextStorageIdResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get next storage ID
      tags:
      - Loopring DEX Restful API
  /api/v3/order:
    delete:
      description: Cancel order using order hash or client-side ID.
      operationId: cancelOrderV3
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: Order HASH
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        in: query
        name: orderHash
        schema:
          type: string
      - description: The unique order ID of the client
        example: "20200318000000001010"
        in: query
        name: clientOrderId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOrderResponseItemV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "102117":
          content: {}
          description: No orders to cancel
        "102118":
          content: {}
          description: "Failed to cancel orders, please try again later"
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Cancel order
      tags:
      - Loopring DEX Restful API
    get:
      description: Get the details of an order based on order hash.
      operationId: getOrderDetailV3
      parameters:
      - description: "Account ID, could be empty if hash query is presented."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: Order hash
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        in: query
        name: orderHash
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "107002":
          content: {}
          description: Order Hash cannot be empty
        "107003":
          content: {}
          description: Order does not exist
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get order details
      tags:
      - Loopring DEX Restful API
    post:
      description: Submit an order
      operationId: submitOrderV3V3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubmitOrderRequestV3'
        description: Submit order message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOrderResponseItemV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102002":
          content: {}
          description: Unsupported TokenId in the order
        "102003":
          content: {}
          description: Invalid account ID
        "102004":
          content: {}
          description: Invalid order ID
        "102005":
          content: {}
          description: Market does not support
        "102006":
          content: {}
          description: Illegal rate field
        "102007":
          content: {}
          description: Order already exists
        "102008":
          content: {}
          description: Order has expired
        "102010":
          content: {}
          description: Order is missing signature information
        "102011":
          content: {}
          description: Insufficient user balance
        "102012":
          content: {}
          description: The order amount is too small
        "102014":
          content: {}
          description: "Failed to freeze the amount, please try again later"
        "102020":
          content: {}
          description: Exceeded the maximum order amount
        "102021":
          content: {}
          description: Nonce is invalid
        "102027":
          content: {}
          description: Submit order failed
        "102120":
          content: {}
          description: Order is not valid
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
        "104004":
          content: {}
          description: No signature information provided
        "104005":
          content: {}
          description: Wrong signature information
      summary: Submit an order
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/orders/byHash:
    delete:
      operationId: batchCancelOrdersByOrderHashV3
      parameters:
      - description: request.cancelOrders.accountId
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: "Hash of order to be canceled,separate multiple hashes with commas."
        example: "13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860"
        in: query
        name: orderHash
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/orders/byClientOrderId:
    delete:
      operationId: batchCancelOrdersByClientOrderIdV3
      parameters:
      - description: request.cancelOrders.accountId
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: ClientOrderIds of orders to be cancelled.
        example: "20200318000000001010,20200318000000001011"
        in: query
        name: clientOrderId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/user/balances:
    get:
      description: Returns user's Ether and token balances on exchange.
      operationId: getUserBalancesV3
      parameters:
      - description: AccountID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Query tokens
        example: "0,1"
        in: query
        name: tokens
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user exchange balances
      tags:
      - Loopring DEX Restful API
  /api/v3/user/deposits:
    get:
      description: Returns a list of deposit records for the given user.
      operationId: getUserDepositsV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: ETH
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositDataList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user deposit history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/withdrawals:
    get:
      description: Get user onchain withdrawal history.
      operationId: getUserWithdrawalsV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          default: 0
          format: int64
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTxs.withdrawalTypes
        example: force_withdrawal
        in: query
        name: withdrawalTypes
        schema:
          enum:
          - force_withdrawal
          - offchain_withdrawal
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnchainWithdrawalDataList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user onchain withdrawal history
      tags:
      - Loopring DEX Restful API
    post:
      description: Submit offchain withdraw request
      operationId: submitOffChainWithdrawalV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffChainWithdrawalRequestV3'
        description: Submit offchain withdraw request post message body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Submit offchain withdraw request
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/user/transfers:
    get:
      description: Get user transfer list.
      operationId: getUserTransfersV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        schema:
          default: 0
          format: int64
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTxs.transferTypes
        example: "transfer, transfer_red"
        in: query
        name: transferTypes
        schema:
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferDataList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user transfer list
      tags:
      - Loopring DEX Restful API
  /api/v3/user/createInfo:
    get:
      description: Returns a list Ethereum transactions from users for exchange account
        registration.
      operationId: getUserCreateV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateDataList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user registration transactions
      tags:
      - Loopring DEX Restful API
  /api/v3/user/updateInfo:
    get:
      description: Returns a list Ethereum transactions from users for resetting exchange
        passwords.
      operationId: getUserUpdateV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated status values
        example: "processing,processed"
        in: query
        name: status
        schema:
          enum:
          - processing
          - processed
          - received
          - failed
          type: string
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountUpdateDataList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get password reset transactions
      tags:
      - Loopring DEX Restful API
  /api/v3/user/trades:
    get:
      description: Get user trade history.
      operationId: getUserTradesV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Trading pair
        example: LRC-ETH
        in: query
        name: market
        schema:
          type: string
      - description: Order hash
        example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        in: query
        name: orderHash
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: The begin id of the query
        example: 1
        in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - description: request.getUserTxs.fillTypes
        example: dex
        in: query
        name: fillTypes
        schema:
          enum:
          - dex
          - amm
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: Get user trade history
      tags:
      - Loopring DEX Restful API
  /api/v3/user/orderFee:
    get:
      description: Returns the fee rate of users placing orders in specific markets
      operationId: getUserFeeRates2V3
      parameters:
      - description: Account ID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: "List of markets to be queried separated by \",\""
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      - description: Token ID
        example: 0
        in: query
        name: tokenB
        required: true
        schema:
          format: int32
          type: integer
      - description: Amount to buy
        example: "10000000000000000"
        in: query
        name: amountB
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserFeeRatesResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query user place order fee rate
      tags:
      - Loopring DEX Restful API
  /api/v3/user/orderAmount:
    get:
      description: Returns the minimum amount
      operationId: getOrderAmountV3
      parameters:
      - description: Token symbol to place order
        example: LRC
        in: query
        name: tokenSymbol
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderAmountResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current token minimum amount to place order
      tags:
      - Loopring DEX Restful API
  /api/v3/user/orderUserRateAmount:
    get:
      description: "This API returns 2 minimum amounts, one is based on users fee\
        \ rate, the other is based on the maximum fee bips which is 0.6%. In other\
        \ words, if user wants to keep fee rate, the minimum order is higher, otherwise\
        \ he needs to pay more but can place less amount orders."
      operationId: getOrderUserRateAmountV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 10086
        in: query
        name: accountId
        required: true
        schema:
          format: int64
          type: integer
      - description: Trading pair
        example: LRC-ETH
        in: query
        name: market
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderGroupAmountData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Query current token minimum amount to place order based on users VIP
        level and max fee bips
      tags:
      - Loopring DEX Restful API
  /api/v3/mix/markets:
    get:
      description: Returns the configurations of all supported markets (trading pairs)
      operationId: getMixedMarketsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMixedMarketsResponseV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get mixed market configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/info:
    get:
      description: Return various configurations of Loopring.io
      operationId: getExchangeInfoV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeInfo'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get exchange configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/feeInfo:
    get:
      description: Return various configurations of Loopring.io
      operationId: getExchangeFeeInfoV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeFeeInfoResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get exchange configurations
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getAmmDepthV3
      parameters:
      - description: request.getAmmDepth.market
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: poolAddress
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DepthV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/join:
    post:
      description: Return the join request processing status
      operationId: submitAmmPoolJoinV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AmmPoolJoinRequestV3'
        description: AMM join request params
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Join into AMM pool
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/amm/exit:
    post:
      description: Return the exit request processing status
      operationId: submitAmmPoolExitV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AmmPoolExitRequestV3'
        description: AMM exit request params
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Exit an AMM pool
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/amm/transactions:
    get:
      description: Return the AMM join/exit transactions
      operationId: getAmmTransactionsV3
      parameters:
      - description: The address of the pool on which the swap was submitted.
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: poolAddress
        required: true
        schema:
          type: string
      - description: Date from which to start fetching AMM transactions.
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End Date of the query
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Used to limit the number of returned records. Useful in implementing
          pagination.
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Used to apply an offset when looking for valid records. Useful
          in implementing
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Transaction type: join or exit"
        example: "join,exit"
        in: query
        name: txTypes
        schema:
          type: string
      - description: The AMM transaction status.
        example: processing
        in: query
        name: txStatus
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBillList'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: get AMM involved join/exit transactions
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/user/transactions:
    get:
      description: Return the user's AMM join/exit transactions
      operationId: getAmmUserTransactionsV3
      parameters:
      - description: Looprings account identifier.
        example: 1578558098000
        in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - description: Date from which to start fetching AMM transactions.
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End Date of the query
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Used to limit the number of returned records. Useful in implementing
          pagination.
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Used to apply an offset when looking for valid records. Useful
          in implementing
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Transaction type: join or exit"
        example: "0"
        in: query
        name: txTypes
        schema:
          type: string
      - description: The AMM transaction status.
        example: "0"
        in: query
        name: txStatus
        schema:
          type: string
      - description: The address of the pool on which the swap was submitted.
        example: "0"
        in: query
        name: ammPoolAddress
        schema:
          type: string
      - description: request.getAmmTransactions.hashes
        example: "0"
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmmTransactionDataListV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: User's AMM join/exit transactions
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/trades:
    get:
      description: get AMM pool trade transactions
      operationId: getAmmTradesV3
      parameters:
      - description: The address of the pool on which the swap was submitted.
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: ammPoolAddress
        required: true
        schema:
          type: string
      - description: Used to limit the number of returned records. Useful in implementing
          pagination.
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: Used to apply an offset when looking for valid records. Useful
          in implementing
        example: 0
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmmTradeDataListV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: get AMM pool trade transactions
      tags:
      - Loopring DEX Restful API
  /api/v3/poolsStats:
    get:
      description: api.getPoolsStats.notes
      operationId: getPoolsStatsV3
      parameters:
      - in: query
        name: ammPoolMarkets
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmmPoolStatistics'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getPoolsStats.value
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/user/rewards:
    get:
      description: api.getPoolsStats.notes
      operationId: getUserRewardsV3
      parameters:
      - in: query
        name: owner
        schema:
          format: int64
          type: integer
      - in: query
        name: ammPoolMarkets
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmPoolsStatsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getPoolsStats.value
      tags:
      - Loopring DEX Restful API
  /api/v3/counterFactualInfo:
    get:
      description: api.getCounterFactualInfo.notes
      operationId: getCounterFactualInfoV3
      parameters:
      - in: query
        name: accountId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCounterFactualInfo'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: api.getCounterFactualInfo.value
      tags:
      - Loopring DEX Restful API
  /api/v3/user/transactions:
    get:
      operationId: getUserTransactionsV3
      parameters:
      - description: "Account ID, some hash query APIs doesnt need it if in hash query\
          \ mode, check require flag of each API to see if its a must."
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Start time in milliseconds
        example: 1578558098000
        in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - description: End time in milliseconds
        example: 1578558098000
        in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of records to return
        example: 50
        in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - description: "Token to filter. If you want to return deposit records for all\
          \ tokens, omit this parameter"
        example: LRC
        in: query
        name: tokenSymbol
        schema:
          type: string
      - description: Number of records to skip
        example: 1
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: The type of the transactions to be queried
        example: deposit
        in: query
        name: types
        schema:
          type: string
      - description: "The hashes (split by ,) of the transactions, normally its L2\
          \ tx hash, except the deposit which uses L1 tx hash."
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      tags:
      - Loopring DEX Restful API
  /api/v3/user/daoSquareAccounts:
    get:
      operationId: getDaoSquareAccountsV3
      parameters:
      - in: query
        name: startTime
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: endTime
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/user/vipInfo:
    get:
      description: api.getUserVipInfo.notes
      operationId: getUserVipInfoV3
      parameters:
      - description: request.getUserVipInfo.address
        in: query
        name: userAddress
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: api.getUserVipInfo.value
      tags:
      - Loopring DEX Restful API
  /api/v3/exchange/recommended:
    get:
      description: api.getRecommendedMarkets.notes
      operationId: getRecommendedMarketsV3
      parameters:
      - in: query
        name: size
        schema:
          default: 4
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeFeeInfoResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getRecommendedMarkets.value
      tags:
      - Loopring DEX Restful API
    post:
      description: api.getRecommendedMarkets.notes
      operationId: submitRecommendedMarketsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeFeeInfoResponseData'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getRecommendedMarkets.value
      tags:
      - Loopring DEX Restful API
  /api/v3/requestInBlock:
    get:
      description: Get block to which a L2 tx belongs
      operationId: getRequestInBlockV3
      parameters:
      - description: L2 tx hash
        example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        in: query
        name: hashes
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestInBlockResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get a txs block
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/balance:
    get:
      description: Returns the snapshot of specific AMM pool
      operationId: getAmmPoolBalanceV3
      parameters:
      - description: input AMM pool address
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: poolAddress
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmmPoolBalanceV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get AMM pool balance snapshot
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/balances:
    get:
      description: api.getAmmPoolsBalances.notes
      operationId: getAmmPoolsBalancesV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmmPoolBalanceV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getAmmPoolsBalances.value
      tags:
      - Loopring DEX Restful API
  /api/v3/block/getBlock:
    get:
      description: Get L2 block info by block id
      operationId: getBlockV3
      parameters:
      - description: "The block id, could be finalized, confirmed, or block_idx_num"
        example: "1234"
        in: query
        name: id
        schema:
          default: finalized
          enum:
          - finalized
          - confirmed
          - "{block_idx_num}"
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResp'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get L2 block info
      tags:
      - Loopring DEX Restful API
  /api/v3/block/getPendingRequests:
    get:
      description: Get pending txs to be packed into next block
      operationId: getPendingRequestsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionBlock'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: Get pending txs
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/assets:
    get:
      operationId: getAmmAssetsV3
      parameters:
      - in: query
        name: poolAddress
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/sidecar/ProtocolPortrait:
    get:
      operationId: getProtocolPortraitV3
      parameters:
      - in: query
        name: timestamp
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/markets:
    get:
      description: api.getAmmMarkets.notes
      operationId: getAmmMarketsV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmMarketInfoResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getAmmMarkets.value
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/snapshot:
    get:
      description: api.getAmmSnapshot.notes
      operationId: getAmmSnapshotV2
      parameters:
      - description: request.getAmmSnapshot.address
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: poolAddress
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmSnapshotResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getAmmSnapshot.value
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/snapshots:
    get:
      description: api.getAmmSnapshots.notes
      operationId: getAmmSnapshotsV2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmSnapshotResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getAmmSnapshots.value
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/depth:
    get:
      description: Returns the order book of a given trading pair.
      operationId: getAmmDepthV2
      parameters:
      - description: request.getAmmDepth.market
        example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        in: query
        name: poolAddress
        required: true
        schema:
          type: string
      - description: "Order book aggregation level, larger value means further price\
          \ aggregation."
        example: 2
        in: query
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: Maximum numbers of bids/asks.
        example: 50
        in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDepthResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "108000":
          content: {}
          description: Unsupported market
        "108001":
          content: {}
          description: Unsupported depth level
      summary: Get market orderbook
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/join:
    post:
      description: Return the join request processing status
      operationId: submitAmmPoolJoinV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AmmPoolJoinRequest'
        description: api.AmmPoolJoinRequest.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Join into AMM pool
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/amm/exit:
    post:
      description: Return the exit request processing status
      operationId: submitAmmPoolExitV2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AmmPoolExitRequest'
        description: api.submitAmmPoolExit.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: Exit an AMM pool
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v2/amm/transactions:
    get:
      description: Return the AMM join/exit transactions
      operationId: getAmmTransactionsV2
      parameters:
      - in: query
        name: poolAddress
        schema:
          type: string
      - in: query
        name: billType
        schema:
          default: -1
          format: int32
          type: integer
      - in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - in: query
        name: tokenId
        schema:
          default: -1
          format: int32
          type: integer
      - in: query
        name: income
        schema:
          default: false
          type: boolean
      - in: query
        name: transferAddress
        schema:
          type: string
      - in: query
        name: fromAddress
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmTransactionResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: get AMM involved join/exit transactions
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/user/transactions:
    get:
      description: Return the user's AMM join/exit transactions
      operationId: getAmmUserTransactionsV2
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: start
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: end
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: txTypes
        schema:
          type: string
      - in: query
        name: txStatus
        schema:
          type: string
      - in: query
        name: ammPoolAddress
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmTransactionResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: User's AMM join/exit transactions
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/trades:
    get:
      description: get AMM pool trade transactions
      operationId: getAmmTradesV2
      parameters:
      - in: query
        name: ammPoolAddress
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: 0
          format: int32
          type: integer
      - in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmTradesResponseV2'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "107001":
          content: {}
          description: User ID cannot be empty
        "104001":
          content: {}
          description: Empty ApiKey
        "104002":
          content: {}
          description: Invalid ApiKey
        "104003":
          content: {}
          description: Invalid Account ID
      summary: get AMM pool trade transactions
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/poolsStats:
    get:
      description: api.getPoolsStats.notes
      operationId: getPoolsStatsV2
      parameters:
      - in: query
        name: ammPoolMarkets
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmPoolsStatsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getPoolsStats.value
      tags:
      - Loopring DEX Restful API
  /api/v2/amm/user/rewards:
    get:
      description: api.getPoolsStats.notes
      operationId: getUserRewardsV2
      parameters:
      - in: query
        name: owner
        schema:
          format: int64
          type: integer
      - in: query
        name: ammPoolMarkets
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmPoolsStatsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getPoolsStats.value
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/agents:
    get:
      description: api.getLuckyTokenAgents.notes
      operationId: getLuckyTokenAgentsV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLuckyTokenAgentsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getLuckyTokenAgents.value
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/authorizedSigners:
    get:
      description: api.getLuckyTokenSigners.notes
      operationId: getLuckyTokenSignersV3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLuckyTokenAgentsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getLuckyTokenSigners.value
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/sendLuckyToken:
    post:
      description: api.sendLuckyToken.notes
      operationId: sendLuckyTokenV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SendLuckyTokenRequestV3'
        description: api.sendLuckyToken.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: api.sendLuckyToken.value
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/luckyToken/claimLuckyToken:
    post:
      description: api.claimLuckyToken.notes
      operationId: claimLuckyTokenV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClaimLuckyTokenRequestV3'
        description: api.claimLuckyToken.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLuckyTokenClaimAmountResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: api.claimLuckyToken.value
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/luckyToken/user/balances:
    get:
      description: api.getLuckyTokenBalance.notes
      operationId: getLuckyTokenUserBalancesV3
      parameters:
      - description: AccountID
        example: 1
        in: query
        name: accountId
        required: true
        schema:
          format: int32
          type: integer
      - description: Query tokens
        example: "0,1"
        in: query
        name: tokens
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceV3'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getLuckyTokenBalance.value
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/withdrawals:
    post:
      description: api.withdrawLuckyToken.notes
      operationId: withdrawLuckyTokenV3
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/WithdrawLuckyTokenRequestV3'
        description: api.withdrawLuckyToken.implicit.value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOffChainRequestItem'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
        "100001":
          content: {}
          description: Invalid argument
        "102001":
          content: {}
          description: Exchange ID is incorrect
        "102021":
          content: {}
          description: Nonce is invalid
        "102022":
          content: {}
          description: Transfer sender is invalid
        "102023":
          content: {}
          description: Transfer receiver is invalid
        "102024":
          content: {}
          description: Fee token is unsupported
        "102025":
          content: {}
          description: Transfer token isnt consistent with fee token
      summary: api.withdrawLuckyToken.value
      tags:
      - Loopring DEX Restful API
      x-codegen-request-body-name: body
  /api/v3/luckyToken/user/luckyTokens:
    get:
      operationId: getLuckyTokenV3
      parameters:
      - in: query
        name: senderId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: hash
        schema:
          type: string
      - in: query
        name: partitions
        schema:
          type: string
      - in: query
        name: nodes
        schema:
          type: string
      - in: query
        name: scopes
        schema:
          type: string
      - in: query
        name: statuses
        schema:
          type: string
      - in: query
        name: startTime
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: endTime
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      - in: query
        name: official
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/claimedLuckyTokens:
    get:
      operationId: getClaimLuckyTokenV3
      parameters:
      - in: query
        name: hashes
        schema:
          type: string
      - in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/luckyTokenDetail:
    get:
      operationId: getClaimLuckyTokenRecordsV3
      parameters:
      - in: query
        name: hash
        schema:
          type: string
      - in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      - in: query
        name: showHelper
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/summary:
    get:
      operationId: getLuckyTokenSummaryV3
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/withdraws:
    get:
      operationId: getLuckyTokenWithdrawV3
      parameters:
      - in: query
        name: statuses
        schema:
          type: string
      - in: query
        name: tokenId
        schema:
          default: -1
          format: int32
          type: integer
      - in: query
        name: startTime
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: endTime
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/luckyToken/user/claimHistory:
    get:
      operationId: getClaimHistoryV3
      parameters:
      - in: query
        name: fromId
        schema:
          default: 0
          format: int64
          type: integer
      - in: query
        name: limit
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/amm/poolsStats:
    get:
      description: api.getPoolsStats.notes
      operationId: getPoolsStatsAmmV3
      parameters:
      - in: query
        name: ammPoolMarkets
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAmmPoolsStatsResponse'
          description: successful operation
        "100000":
          content: {}
          description: Unknown error
      summary: api.getPoolsStats.value
      tags:
      - Loopring DEX Restful API
  /api/v3/datacenter/getUserAssets:
    get:
      operationId: getUserAssetsV3
      parameters:
      - in: query
        name: address
        schema:
          type: string
      - in: query
        name: currency
        schema:
          default: USD
          type: string
      - in: query
        name: assetTypes
        schema:
          type: string
      - in: query
        name: token
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: 30
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/datacenter/getTokenPrices:
    get:
      operationId: getTokenPricesV3
      parameters:
      - in: query
        name: token
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: 30
          format: int32
          type: integer
      - in: query
        name: interval
        schema:
          default: DAY
          type: string
      - in: query
        name: currency
        schema:
          default: USD
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/datacenter/getLatestTokenPrices:
    get:
      operationId: getLatestTokenPricesV3
      parameters:
      - in: query
        name: tokens
        schema:
          type: string
      - in: query
        name: currency
        schema:
          default: USD
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/datacenter/getUserTradeAmount:
    get:
      operationId: getUserTradeAmountV3
      parameters:
      - in: query
        name: accountId
        schema:
          format: int64
          type: integer
      - in: query
        name: markets
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: 30
          format: int32
          type: integer
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
  /api/v3/datacenter/getNewestTokenPrices:
    get:
      operationId: getNewestTokenPricesV3
      parameters:
      - in: query
        name: tokens
        schema:
          type: string
      - in: query
        name: currency
        schema:
          default: USD
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionAnyContent'
          description: successful operation
      tags:
      - Loopring DEX Restful API
components:
  schemas:
    GetTimestampV2Response:
      description: model.getTimestampV2Response
      example:
        data: 1584683483382
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getTimestampV2Response.data
          example: 1584683483382
          format: int64
          type: integer
      required:
      - resultInfo
      type: object
    ResultInfo:
      description: Information returned by the API
      example:
        code: 0
        message: SUCCESS
      properties:
        code:
          description: The returned code
          example: 0
          format: int32
          type: integer
        message:
          description: The returned message
          example: SUCCESS
          type: string
      required:
      - code
      - message
      type: object
    GetTokenInfoResponse:
      description: Tokens information supported by the exchange
      example:
        data:
        - symbol: LRC
          address: 0x97241525fe425C90eBe5A41127816dcFA5954b06
          tokenId: 2
          maxLuckyTokenAmount: "1000000000000000000"
          precision: 6
          type: ERC20
          enabled: true
          minLuckyTokenAmount: "1000000000000000"
          precisionForOrder: 3
          minOrderAmount: "10000000000000000"
          decimals: 18
          name: Loopring
          dustOrderAmount: "1000000000000000"
          fastWithdrawLimit: "1000000000000000"
          depositGas: "1000000000000000"
          maxOrderAmount: "1000000000000000000"
          distributionGas: "1000000000000000"
        - symbol: LRC
          address: 0x97241525fe425C90eBe5A41127816dcFA5954b06
          tokenId: 2
          maxLuckyTokenAmount: "1000000000000000000"
          precision: 6
          type: ERC20
          enabled: true
          minLuckyTokenAmount: "1000000000000000"
          precisionForOrder: 3
          minOrderAmount: "10000000000000000"
          decimals: 18
          name: Loopring
          dustOrderAmount: "1000000000000000"
          fastWithdrawLimit: "1000000000000000"
          depositGas: "1000000000000000"
          maxOrderAmount: "1000000000000000000"
          distributionGas: "1000000000000000"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Token list
          items:
            $ref: '#/components/schemas/TokenInfo'
          type: array
      required:
      - resultInfo
      type: object
    TokenInfo:
      description: field.tokenInfo.description
      example:
        symbol: LRC
        address: 0x97241525fe425C90eBe5A41127816dcFA5954b06
        tokenId: 2
        maxLuckyTokenAmount: "1000000000000000000"
        precision: 6
        type: ERC20
        enabled: true
        minLuckyTokenAmount: "1000000000000000"
        precisionForOrder: 3
        minOrderAmount: "10000000000000000"
        decimals: 18
        name: Loopring
        dustOrderAmount: "1000000000000000"
        fastWithdrawLimit: "1000000000000000"
        depositGas: "1000000000000000"
        maxOrderAmount: "1000000000000000000"
        distributionGas: "1000000000000000"
      properties:
        type:
          description: field.tokenInfo.type
          enum:
          - ERC20
          - ETH
          example: ERC20
          type: string
        tokenId:
          description: field.tokenInfo.tokenId
          example: 2
          format: int32
          type: integer
        symbol:
          description: field.tokenInfo.symbol
          example: LRC
          type: string
        name:
          description: field.tokenInfo.name
          example: Loopring
          type: string
        address:
          description: field.tokenInfo.address
          example: 0x97241525fe425C90eBe5A41127816dcFA5954b06
          type: string
        decimals:
          description: field.tokenInfo.decimals
          example: 18
          format: int32
          type: integer
        precision:
          description: field.tokenInfo.precision
          example: 6
          format: int32
          type: integer
        precisionForOrder:
          description: field.tokenInfo.precision
          example: 3
          format: int32
          type: integer
        minOrderAmount:
          description: field.tokenInfo.minOrderAmount
          example: "10000000000000000"
          type: string
        maxOrderAmount:
          description: field.tokenInfo.maxOrderAmount
          example: "1000000000000000000"
          type: string
        dustOrderAmount:
          description: field.tokenInfo.dustOrderAmount
          example: "1000000000000000"
          type: string
        maxLuckyTokenAmount:
          description: field.tokenInfo.maxLuckyTokenAmount
          example: "1000000000000000000"
          type: string
        minLuckyTokenAmount:
          description: field.tokenInfo.minLuckyTokenAmount
          example: "1000000000000000"
          type: string
        fastWithdrawLimit:
          description: field.tokenInfo.fastWithdrawLimit
          example: "1000000000000000"
          type: string
        distributionGas:
          description: field.tokenInfo.distributionGas
          example: "1000000000000000"
          type: string
        depositGas:
          description: field.tokenInfo.depositGas
          example: "1000000000000000"
          type: string
        enabled:
          description: field.tokenInfo.enabled
          example: true
          type: boolean
      required:
      - address
      - decimals
      - depositGas
      - distributionGas
      - dustOrderAmount
      - enabled
      - fastWithdrawLimit
      - maxLuckyTokenAmount
      - maxOrderAmount
      - minLuckyTokenAmount
      - minOrderAmount
      - name
      - precision
      - precisionForOrder
      - symbol
      - tokenId
      - type
      type: object
    GetOffchainFee2Response:
      description: The results returned by query user fee rates
      example:
        data:
          fees:
          - tokenId: 0
            fee: "2000000000000000"
            discount: 1.0
            token: ETH
          - tokenId: 0
            fee: "2000000000000000"
            discount: 1.0
            token: ETH
          gasPrice: gasPrice
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/GetOffchainFee2ResponseData'
      required:
      - resultInfo
      type: object
    GetOffchainFee2ResponseData:
      description: The results returned by query place order amount
      example:
        fees:
        - tokenId: 0
          fee: "2000000000000000"
          discount: 1.0
          token: ETH
        - tokenId: 0
          fee: "2000000000000000"
          discount: 1.0
          token: ETH
        gasPrice: gasPrice
      properties:
        gasPrice:
          type: string
        fees:
          items:
            $ref: '#/components/schemas/OffFeeInfo2'
          type: array
      required:
      - fees
      - gasPrice
      type: object
    OffFeeInfo2:
      description: Off-chain fee info charged by loopring exchange.
      example:
        tokenId: 0
        fee: "2000000000000000"
        discount: 1.0
        token: ETH
      properties:
        token:
          description: fee token
          example: ETH
          type: string
        tokenId:
          description: field.offFeeInfo.tokenId
          example: 0
          format: int32
          type: integer
        fee:
          description: fee amount
          example: "2000000000000000"
          type: string
        discount:
          description: token discount
          example: 1.0
          format: double
          type: number
      required:
      - discount
      - fee
      - token
      - tokenId
      type: object
    GetMarketInfoResponse:
      description: model.getMarketInfoResponse
      example:
        data:
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: false
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: false
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getMarketInfoResponse.data
          items:
            $ref: '#/components/schemas/MarketInfo'
          type: array
      required:
      - resultInfo
      type: object
    MarketInfo:
      example:
        market: LRC-USDT
        quoteTokenId: 0
        precisionForPrice: 6
        orderbookAggLevels: 4
        baseTokenId: 2
        enabled: false
      properties:
        market:
          description: Trading pair ID
          example: LRC-USDT
          type: string
        baseTokenId:
          description: The base token ID
          example: 2
          format: int32
          type: integer
        quoteTokenId:
          description: The quote token ID
          example: 0
          format: int32
          type: integer
        precisionForPrice:
          description: The precision of price
          example: 6
          format: int32
          type: integer
        orderbookAggLevels:
          description: The max level of orderbook price aggregation
          example: 4
          format: int32
          type: integer
        enabled:
          description: True if trading is enabled for this trading pair
          example: false
          type: boolean
      required:
      - baseTokenId
      - enabled
      - market
      - orderbookAggLevels
      - precisionForPrice
      - quoteTokenId
      type: object
    SubmitOffChainRequestResponse:
      description: model.submitOffChainRequest.response
      example:
        data:
          accountId: 10060
          tokenId: 0
          isIdempotent: true
          hash: 0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3
          status: received
          storageId: 1
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/SubmitOffChainResponseItem'
      required:
      - resultInfo
      type: object
    SubmitOffChainResponseItem:
      description: The response of a POST Offchain request
      example:
        accountId: 10060
        tokenId: 0
        isIdempotent: true
        hash: 0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3
        status: received
        storageId: 1
      properties:
        hash:
          description: The transaction hash
          example: 0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3
          type: string
        status:
          description: The transaction status
          enum:
          - received
          - processing
          - processed
          - failed
          example: received
          type: string
        isIdempotent:
          description: field.SubmitOffChainResponseItem.isIdempotent
          example: true
          type: boolean
        accountId:
          description: field.SubmitOffChainResponseItem.accountId
          example: 10060
          format: int64
          type: integer
        tokenId:
          description: field.SubmitOffChainResponseItem.tokenId
          example: 0
          format: int32
          type: integer
        storageId:
          description: field.SubmitOffChainResponseItem.storageId
          example: 1
          format: int64
          type: integer
      required:
      - accountId
      - hash
      - isIdempotent
      - status
      - storageId
      - tokenId
      type: object
    CounterFactualInfo:
      example:
        walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
      properties:
        walletFactory:
          description: Counter factual wallet factory contract address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        walletOwner:
          description: "Counter factual wallet owner address, NOT the wallet address"
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        walletSalt:
          description: Salt to generate address from owner & other related info
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
      required:
      - walletFactory
      - walletOwner
      - walletSalt
      type: object
    OriginTransferRequest:
      description: model.SubmitOriginTransferRequest.description
      example:
        amount: "1000000000000000000"
        maxFeeAmount: "1000000000000000000"
        clientId: hebao1234567
        payeeAddr: 0xCDEF
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        payerId: 1
        feeToken: 1
        memo: Air Drop
        token: 1
        eddsaSig: "0xX..{64}..XY..{64}..YZ..{64}..Z"
        payerAddr: 0xABCD
        validUntil: 1598431481
        exchange: "1"
        payeeId: 1
        ecdsaSig: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        storageId: 1
      properties:
        exchange:
          description: field.SubmitOriginTransferRequest.exchange
          example: "1"
          type: string
        payerId:
          description: field.SubmitOriginTransferRequest.payerId
          example: 1
          format: int64
          type: integer
        payerAddr:
          description: field.SubmitOriginTransferRequest.payerAddr
          example: 0xABCD
          type: string
        payeeId:
          description: field.SubmitOriginTransferRequest.payeeId
          example: 1
          format: int64
          type: integer
        payeeAddr:
          description: field.SubmitOriginTransferRequest.payeeAddr
          example: 0xCDEF
          type: string
        token:
          description: field.SubmitOriginTransferRequest.token
          example: 1
          format: int32
          type: integer
        amount:
          description: field.SubmitOriginTransferRequest.amount
          example: "1000000000000000000"
          type: string
        feeToken:
          description: field.SubmitOriginTransferRequest.feeToken
          example: 1
          format: int32
          type: integer
        maxFeeAmount:
          description: field.SubmitOriginTransferRequest.maxFeeAmount
          example: "1000000000000000000"
          type: string
        storageId:
          description: field.SubmitOriginTransferRequest.storageId
          example: 1
          format: int64
          type: integer
        validUntil:
          description: field.SubmitOriginTransferRequest.validUntil
          example: 1598431481
          format: int32
          type: integer
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSig:
          description: field.SubmitOriginTransferRequest.eddsaSig
          example: "0xX..{64}..XY..{64}..YZ..{64}..Z"
          type: string
        ecdsaSig:
          description: field.SubmitOriginTransferRequest.ecdsaSig
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        memo:
          description: field.SubmitOriginTransferRequest.memo
          example: Air Drop
          type: string
        clientId:
          description: field.SubmitOriginTransferRequest.clientId
          example: hebao1234567
          type: string
      required:
      - amount
      - exchange
      - feeToken
      - maxFeeAmount
      - payeeAddr
      - payeeId
      - payerAddr
      - payerId
      - storageId
      - token
      - validUntil
      type: object
    UpdateAccountRequest:
      description: model.UpdateAccountRequest.description
      example:
        owner: 0xB4A70168340C75119523019f79F5Ffd9c60DceC7
        accountId: 1
        eddsaSig: "0xX..{64}..XY..{64}..YZ..{64}..Z"
        maxFeeAmount: "1234"
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        validUntil: 1583183141
        feeToken: 1
        exchange: "1"
        ecdsaSig: "0x41853ea3..{130}..e6b32982bfc61c"
        publicKeyY: 0xABCD
        nonce: 1
        publicKeyX: 0xABCD
      properties:
        exchange:
          description: field.UpdateAccountRequest.exchange
          example: "1"
          type: string
        owner:
          description: field.UpdateAccountRequest.owner
          example: 0xB4A70168340C75119523019f79F5Ffd9c60DceC7
          type: string
        accountId:
          description: field.UpdateAccountRequest.accountId
          example: 1
          format: int64
          type: integer
        validUntil:
          description: field.UpdateAccountRequest.validUntil
          example: 1583183141
          format: int32
          type: integer
        nonce:
          description: field.UpdateAccountRequest.nonce
          example: 1
          format: int32
          type: integer
        publicKeyX:
          description: field.UpdateAccountRequest.publicKeyX
          example: 0xABCD
          type: string
        publicKeyY:
          description: field.UpdateAccountRequest.publicKeyY
          example: 0xABCD
          type: string
        feeToken:
          description: field.UpdateAccountRequest.feeTokenId
          example: 1
          format: int32
          type: integer
        maxFeeAmount:
          description: field.UpdateAccountRequest.maxFee
          example: "1234"
          type: string
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSig:
          description: field.UpdateAccountRequest.eddsaSig
          example: "0xX..{64}..XY..{64}..YZ..{64}..Z"
          type: string
        ecdsaSig:
          description: field.UpdateAccountRequest.ecdsaSig
          example: "0x41853ea3..{130}..e6b32982bfc61c"
          type: string
      required:
      - accountId
      - exchange
      - feeToken
      - maxFeeAmount
      - nonce
      - owner
      - publicKeyX
      - publicKeyY
      - validUntil
      type: object
    GetOrdersResponseV2:
      description: Response body
      example:
        data:
          totalNum: 10
          orders:
          - orderType: LIMIT_ORDER
            side: SELL
            clientOrderId: "200310143135081332"
            filledFee: "0"
            volume: "163182534700000032"
            market: LRC-ETH
            createdAt: 1583933191494
            size: "8210000000000001024"
            filledSize: "0"
            price: "0.01987608"
            filledVolume: "0"
            validUntil: 1586521591
            hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
            status: processing
            tradeChannel: ORDER_BOOK
          - orderType: LIMIT_ORDER
            side: SELL
            clientOrderId: "200310143135081332"
            filledFee: "0"
            volume: "163182534700000032"
            market: LRC-ETH
            createdAt: 1583933191494
            size: "8210000000000001024"
            filledSize: "0"
            price: "0.01987608"
            filledVolume: "0"
            validUntil: 1586521591
            hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
            status: processing
            tradeChannel: ORDER_BOOK
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/OrdersDetail'
      required:
      - resultInfo
      type: object
    OrderDetail:
      description: Response details of order
      example:
        orderType: LIMIT_ORDER
        side: SELL
        clientOrderId: "200310143135081332"
        filledFee: "0"
        volume: "163182534700000032"
        market: LRC-ETH
        createdAt: 1583933191494
        size: "8210000000000001024"
        filledSize: "0"
        price: "0.01987608"
        filledVolume: "0"
        validUntil: 1586521591
        hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
        status: processing
        tradeChannel: ORDER_BOOK
      properties:
        hash:
          description: Order hash
          example: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          type: string
        clientOrderId:
          description: Order's client-side ID
          example: "200310143135081332"
          type: string
        size:
          description: field.OrderDetail.size
          example: "8210000000000001024"
          type: string
        volume:
          description: field.OrderDetail.volume
          example: "163182534700000032"
          type: string
        price:
          description: Order price
          example: "0.01987608"
          type: string
        filledSize:
          description: field.OrderDetail.filledSize
          example: "0"
          type: string
        filledVolume:
          description: field.OrderDetail.filledVolume
          example: "0"
          type: string
        filledFee:
          description: field.OrderDetail.filledFee
          example: "0"
          type: string
        status:
          description: Order status
          enum:
          - processing
          - processed
          - cancelling
          - cancelled
          - expired
          - waiting
          example: processing
          type: string
        validUntil:
          description: field.OrderDetail.validUntil
          example: 1586521591
          format: int64
          type: integer
        createdAt:
          description: field.OrderDetail.createdAt
          example: 1583933191494
          format: int64
          type: integer
        side:
          description: Order's side
          enum:
          - SELL
          - BUY
          example: SELL
          type: string
        market:
          description: Trading pair
          example: LRC-ETH
          type: string
        orderType:
          description: "Whether the order has to be treated as a limit, maker, or\
            \ taker operation."
          enum:
          - LIMIT_ORDER
          - TAKER_ONLY
          - MAKER_ONLY
          example: LIMIT_ORDER
          type: string
        tradeChannel:
          description: field.SubmitOrderRequest.tradeChannel
          enum:
          - ORDER_BOOK:0
          - AMM_POOL:1
          - MIXED:2
          example: ORDER_BOOK
          type: string
      required:
      - clientOrderId
      - createdAt
      - filledFee
      - filledSize
      - filledVolume
      - hash
      - market
      - orderType
      - price
      - side
      - size
      - status
      - tradeChannel
      - validUntil
      - volume
      type: object
    OrdersDetail:
      description: Response orders
      example:
        totalNum: 10
        orders:
        - orderType: LIMIT_ORDER
          side: SELL
          clientOrderId: "200310143135081332"
          filledFee: "0"
          volume: "163182534700000032"
          market: LRC-ETH
          createdAt: 1583933191494
          size: "8210000000000001024"
          filledSize: "0"
          price: "0.01987608"
          filledVolume: "0"
          validUntil: 1586521591
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          status: processing
          tradeChannel: ORDER_BOOK
        - orderType: LIMIT_ORDER
          side: SELL
          clientOrderId: "200310143135081332"
          filledFee: "0"
          volume: "163182534700000032"
          market: LRC-ETH
          createdAt: 1583933191494
          size: "8210000000000001024"
          filledSize: "0"
          price: "0.01987608"
          filledVolume: "0"
          validUntil: 1586521591
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          status: processing
          tradeChannel: ORDER_BOOK
      properties:
        totalNum:
          description: Total number of orders
          example: 10
          format: int64
          type: integer
        orders:
          description: List of order
          items:
            $ref: '#/components/schemas/OrderDetail'
          type: array
      required:
      - totalNum
      type: object
    Action:
      type: object
    ActionAnyContent:
      type: object
    Depth:
      description: Order book info
      example:
        market: LRC-ETH
        asks: "[]"
        bids: "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]"
        version: 147
        timestamp: 432312312
      properties:
        version:
          description: An ever-increasing numeric version number that reflects its
            change history.
          example: 147
          format: int64
          type: integer
        timestamp:
          description: Update timestamp
          example: 432312312
          format: int64
          type: integer
        market:
          description: field.trade.market
          example: LRC-ETH
          type: string
        bids:
          description: "Array of bids, each item is an array that contains the price,\
            \ size, volume and the number of orders aggregated at this price."
          example: "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]"
          items:
            items:
              type: string
            type: array
          type: array
        asks:
          description: "Array of asks, each item is an array that contains the price,\
            \ size, volume and the number of orders aggregated at this price."
          example: "[]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - asks
      - bids
      - market
      - timestamp
      - version
      type: object
    GetDepthResponseV2:
      description: response of querying order book
      example:
        data:
          market: LRC-ETH
          asks: "[]"
          bids: "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]"
          version: 147
          timestamp: 432312312
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/Depth'
      required:
      - resultInfo
      type: object
    GetTickerResponseV2:
      description: model.getTicker.description
      example:
        data: "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\"\
          ,\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: "Each item in the list is an array that contains the following:\
            \ trading pair ID, update timestamp, base token volume, quote token volume,\
            \ open-price, highest price, lowest price, closing price, number of trades,\
            \ highest bid price, lowest ask price, base fee amount, quote fee amount.\
            \ All values are returned as strings. Fee amount is for AMM only."
          example: "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"\
            1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - resultInfo
      type: object
    GetPriceV2Response:
      description: model.getPriceResponse
      example:
        data:
        - symbol: LRC
          price: "0"
          timestamp: 0
        - symbol: LRC
          price: "0"
          timestamp: 0
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getPriceResponse.data
          items:
            $ref: '#/components/schemas/Price'
          type: array
      required:
      - resultInfo
      type: object
    Price:
      description: Token fiat price
      example:
        symbol: LRC
        price: "0"
        timestamp: 0
      properties:
        symbol:
          description: Token symbol
          example: LRC
          type: string
        price:
          description: Fiat price
          example: "0"
          type: string
        timestamp:
          description: Last update timestamp
          example: 0
          format: int64
          type: integer
      required:
      - price
      - symbol
      - timestamp
      type: object
    GetMarketTradesV2Response:
      description: Query market trades returns
      example:
        data:
          totalNum: 0
          trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/MarketTrades'
      required:
      - resultInfo
      type: object
    MarketTrades:
      description: model.marketTrades
      example:
        totalNum: 0
        trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]"
      properties:
        totalNum:
          description: The total number of trades in query result
          example: 0
          format: int64
          type: integer
        trades:
          description: "List of trades records, each trade record in the order of\
            \ the array is the trade time, record id, buying and selling direction,\
            \ volume, price, market, fees, blockId and indexInBlock"
          example: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - totalNum
      - trades
      type: object
    GetCandlestickResponseV2:
      description: The response of query Candlestick data
      example:
        data: "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"\
          0.5\"]]"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: "Candlestick data, each set of data includes start time, number\
            \ of transactions, opening price, closing price, highest price, lowest\
            \ price, total transaction volume of Base Token, total transaction volume\
            \ of Quote Token"
          example: "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\"\
            ,\"0.5\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - resultInfo
      type: object
    GetEthNonceV2Response:
      description: Query the result returned by Ethereum address nonce
      example:
        data: 0
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: The result of nonce
          example: 0
          format: int64
          type: integer
      required:
      - resultInfo
      type: object
    GetEthBalancesV2Response:
      description: The query result of Ethereum address ETH balance
      example:
        data: "1000000000000000000"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Balance in wei
          example: "1000000000000000000"
          type: string
      required:
      - resultInfo
      type: object
    GetTokenBalancesV2Response:
      description: The query result of Ethereum address token balances
      example:
        data: "['1000000000000000000']"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Balance in wei
          example: "['1000000000000000000']"
          items:
            type: string
          type: array
      required:
      - resultInfo
      type: object
    GetAllowancesV2Response:
      description: Query the allowance return of the Ethereum address on the exchange
      example:
        data: "['0']"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Allowance amount in wei
          example: "['0']"
          items:
            type: string
          type: array
      required:
      - resultInfo
      type: object
    GetRecommendedGasPriceResponseV2:
      description: Response body
      example:
        data: "10000000000"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Response value of current recommended gas price in Gwei
          example: "10000000000"
          type: string
      required:
      - resultInfo
      type: object
    DexAccount:
      description: DexAccount data
      example:
        owner: 0xABCD
        accountId: 10
        frozen: false
        publicKeyY: "456"
        keyNonce: 0
        publicKeyX: "123"
        accountNonce: 0
        tags: vip_1
      properties:
        accountId:
          description: field.dexAccount.accountId
          example: 10
          format: int64
          type: integer
        owner:
          description: field.dexAccount.owner
          example: 0xABCD
          type: string
        frozen:
          description: field.dexAccount.isFreeze
          example: false
          type: boolean
        publicKeyX:
          description: field.dexAccount.publicKeyX
          example: "123"
          type: string
        publicKeyY:
          description: field.dexAccount.publicKeyY
          example: "456"
          type: string
        tags:
          description: field.dexAccount.tags
          example: vip_1
          type: string
        keyNonce:
          description: field.dexAccount.keyNonce
          example: 0
          format: int64
          type: integer
        accountNonce:
          description: field.dexAccount.accountNonce
          example: 0
          format: int64
          type: integer
      required:
      - accountId
      - accountNonce
      - frozen
      - keyNonce
      - owner
      - publicKeyX
      - publicKeyY
      type: object
    GetAccountResponseV2:
      description: model.getAccountResponse
      example:
        data:
          owner: 0xABCD
          accountId: 10
          frozen: false
          publicKeyY: "456"
          keyNonce: 0
          publicKeyX: "123"
          accountNonce: 0
          tags: vip_1
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/DexAccount'
      required:
      - data
      - resultInfo
      type: object
    GetApiKeyResponseV2:
      description: model.getApiKeyResponseV2
      example:
        data: 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getApiKeyResponseV2.data
          example: 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt
          type: string
      required:
      - data
      - resultInfo
      type: object
    GetApiKeyRequest:
      description: model.applyApiKey.description
      example:
        accountId: 1
      properties:
        accountId:
          description: AccountID
          example: 1
          format: int64
          type: integer
      required:
      - accountId
      type: object
    GetNextStorageIdResponseData:
      description: model.GetNextStorageIdResponseData.description
      example:
        data:
          offchainId: 101
          orderId: 100
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/NextStorageIdResponse'
      required:
      - data
      - resultInfo
      type: object
    NextStorageIdResponse:
      description: "{{model.NextStorageIdResponse.description}"
      example:
        offchainId: 101
        orderId: 100
      properties:
        orderId:
          description: "Next storage ID for order request, must be even"
          example: 100
          format: int64
          type: integer
        offchainId:
          description: "Next storage ID for offchain requests, i.e., transfer/withdraw/updateAccount,\
            \ must be odd"
          example: 101
          format: int64
          type: integer
      type: object
    SubmitOrderResponseV2:
      description: model.SubmitOrderResponseV2.description
      example:
        data:
          isIdempotent: true
          orderHash: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          status: cancelled
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/SubmitOrderResponseV2Item'
      required:
      - data
      - resultInfo
      type: object
    SubmitOrderResponseV2Item:
      description: model.SubmitOrderResponseV2Item.description
      example:
        isIdempotent: true
        orderHash: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        status: cancelled
      properties:
        orderHash:
          description: field.SubmitOrderResponseV2Item.orderHash
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        status:
          description: field.SubmitOrderResponseV2Item.status
          enum:
          - processing
          - processed
          - cancelling
          - cancelled
          - expired
          - failed
          example: cancelled
          type: string
        isIdempotent:
          description: field.SubmitOrderResponseV2Item.isIdempotent
          example: true
          type: boolean
      required:
      - isIdempotent
      - orderHash
      - status
      type: object
    SubmitOrderRequest:
      description: model.SubmitOrderRequest.description
      example:
        tokenSId: 0
        orderType: LIMIT_ORDER
        amountB: "1000000000000000000"
        clientOrderId: "1"
        fillAmountBOrS: "true"
        tokenBId: 2
        maxFeeBips: 20
        accountId: 1
        eddsaSig: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        amountS: "1000000000000000000"
        allOrNone: "false"
        validUntil: 1567053142
        poolAddress: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
        exchange: "1"
        taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
        affiliate: "10005"
        storageId: 1
        tradeChannel: ORDER_BOOK
      properties:
        exchange:
          description: field.SubmitOrderRequest.exchange
          example: "1"
          type: string
        storageId:
          description: field.SubmitOrderRequest.storageId
          example: 1
          format: int32
          type: integer
        accountId:
          description: field.SubmitOrderRequest.accountId
          example: 1
          format: int64
          type: integer
        tokenSId:
          description: field.SubmitOrderRequest.tokenSId
          example: 0
          format: int32
          type: integer
        tokenBId:
          description: field.SubmitOrderRequest.tokenBId
          example: 2
          format: int32
          type: integer
        amountS:
          description: field.SubmitOrderRequest.amountS
          example: "1000000000000000000"
          type: string
        amountB:
          description: field.SubmitOrderRequest.amountB
          example: "1000000000000000000"
          type: string
        allOrNone:
          description: field.SubmitOrderRequest.allOrNone
          example: "false"
          type: string
        fillAmountBOrS:
          description: field.SubmitOrderRequest.fillAmountBOrS
          example: "true"
          type: string
        validUntil:
          description: field.SubmitOrderRequest.validUntil
          example: 1567053142
          format: int64
          type: integer
        maxFeeBips:
          description: field.SubmitOrderRequest.maxFeeBips
          example: 20
          format: int32
          type: integer
        eddsaSig:
          description: field.SubmitOrderRequest.eddsaSig
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        clientOrderId:
          description: field.SubmitOrderRequest.clientOrderId
          example: "1"
          type: string
        affiliate:
          description: field.SubmitOrderRequest.affiliate
          example: "10005"
          type: string
        orderType:
          description: field.SubmitOrderRequest.orderType
          enum:
          - LIMIT_ORDER
          - TAKER_ONLY
          - MAKER_ONLY
          - AMM(for back compatible)
          example: LIMIT_ORDER
          type: string
        tradeChannel:
          description: field.SubmitOrderRequest.tradeChannel
          enum:
          - ORDER_BOOK:0
          - AMM_POOL:1
          - MIXED:2
          example: ORDER_BOOK
          type: string
        taker:
          description: field.SubmitOrderRequest.taker
          example: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          type: string
        poolAddress:
          description: field.SubmitOrderRequest.taker
          example: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          type: string
      required:
      - accountId
      - amountB
      - amountS
      - eddsaSig
      - exchange
      - fillAmountBOrS
      - maxFeeBips
      - storageId
      - tokenBId
      - tokenSId
      - validUntil
      type: object
    BatchSubmitOrderResponse:
      description: Batch submit orders.
      example:
        data:
        - error:
            code: 0
            message: SUCCESS
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
        - error:
            code: 0
            message: SUCCESS
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Result of batch submit orders.
          items:
            $ref: '#/components/schemas/SubmitOrderResult'
          type: array
      required:
      - data
      - resultInfo
      type: object
    SubmitOrderResult:
      description: Single order submission results.
      example:
        error:
          code: 0
          message: SUCCESS
        hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
      properties:
        hash:
          description: Hash of order submitted
          example: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          type: string
        error:
          $ref: '#/components/schemas/ResultInfo'
      required:
      - hash
      type: object
    BatchSubmitOrderRequest:
      description: Batch submit order parameters.
      example:
        orders:
        - tokenSId: 0
          orderType: LIMIT_ORDER
          amountB: "1000000000000000000"
          clientOrderId: "1"
          fillAmountBOrS: "true"
          tokenBId: 2
          maxFeeBips: 20
          accountId: 1
          eddsaSig: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          amountS: "1000000000000000000"
          allOrNone: "false"
          validUntil: 1567053142
          poolAddress: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          exchange: "1"
          taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          affiliate: "10005"
          storageId: 1
          tradeChannel: ORDER_BOOK
        - tokenSId: 0
          orderType: LIMIT_ORDER
          amountB: "1000000000000000000"
          clientOrderId: "1"
          fillAmountBOrS: "true"
          tokenBId: 2
          maxFeeBips: 20
          accountId: 1
          eddsaSig: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          amountS: "1000000000000000000"
          allOrNone: "false"
          validUntil: 1567053142
          poolAddress: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          exchange: "1"
          taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          affiliate: "10005"
          storageId: 1
          tradeChannel: ORDER_BOOK
      properties:
        orders:
          description: Orders to submit.
          items:
            $ref: '#/components/schemas/SubmitOrderRequest'
          type: array
      required:
      - orders
      type: object
    GetOrderDetailResponseV2:
      description: Response body
      example:
        data:
          orderType: LIMIT_ORDER
          side: SELL
          clientOrderId: "200310143135081332"
          filledFee: "0"
          volume: "163182534700000032"
          market: LRC-ETH
          createdAt: 1583933191494
          size: "8210000000000001024"
          filledSize: "0"
          price: "0.01987608"
          filledVolume: "0"
          validUntil: 1586521591
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          status: processing
          tradeChannel: ORDER_BOOK
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/OrderDetail'
      required:
      - resultInfo
      type: object
    CancelOrdersResponseData:
      example:
        data: true
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.CancelOrdersResponseData.data
          example: true
          type: boolean
      required:
      - resultInfo
      type: object
    BatchCancelOrderResponse:
      description: Batch cancel orders.
      example:
        data:
        - result: true
          id: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          error:
            code: 0
            message: SUCCESS
        - result: true
          id: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          error:
            code: 0
            message: SUCCESS
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Results of batch order cancellation.
          items:
            $ref: '#/components/schemas/CancelOrderResult'
          type: array
      required:
      - data
      - resultInfo
      type: object
    CancelOrderResult:
      description: result for order cancellation.
      example:
        result: true
        id: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        error:
          code: 0
          message: SUCCESS
      properties:
        id:
          description: Hash or clientOrderId of order cancelled.
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        result:
          description: Order cancellation result.
          example: true
          type: boolean
        error:
          $ref: '#/components/schemas/ResultInfo'
      required:
      - id
      - result
      type: object
    ForwardEthTxResponse:
      description: Response of sending raw transaction
      example:
        data: 0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: Transaction hash
          example: 0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886
          type: string
      required:
      - resultInfo
      type: object
    ForwardEthTxRequest:
      description: Send a raw Ethereum transaction
      example:
        data: 0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2
      properties:
        data:
          description: Serialized Ethereum signature transaction as hexadecimal string
          example: 0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2
          type: string
      required:
      - data
      type: object
    DualAuthTransferRequest:
      description: model.SubmitDualAuthTransferRequest.description
      example:
        amount: "1000000000000000000"
        maxFeeAmount: "1000000000000000000"
        dualPayeeId: 1
        payerId: 1
        feeToken: 1
        memo: Air Drop
        dualAuthKeyX: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        dualPayeeAddr: 0xABCD
        token: 1
        dualAuthKeyY: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        eddsaSig: "0xX..{64}..XY..{64}..YZ..{64}..Z"
        payerAddr: 0xABCD
        validUntil: 1598431481
        dualEddsaSig: "0xX..{64}..XY..{64}..YZ..{64}..Z"
        exchange: 0xABCD
        storageId: 1
      properties:
        exchange:
          description: field.SubmitDualAuthTransferRequest.exchange
          example: 0xABCD
          type: string
        payerId:
          description: field.SubmitDualAuthTransferRequest.payerId
          example: 1
          format: int32
          type: integer
        payerAddr:
          description: field.SubmitDualAuthTransferRequest.payerAddr
          example: 0xABCD
          type: string
        token:
          description: field.SubmitDualAuthTransferRequest.token
          example: 1
          format: int32
          type: integer
        amount:
          description: field.SubmitDualAuthTransferRequest.amount
          example: "1000000000000000000"
          type: string
        feeToken:
          description: field.SubmitDualAuthTransferRequest.feeToken
          example: 1
          format: int32
          type: integer
        maxFeeAmount:
          description: field.SubmitDualAuthTransferRequest.maxFeeAmount
          example: "1000000000000000000"
          type: string
        storageId:
          description: field.SubmitDualAuthTransferRequest.storageId
          example: 1
          format: int64
          type: integer
        validUntil:
          description: field.SubmitDualAuthTransferRequest.validUntil
          example: 1598431481
          format: int32
          type: integer
        eddsaSig:
          description: field.SubmitDualAuthTransferRequest.eddsaSig
          example: "0xX..{64}..XY..{64}..YZ..{64}..Z"
          type: string
        dualAuthKeyX:
          description: field.SubmitDualAuthTransferRequest.dualAuthKeyX
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        dualAuthKeyY:
          description: field.SubmitDualAuthTransferRequest.dualAuthKeyY
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        dualEddsaSig:
          description: field.SubmitDualAuthTransferRequest.dualEddsaSig
          example: "0xX..{64}..XY..{64}..YZ..{64}..Z"
          type: string
        dualPayeeId:
          description: field.SubmitDualAuthTransferRequest.dualPayeeId
          example: 1
          format: int64
          type: integer
        dualPayeeAddr:
          description: field.SubmitDualAuthTransferRequest.dualPayeeAddr
          example: 0xABCD
          type: string
        memo:
          description: field.SubmitDualAuthTransferRequest.memo
          example: Air Drop
          type: string
      required:
      - amount
      - dualAuthKeyX
      - dualAuthKeyY
      - dualEddsaSig
      - dualPayeeAddr
      - dualPayeeId
      - eddsaSig
      - exchange
      - feeToken
      - maxFeeAmount
      - payerAddr
      - payerId
      - storageId
      - token
      - validUntil
      type: object
    Balance:
      description: model.Balance.description
      example:
        accountId: 10
        totalAmount: "100"
        tokenId: 10
        pending:
          deposit: "10000000000000"
          withdraw: "10000000000000"
        amountLocked: "100"
      properties:
        accountId:
          description: field.Balance.accountId
          example: 10
          format: int64
          type: integer
        tokenId:
          description: field.Balance.tokenId
          example: 10
          format: int32
          type: integer
        totalAmount:
          description: field.Balance.totalAmount
          example: "100"
          type: string
        amountLocked:
          description: field.Balance.frozenAmount
          example: "100"
          type: string
        pending:
          $ref: '#/components/schemas/PendingBalance'
      required:
      - accountId
      - amountLocked
      - pending
      - tokenId
      - totalAmount
      type: object
    GetUserBalancesResponseV2:
      description: The response of querying user's exchange balance
      example:
        data:
        - accountId: 10
          totalAmount: "100"
          tokenId: 10
          pending:
            deposit: "10000000000000"
            withdraw: "10000000000000"
          amountLocked: "100"
        - accountId: 10
          totalAmount: "100"
          tokenId: 10
          pending:
            deposit: "10000000000000"
            withdraw: "10000000000000"
          amountLocked: "100"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.Balance.balances
          items:
            $ref: '#/components/schemas/Balance'
          type: array
      required:
      - data
      - resultInfo
      type: object
    PendingBalance:
      description: Users pending balances
      example:
        deposit: "10000000000000"
        withdraw: "10000000000000"
      properties:
        withdraw:
          description: Withdrawal pending balance which means the token is in withdrawal
            state but not arrived L1
          example: "10000000000000"
          type: string
        deposit:
          description: Deposit pending balance which means the token is in deposit
            state but not arrived L2
          example: "10000000000000"
          type: string
      required:
      - deposit
      - withdraw
      type: object
    DepositData:
      description: Response data
      example:
        blockId: 0
        symbol: LRC
        amount: "1000000000000000000"
        progress: 100%
        indexInBlock: 6
        blockNum: 100
        id: 1
        txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        status: processing
        timestamp: 1578572292000
        updatedAt: 1578572292000
      properties:
        id:
          description: Unique ID
          example: 1
          format: int64
          type: integer
        hash:
          description: hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        symbol:
          description: Token symbol
          example: LRC
          type: string
        amount:
          description: Amount requested by the user
          example: "1000000000000000000"
          type: string
        txHash:
          description: Transaction hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        status:
          description: Current status
          enum:
          - processing
          - processed
          - received
          - failed
          example: processing
          type: string
        progress:
          description: Progress
          example: 100%
          type: string
        timestamp:
          description: Create time
          example: 1578572292000
          format: int64
          type: integer
        blockNum:
          description: Block height
          example: 100
          format: int64
          type: integer
        updatedAt:
          description: Update time
          example: 1578572292000
          format: int64
          type: integer
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
      required:
      - amount
      - blockId
      - blockNum
      - hash
      - id
      - indexInBlock
      - progress
      - status
      - symbol
      - timestamp
      - txHash
      - updatedAt
      type: object
    DepositDataList:
      description: DepositDataList
      example:
        totalNum: 1
        transactions:
        - blockId: 0
          symbol: LRC
          amount: "1000000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - blockId: 0
          symbol: LRC
          amount: "1000000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: Total number of records found
          example: 1
          format: int64
          type: integer
        transactions:
          description: List of DepositRecord
          items:
            $ref: '#/components/schemas/DepositData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    GetUserDepositResponseV2:
      description: Response body
      example:
        data:
          totalNum: 1
          transactions:
          - blockId: 0
            symbol: LRC
            amount: "1000000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - blockId: 0
            symbol: LRC
            amount: "1000000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/DepositDataList'
      required:
      - resultInfo
      type: object
    GetUserOnchainWithdrawalResponseV2:
      description: Response body
      example:
        data:
          totalNum: 1
          transactions:
          - symbol: LRC
            amount: "1000000000000000000"
            txType: FORCE_WITHDRAWAL
            distributeHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            fastStatus: EMPTY
            requestId: 1
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - symbol: LRC
            amount: "1000000000000000000"
            txType: FORCE_WITHDRAWAL
            distributeHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            fastStatus: EMPTY
            requestId: 1
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/OnchainWithdrawalDataList'
      required:
      - resultInfo
      type: object
    OnchainWithdrawalDataList:
      description: OnchainWithdrawalDataList
      example:
        totalNum: 1
        transactions:
        - symbol: LRC
          amount: "1000000000000000000"
          txType: FORCE_WITHDRAWAL
          distributeHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          fastStatus: EMPTY
          requestId: 1
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - symbol: LRC
          amount: "1000000000000000000"
          txType: FORCE_WITHDRAWAL
          distributeHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          fastStatus: EMPTY
          requestId: 1
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: Total number of records found
          example: 1
          format: int64
          type: integer
        transactions:
          description: List of OnchainWithdrawalRecord
          items:
            $ref: '#/components/schemas/WithdrawalData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    WithdrawalData:
      description: Response data
      example:
        symbol: LRC
        amount: "1000000000000000000"
        txType: FORCE_WITHDRAWAL
        distributeHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        feeTokenSymbol: ETH
        blockId: 0
        feeAmount: "1000000000000000"
        fastStatus: EMPTY
        requestId: 1
        progress: 100%
        indexInBlock: 6
        blockNum: 100
        id: 1
        txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        status: processing
        timestamp: 1578572292000
        updatedAt: 1578572292000
      properties:
        id:
          description: Unique ID
          example: 1
          format: int64
          type: integer
        txType:
          description: User transaction type
          example: FORCE_WITHDRAWAL
          type: string
        hash:
          description: hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        symbol:
          description: Token symbol
          example: LRC
          type: string
        amount:
          description: Amount requested by the user
          example: "1000000000000000000"
          type: string
        txHash:
          description: Transaction hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        feeTokenSymbol:
          description: Fee token symbol
          example: ETH
          type: string
        feeAmount:
          description: Fee amount in wei
          example: "1000000000000000"
          type: string
        status:
          description: Current status
          enum:
          - processing
          - processed
          - received
          - failed
          example: processing
          type: string
        progress:
          description: Progress
          example: 100%
          type: string
        timestamp:
          description: Create time
          example: 1578572292000
          format: int64
          type: integer
        blockNum:
          description: Block height
          example: 100
          format: int64
          type: integer
        updatedAt:
          description: Update time
          example: 1578572292000
          format: int64
          type: integer
        distributeHash:
          description: Distribute Hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        requestId:
          description: Request Id
          example: 1
          format: int64
          type: integer
        fastStatus:
          description: Fast withdrawal status
          enum:
          - EMPTY
          - PROCEEING
          - SUCCESSED
          - FAILED
          example: EMPTY
          type: string
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
      required:
      - amount
      - blockId
      - blockNum
      - distributeHash
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - indexInBlock
      - progress
      - status
      - symbol
      - timestamp
      - txHash
      - txType
      - updatedAt
      type: object
    GetUserTransferResponse:
      description: Response body
      example:
        data:
          totalNum: 1
          transactions:
          - symbol: LRC
            amount: "1000000000000000000"
            senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            receiver: 1
            memo: Air Drop
            txType: transfer
            feeTokenSymbol: ETH
            storageInfo:
              accountId: 1
              tokenId: 5
              storageId: 5
            receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            id: 1
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - symbol: LRC
            amount: "1000000000000000000"
            senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            receiver: 1
            memo: Air Drop
            txType: transfer
            feeTokenSymbol: ETH
            storageInfo:
              accountId: 1
              tokenId: 5
              storageId: 5
            receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            id: 1
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/TransferDataList'
      required:
      - resultInfo
      type: object
    StorageInfo:
      example:
        accountId: 1
        tokenId: 5
        storageId: 5
      properties:
        accountId:
          format: int64
          type: integer
        tokenId:
          format: int32
          type: integer
        storageId:
          format: int64
          type: integer
      required:
      - accountId
      - storageId
      - tokenId
      type: object
    TransferData:
      example:
        symbol: LRC
        amount: "1000000000000000000"
        senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
        receiver: 1
        memo: Air Drop
        txType: transfer
        feeTokenSymbol: ETH
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
        blockId: 0
        feeAmount: "1000000000000000"
        progress: 100%
        indexInBlock: 6
        id: 1
        hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        status: processing
        timestamp: 1578572292000
        updatedAt: 1578572292000
      properties:
        id:
          description: Unique ID
          example: 1
          format: int64
          type: integer
        hash:
          description: hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        txType:
          description: User transaction type
          example: transfer
          type: string
        symbol:
          description: Token symbol
          example: LRC
          type: string
        amount:
          description: Amount requested by the user
          example: "1000000000000000000"
          type: string
        senderAddress:
          description: field.TxData.senderAddress
          example: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          type: string
        receiver:
          description: Receiver ID
          example: 1
          format: int64
          type: integer
        receiverAddress:
          description: The transfer receiver's address
          example: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          type: string
        feeTokenSymbol:
          description: Fee token symbol
          example: ETH
          type: string
        feeAmount:
          description: Fee amount in wei
          example: "1000000000000000"
          type: string
        status:
          description: Current status
          enum:
          - processing
          - processed
          - received
          - failed
          example: processing
          type: string
        progress:
          description: Progress
          example: 100%
          type: string
        timestamp:
          description: Create time
          example: 1578572292000
          format: int64
          type: integer
        updatedAt:
          description: Update time
          example: 1578572292000
          format: int64
          type: integer
        memo:
          description: field.TxData.memo
          example: Air Drop
          type: string
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - amount
      - blockId
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - indexInBlock
      - progress
      - status
      - symbol
      - timestamp
      - txType
      - updatedAt
      type: object
    TransferDataList:
      description: model.TransferDataList.description
      example:
        totalNum: 1
        transactions:
        - symbol: LRC
          amount: "1000000000000000000"
          senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          receiver: 1
          memo: Air Drop
          txType: transfer
          feeTokenSymbol: ETH
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          id: 1
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - symbol: LRC
          amount: "1000000000000000000"
          senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          receiver: 1
          memo: Air Drop
          txType: transfer
          feeTokenSymbol: ETH
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          id: 1
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: Total number of records found
          example: 1
          format: int64
          type: integer
        transactions:
          description: User's transfer list
          items:
            $ref: '#/components/schemas/TransferData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    OffChainWithdrawalRequest:
      example:
        owner: "1"
        amount: "1000000000000000000"
        maxFeeAmount: "1000000000000000000"
        extraData: 0xABCD1234
        fastWithdrawalMode: false
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        feeToken: 1
        token: 1
        accountId: 1
        eddsaSig: "0xX..{64}..XY..{64}..YZ..{64}..Z"
        validUntil: 1519217383
        exchange: "1"
        to: 0x12345678
        ecdsaSig: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        minGas: 1519217383
        storageId: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        accountId:
          description: account id in exchange
          example: 1
          format: int64
          type: integer
        owner:
          description: owner of accountId in exchange
          example: "1"
          type: string
        token:
          description: withdraw token id
          example: 1
          format: int32
          type: integer
        amount:
          description: "withdraw amount of token, decimal string in WEI"
          example: "1000000000000000000"
          type: string
        feeToken:
          description: fee token id in exchange
          example: 1
          format: int32
          type: integer
        maxFeeAmount:
          description: "fee amount of token, decimal string in WEI"
          example: "1000000000000000000"
          type: string
        storageId:
          description: dex offchain request storageID of the account
          example: 1
          format: int64
          type: integer
        validUntil:
          description: valid until
          example: 1519217383
          format: int32
          type: integer
        minGas:
          description: min gas
          example: 1519217383
          format: int32
          type: integer
        to:
          description: to address
          example: 0x12345678
          type: string
        extraData:
          description: extra data
          example: 0xABCD1234
          type: string
        fastWithdrawalMode:
          description: fastWithdrawal mode
          example: false
          type: boolean
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSig:
          description: "eddsaSig of this request, hex string"
          example: "0xX..{64}..XY..{64}..YZ..{64}..Z"
          type: string
        ecdsaSig:
          description: "trading ecdsa_sig signature of this order, decimal string"
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
      required:
      - accountId
      - amount
      - exchange
      - feeToken
      - maxFeeAmount
      - minGas
      - owner
      - storageId
      - to
      - token
      - validUntil
      type: object
    GetUserCreateResponseV2:
      description: Response body
      example:
        data:
          totalNum: 1
          transactions:
          - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/UserCreateDataList'
      required:
      - resultInfo
      type: object
    UserAccountTxData:
      description: Response data
      example:
        owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
        feeTokenSymbol: ETH
        blockId: 0
        feeAmount: "1000000000000000"
        progress: 100%
        indexInBlock: 6
        blockNum: 100
        id: 1
        txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        status: processing
        timestamp: 1578572292000
        updatedAt: 1578572292000
      properties:
        id:
          description: Unique ID
          example: 1
          format: int64
          type: integer
        hash:
          description: hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        owner:
          description: Owner address of the Tx
          example: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
          type: string
        txHash:
          description: Transaction hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        feeTokenSymbol:
          description: Fee token symbol
          example: ETH
          type: string
        feeAmount:
          description: Fee amount in wei
          example: "1000000000000000"
          type: string
        status:
          description: Current status
          enum:
          - processing
          - processed
          - received
          - failed
          example: processing
          type: string
        progress:
          description: Progress
          example: 100%
          type: string
        timestamp:
          description: Create time
          example: 1578572292000
          format: int64
          type: integer
        blockNum:
          description: Block height
          example: 100
          format: int64
          type: integer
        updatedAt:
          description: Update time
          example: 1578572292000
          format: int64
          type: integer
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
      required:
      - blockId
      - blockNum
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - indexInBlock
      - owner
      - progress
      - status
      - timestamp
      - txHash
      - updatedAt
      type: object
    UserCreateDataList:
      description: UserCreateDataList
      example:
        totalNum: 1
        transactions:
        - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: Total number of records found
          example: 1
          format: int64
          type: integer
        transactions:
          description: List of UserRegistrationRecord
          items:
            $ref: '#/components/schemas/UserAccountTxData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    GetUserAccountUpdateResponseV2:
      description: Response body
      example:
        data:
          totalNum: 1
          transactions:
          - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
            feeTokenSymbol: ETH
            blockId: 0
            feeAmount: "1000000000000000"
            progress: 100%
            indexInBlock: 6
            blockNum: 100
            id: 1
            txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/UserAccountUpdateDataList'
      required:
      - resultInfo
      type: object
    UserAccountUpdateDataList:
      description: UserChangePasswordDataList
      example:
        totalNum: 1
        transactions:
        - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - owner: 0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee
          feeTokenSymbol: ETH
          blockId: 0
          feeAmount: "1000000000000000"
          progress: 100%
          indexInBlock: 6
          blockNum: 100
          id: 1
          txHash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: Total number of records found
          example: 1
          format: int64
          type: integer
        transactions:
          description: List of UserPasswordChangeRecord
          items:
            $ref: '#/components/schemas/UserAccountTxData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    GetUserTradesResponseV2:
      description: Response body
      example:
        data:
          totalNum: 100
          trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\",\"accountId\"\
            ,\"tokenId\", \"storageId\"]]"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/TradeList'
      required:
      - resultInfo
      type: object
    TradeList:
      description: A list of trades
      example:
        totalNum: 100
        trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\",\"accountId\"\
          ,\"tokenId\", \"storageId\"]]"
      properties:
        totalNum:
          description: Total number of tradings
          example: 100
          format: int64
          type: integer
        trades:
          description: field.marketTrades.trades
          example: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\",\"accountId\"\
            ,\"tokenId\", \"storageId\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - totalNum
      - trades
      type: object
    GetUserFeeRates2Request:
      example:
        market: LRC-ETH
        accountId: 1
        amountB: LRC-ETH
        tokenB: 0
      properties:
        accountId:
          description: Account ID
          example: 1
          format: int64
          type: integer
        market:
          description: Market symbol
          example: LRC-ETH
          type: string
        tokenB:
          description: Token ID
          example: 0
          format: int32
          type: integer
        amountB:
          description: Amount to buy
          example: LRC-ETH
          type: string
      required:
      - accountId
      - amountB
      - market
      - tokenB
      type: object
    GetOrderAmountResponse:
      description: The results returned by query place order amount
      example:
        data:
          amount: "100000000000000000000"
          gasPrice: "5000000000000000"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/GetOrderAmountResponseData'
      required:
      - resultInfo
      type: object
    GetOrderAmountResponseData:
      description: The result of query minimum amount
      example:
        amount: "100000000000000000000"
        gasPrice: "5000000000000000"
      properties:
        amount:
          description: Amount
          example: "100000000000000000000"
          type: string
        gasPrice:
          description: The gas price use to calculate amount
          example: "5000000000000000"
          type: string
      required:
      - amount
      - gasPrice
      type: object
    GetOrderGroupAmountData:
      description: The result of query minimum amount
      example:
        amounts:
        - tokenSymbol: LRC
          userOrderInfo:
            minAmount: "10000000000"
            makerRate: 0
            takerRate: 0
          tradeCost: tradeCost
          baseOrderInfo:
            minAmount: "10000000000"
            makerRate: 0
            takerRate: 0
        - tokenSymbol: LRC
          userOrderInfo:
            minAmount: "10000000000"
            makerRate: 0
            takerRate: 0
          tradeCost: tradeCost
          baseOrderInfo:
            minAmount: "10000000000"
            makerRate: 0
            takerRate: 0
        gasPrice: "10000000000"
        cacheOverdueAt: 1614683483382
      properties:
        gasPrice:
          description: The gas price use to calculate amount
          example: "10000000000"
          type: string
        amounts:
          description: Amounts
          items:
            $ref: '#/components/schemas/TokenAmount'
          type: array
        cacheOverdueAt:
          description: Cached price data overdue time
          example: 1614683483382
          format: int64
          type: integer
      type: object
    GetOrderGroupAmountResponse:
      example:
        data:
          amounts:
          - tokenSymbol: LRC
            userOrderInfo:
              minAmount: "10000000000"
              makerRate: 0
              takerRate: 0
            tradeCost: tradeCost
            baseOrderInfo:
              minAmount: "10000000000"
              makerRate: 0
              takerRate: 0
          - tokenSymbol: LRC
            userOrderInfo:
              minAmount: "10000000000"
              makerRate: 0
              takerRate: 0
            tradeCost: tradeCost
            baseOrderInfo:
              minAmount: "10000000000"
              makerRate: 0
              takerRate: 0
          gasPrice: "10000000000"
          cacheOverdueAt: 1614683483382
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/GetOrderGroupAmountData'
      required:
      - resultInfo
      type: object
    OrderInfo:
      description: The result of token amount
      example:
        minAmount: "10000000000"
        makerRate: 0
        takerRate: 0
      properties:
        minAmount:
          description: The minimum amount
          example: "10000000000"
          type: string
        makerRate:
          description: Maker rate
          example: 0
          format: int32
          type: integer
        takerRate:
          description: Taker rate
          example: 0
          format: int32
          type: integer
      type: object
    TokenAmount:
      description: The result of token amount
      example:
        tokenSymbol: LRC
        userOrderInfo:
          minAmount: "10000000000"
          makerRate: 0
          takerRate: 0
        tradeCost: tradeCost
        baseOrderInfo:
          minAmount: "10000000000"
          makerRate: 0
          takerRate: 0
      properties:
        tokenSymbol:
          description: Token
          example: LRC
          type: string
        baseOrderInfo:
          $ref: '#/components/schemas/OrderInfo'
        userOrderInfo:
          $ref: '#/components/schemas/OrderInfo'
        tradeCost:
          description: The base cost of trade settlement
          type: string
      required:
      - tradeCost
      type: object
    CombineMarketInfo:
      example:
        market: LRC-USDT
        quoteTokenId: 0
        precisionForPrice: 6
        createdAt: "1609466400000"
        orderbookAggLevels: 4
        baseTokenId: 2
        enabled: true
        status: 0
      properties:
        market:
          description: Trading pair ID
          example: LRC-USDT
          type: string
        baseTokenId:
          description: The base token ID
          example: 2
          format: int32
          type: integer
        quoteTokenId:
          description: The quote token ID
          example: 0
          format: int32
          type: integer
        precisionForPrice:
          description: The precision of price
          example: 6
          format: int32
          type: integer
        orderbookAggLevels:
          description: The max level of orderbook price aggregation
          example: 4
          format: int32
          type: integer
        enabled:
          description: True if trading is enabled for this trading pair
          example: true
          type: boolean
        status:
          description: field.CombineMarketInfo.status
          format: int32
          type: integer
        createdAt:
          description: field.AmmMarketInfo.createdAt
          example: "1609466400000"
          type: string
      required:
      - baseTokenId
      - createdAt
      - enabled
      - market
      - orderbookAggLevels
      - precisionForPrice
      - quoteTokenId
      - status
      type: object
    GetMixedMarketInfoResponse:
      description: model.getMarketInfoResponse
      example:
        data:
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          createdAt: "1609466400000"
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: true
          status: 0
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          createdAt: "1609466400000"
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: true
          status: 0
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getMarketInfoResponse.data
          items:
            $ref: '#/components/schemas/CombineMarketInfo'
          type: array
      required:
      - resultInfo
      type: object
    ExchangeInfo:
      description: field.exchangeInfo.description
      example:
        updateFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
        fastWithdrawalFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
        ammExitFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
        chainId: 1
        exchangeAddress: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
        openAccountFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
        depositAddress: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
        withdrawalFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
        onchainFees:
        - fee: "2000000000000000"
          type: withdraw
        - fee: "2000000000000000"
          type: withdraw
        transferFees:
        - fee: "2000000000000000"
          token: ETH
        - fee: "2000000000000000"
          token: ETH
      properties:
        chainId:
          description: Loopring's smart contract network ID.
          example: 1
          format: int32
          type: integer
        exchangeAddress:
          description: Contract address of exchange.
          example: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
          type: string
        depositAddress:
          description: field.ExchangeInfo.depositAddress
          example: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
          type: string
        onchainFees:
          description: Fees settings.
          items:
            $ref: '#/components/schemas/FeeInfo'
          type: array
        openAccountFees:
          description: field.ExchangeInfo.openAccountFee
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
        updateFees:
          description: field.ExchangeInfo.updateFees
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
        transferFees:
          description: Transfer fee settings.
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
        withdrawalFees:
          description: Off-chain withdrawal fee settings.
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
        fastWithdrawalFees:
          description: fast withdrawal fee settings.
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
        ammExitFees:
          description: AMM pool exit fee settings.
          items:
            $ref: '#/components/schemas/OffFeeInfo'
          type: array
      required:
      - ammExitFees
      - chainId
      - depositAddress
      - exchangeAddress
      - fastWithdrawalFees
      - onchainFees
      - openAccountFees
      - transferFees
      - updateFees
      - withdrawalFees
      type: object
    FeeInfo:
      description: Information about fees charged by the exchange.
      example:
        fee: "2000000000000000"
        type: withdraw
      properties:
        type:
          description: Fee category.
          example: withdraw
          type: string
        fee:
          description: Fee amount in Ether as wei.
          example: "2000000000000000"
          type: string
      required:
      - fee
      - type
      type: object
    GetExchangeInfoResponse:
      example:
        data:
          updateFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
          fastWithdrawalFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
          ammExitFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
          chainId: 1
          exchangeAddress: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
          openAccountFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
          depositAddress: 0xbA1D5779131aa529F51B4B00186E9e97f3BeB854
          withdrawalFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
          onchainFees:
          - fee: "2000000000000000"
            type: withdraw
          - fee: "2000000000000000"
            type: withdraw
          transferFees:
          - fee: "2000000000000000"
            token: ETH
          - fee: "2000000000000000"
            token: ETH
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/ExchangeInfo'
      required:
      - resultInfo
      type: object
    OffFeeInfo:
      description: Off-chain fee info charged by loopring exchange.
      example:
        fee: "2000000000000000"
        token: ETH
      properties:
        token:
          description: fee token
          example: ETH
          type: string
        fee:
          description: fee amount
          example: "2000000000000000"
          type: string
      required:
      - fee
      - token
      type: object
    FeeRate:
      description: The data structure of user query market fee rate
      example:
        symbol: LRC-USDT
        makerRate: 20
        takerRate: 20
      properties:
        symbol:
          description: Market
          example: LRC-USDT
          type: string
        makerRate:
          description: Maker rate
          example: 20
          format: int32
          type: integer
        takerRate:
          description: Taker rate
          example: 20
          format: int32
          type: integer
      required:
      - makerRate
      - symbol
      - takerRate
      type: object
    GetExchangeFeeInfoResponse:
      example:
        data:
          ORDERBOOK_TRADING_FEES:
            key:
              symbol: LRC-USDT
              makerRate: 20
              takerRate: 20
          AMM_TRADING_FEES:
            key:
              symbol: LRC-USDT
              makerRate: 20
              takerRate: 20
          ORDERBOOK_TRADING_FEES_STABLECOIN:
            key:
              symbol: LRC-USDT
              makerRate: 20
              takerRate: 20
          OTHER_FEES:
            key: OTHER_FEES
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/GetExchangeFeeInfoResponseData'
      required:
      - resultInfo
      type: object
    GetExchangeFeeInfoResponseData:
      example:
        ORDERBOOK_TRADING_FEES:
          key:
            symbol: LRC-USDT
            makerRate: 20
            takerRate: 20
        AMM_TRADING_FEES:
          key:
            symbol: LRC-USDT
            makerRate: 20
            takerRate: 20
        ORDERBOOK_TRADING_FEES_STABLECOIN:
          key:
            symbol: LRC-USDT
            makerRate: 20
            takerRate: 20
        OTHER_FEES:
          key: OTHER_FEES
      properties:
        ORDERBOOK_TRADING_FEES_STABLECOIN:
          additionalProperties:
            $ref: '#/components/schemas/FeeRate'
          description: Stable coin orderbook fee rate
          type: object
        ORDERBOOK_TRADING_FEES:
          additionalProperties:
            $ref: '#/components/schemas/FeeRate'
          description: Common orderbook fee rate
          type: object
        AMM_TRADING_FEES:
          additionalProperties:
            $ref: '#/components/schemas/FeeRate'
          description: AMM fee rate
          type: object
        OTHER_FEES:
          additionalProperties:
            type: string
          description: Other fee
          type: object
      required:
      - AMM_TRADING_FEES
      - ORDERBOOK_TRADING_FEES
      - ORDERBOOK_TRADING_FEES_STABLECOIN
      - OTHER_FEES
      type: object
    AgentInfo:
      description: field.AgentInfo.description
      example:
        symbol: LRC
        totalAmount: "1234"
        address: 0xABCD
        freezeAmount: "1234"
        tokenId: 1
        timestamp: 1234
      properties:
        address:
          description: field.AgentInfo.address
          example: 0xABCD
          type: string
        tokenId:
          description: field.AgentInfo.tokenId
          example: 1
          format: int32
          type: integer
        symbol:
          description: field.AgentInfo.symbol
          example: LRC
          type: string
        totalAmount:
          description: field.AgentInfo.totalAmount
          example: "1234"
          type: string
        freezeAmount:
          description: field.AgentInfo.freezeAmount
          example: "1234"
          type: string
        timestamp:
          description: field.AgentInfo.timestamp
          example: 1234
          format: int64
          type: integer
      required:
      - address
      - freezeAmount
      - symbol
      - timestamp
      - tokenId
      - totalAmount
      type: object
    GetRecommendedGasPriceResponseRangeV2:
      example:
        data:
        - data
        - data
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          items:
            type: string
          type: array
      required:
      - data
      - resultInfo
      type: object
    WebSocket:
      type: object
    SubmitMintNftResponseItem:
      description: Mint response
      example:
        accountId: 10060
        isIdempotent: false
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        nftTokenId: 32768
        hash: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        status: cancelled
        storageId: 1
      properties:
        hash:
          description: Mint request hash.
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        nftTokenId:
          description: field.SubmitMintNftResponseItem.nftTokenId
          example: 32768
          format: int32
          type: integer
        nftData:
          description: Mint tokens nftData.
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        status:
          description: Mint status.
          enum:
          - processing
          - processed
          - cancelling
          - cancelled
          - expired
          - failed
          example: cancelled
          type: string
        isIdempotent:
          description: Idempotent of submit order response. True if the same request
            is sent more than once.
          example: false
          type: boolean
        accountId:
          description: field.SubmitOffChainResponseItem.accountId
          example: 10060
          format: int64
          type: integer
        storageId:
          description: field.SubmitOffChainResponseItem.storageId
          example: 1
          format: int64
          type: integer
      required:
      - accountId
      - hash
      - isIdempotent
      - nftData
      - nftTokenId
      - status
      - storageId
      type: object
    CounterFactualNftInfo:
      example:
        nftFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftBaseUri: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
      properties:
        nftFactory:
          description: field.CounterFactualNftInfo.nftFactory
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftOwner:
          description: field.CounterFactualNftInfo.nftOwner
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftBaseUri:
          description: field.CounterFactualNftInfo.nftBaseUri
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
      required:
      - nftFactory
      - nftOwner
      type: object
    SubmitNftMintRequest:
      description: Mint a NFT token in L2
      example:
        amount: "1"
        counterFactualNftInfo:
          nftFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          nftOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          nftBaseUri: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        royaltyPercentage: "0"
        royaltyAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        toAccountId: 1
        nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        maxFee:
          amount: "1"
          tokenId: 0
        minterAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        toAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftType: 0
        tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        creatorFeeBips: "0"
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1567053142
        exchange: "1"
        forceToMint: false
        minterId: 1
        storageId: 1
      properties:
        exchange:
          description: field.SubmitNftMintRequest.exchange
          example: "1"
          type: string
        minterId:
          description: minters accountId
          example: 1
          format: int64
          type: integer
        minterAddress:
          description: minters address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        toAccountId:
          description: "=The account receive the minted NFT token, now should be minter\
            \ himself."
          example: 1
          format: int64
          type: integer
        toAddress:
          description: field.SubmitNftMintRequest.toAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftType:
          description: "nftType: 0 for EIP1155, 1 for EIP712. EIP1155 by default."
          format: int32
          type: integer
        tokenAddress:
          description: field.SubmitNftMintRequest.tokenAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftId:
          description: NFT_ID
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        amount:
          description: how many tokens to be mint.
          example: "1"
          type: string
        creatorFeeBips:
          description: fee to the creator of each NFT transaction.
          example: "0"
          properties: {}
          type: object
        royaltyPercentage:
          description: field.SubmitNftMintRequest.royaltyPercentage
          example: "0"
          properties: {}
          type: object
        validUntil:
          description: field.SubmitNftMintRequest.validUntil
          example: 1567053142
          format: int64
          type: integer
        storageId:
          description: field.SubmitNftMintRequest.storageId
          example: 1
          format: int32
          type: integer
        maxFee:
          $ref: '#/components/schemas/TokenAmountInfo'
        eddsaSignature:
          description: field.SubmitNftMintRequest.eddsaSignature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: field.SubmitNftMintRequest.ecdsaSignature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        hashApproved:
          description: field.SubmitNftMintRequest.hashApproved
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        forceToMint:
          description: "force to mint, regardless the previous mint record"
          example: false
          type: boolean
        counterFactualNftInfo:
          $ref: '#/components/schemas/CounterFactualNftInfo'
        royaltyAddress:
          description: field.CounterFactualNftInfo.royaltyAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
      required:
      - amount
      - exchange
      - maxFee
      - minterAddress
      - minterId
      - nftId
      - nftType
      - storageId
      - toAccountId
      - tokenAddress
      - validUntil
      type: object
    TokenAmountInfo:
      description: Wrapper object used to describe a token associated with a certain
        quantity.
      example:
        amount: "1"
        tokenId: 0
      properties:
        tokenId:
          description: The Loopring's NFT token identifier.
          example: 0
          format: int32
          type: integer
        amount:
          description: The amount of the NFT token
          example: "1"
          type: string
      required:
      - amount
      - tokenId
      type: object
    SubmitOffChainRequestItem:
      description: Response detail of submitted off chain requests
      example:
        accountId: 10060
        joinTokensIds: "0"
        joinStorageIds: "1"
        isIdempotent: true
        hash: 0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3
        status: received
      properties:
        hash:
          description: The order hash identifier set by the user at the time of submission
          example: 0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3
          type: string
        status:
          description: "Whether the order was successfully submitted or not, please\
            \ note, user may query after a while to get real process status, as most\
            \ offchain requests are async processed"
          enum:
          - received
          - processing
          - processed
          - failed
          example: received
          type: string
        isIdempotent:
          description: "Idempotent of submit order response, submit same order again\
            \ when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent\
            \ will be true"
          example: true
          type: boolean
        accountId:
          description: field.SubmitOffChainResponseItem.accountId
          example: 10060
          format: int64
          type: integer
        joinTokensIds:
          description: field.SubmitOffChainResponseItem.tokenId
          example: "0"
          items:
            properties: {}
            type: object
          type: array
        joinStorageIds:
          description: field.SubmitOffChainResponseItem.storageId
          example: "1"
          items:
            properties: {}
            type: object
          type: array
      required:
      - accountId
      - hash
      - isIdempotent
      - joinStorageIds
      - joinTokensIds
      - status
      type: object
    NftTokenAmountInfo:
      description: Wrapper object used to describe a NFT token associated with a certain
        quantity.
      example:
        amount: "1"
        tokenId: 0
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        tokenId:
          description: The Loopring's NFT token identifier.
          example: 0
          format: int32
          type: integer
        nftData:
          description: The Loopring's NFT token data identifier which is a hash string
            of NFT token address and NFT_ID
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        amount:
          description: The amount of the NFT token
          example: "1"
          type: string
      required:
      - amount
      - tokenId
      type: object
    NftTransferRequest:
      description: Submit NFT transfer request
      example:
        payPayeeUpdateAccount: false
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        toAccountId: 1
        memo: Air Drop
        maxFee:
          amount: "1"
          tokenId: 0
        toAddress: 0xCDEF
        token:
          amount: "1"
          tokenId: 0
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        fromAccountId: 1
        ecdsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        eddsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1598431481
        exchange: "1"
        fromAddress: 0xABCD
        storageId: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        fromAccountId:
          description: payer account ID
          example: 1
          format: int64
          type: integer
        fromAddress:
          description: payer account address
          example: 0xABCD
          type: string
        toAccountId:
          description: payee account ID
          example: 1
          format: int64
          type: integer
        toAddress:
          description: payer account address
          example: 0xCDEF
          type: string
        token:
          $ref: '#/components/schemas/NftTokenAmountInfo'
        maxFee:
          $ref: '#/components/schemas/TokenAmountInfo'
        storageId:
          description: offchain Id
          example: 1
          format: int64
          type: integer
        validUntil:
          description: Timestamp for order to become invalid
          example: 1598431481
          format: int32
          type: integer
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSignature:
          description: eddsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        ecdsaSignature:
          description: ecdsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        hashApproved:
          description: An approved hash string which was already submitted on eth
            mainnet
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        memo:
          description: transfer memo
          example: Air Drop
          type: string
        payPayeeUpdateAccount:
          description: field.OriginTransferRequestV3.payPayeeUpdateAccount
          example: false
          type: boolean
      required:
      - exchange
      - fromAccountId
      - fromAddress
      - maxFee
      - storageId
      - toAccountId
      - toAddress
      - token
      - validUntil
      type: object
    SubmitNftOrderRequestV3:
      description: Submit an NFT order
      example:
        orderType: LIMIT_ORDER
        clientOrderId: "1"
        buyToken:
          amount: "1"
          tokenId: 0
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        fillAmountBOrS: "true"
        maxFeeBips: 20
        accountId: 1
        sellToken:
          amount: "1"
          tokenId: 0
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        allOrNone: "false"
        eddsaSignature: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        validUntil: 1567053142
        exchange: "1"
        taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
        affiliate: "10068"
        storageId: 1
        tradeChannel: ORDER_BOOK
      properties:
        exchange:
          description: The adderss of the exchange which has to process this order
          example: "1"
          type: string
        accountId:
          description: Loopring's account ID
          example: 1
          format: int64
          type: integer
        storageId:
          description: The unique identifier of the L2 Merkle tree storage slot where
            the burn made in order to exit the pool will or has been stored.
          example: 1
          format: int32
          type: integer
        sellToken:
          $ref: '#/components/schemas/NftTokenAmountInfo'
        buyToken:
          $ref: '#/components/schemas/NftTokenAmountInfo'
        allOrNone:
          description: Whether the order supports partial fills or not.Currently only
            supports false as a valid value
          example: "false"
          type: string
        fillAmountBOrS:
          description: Fill size by buy token or by sell token
          example: "true"
          type: string
        validUntil:
          description: "Order expiration time, accuracy is in seconds"
          example: 1567053142
          format: int64
          type: integer
        maxFeeBips:
          description: "Maximum order fee that the user can accept, value range (in\
            \ ten thousandths) 1 ~ 63"
          example: 20
          format: int32
          type: integer
        eddsaSignature:
          description: "The orders EdDSA signature. The signature is a hexadecimal\
            \ string obtained by signing the order itself and concatenating the resulting\
            \ signature parts (Rx, Ry, and S). Used to authenticate and authorize\
            \ the operation."
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        clientOrderId:
          description: "An arbitrary, client-set unique order identifier, max length\
            \ is 120 bytes"
          example: "1"
          type: string
        orderType:
          description: "Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY"
          enum:
          - LIMIT_ORDER
          - TAKER_ONLY
          - MAKER_ONLY
          - AMM
          example: LIMIT_ORDER
          type: string
        tradeChannel:
          description: "Order channel, can be ORDER_BOOK, AMM_POOL, MIXED"
          enum:
          - ORDER_BOOK
          - AMM_POOL
          - MIXED
          example: ORDER_BOOK
          type: string
        taker:
          description: "Used by the P2P order which user specify the taker, so far\
            \ its 0x0000000000000000000000000000000000000000"
          example: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          type: string
        affiliate:
          description: An accountID who will recieve a share of the fee of this order
          example: "10068"
          type: string
      required:
      - accountId
      - buyToken
      - eddsaSignature
      - exchange
      - maxFeeBips
      - sellToken
      - storageId
      - validUntil
      type: object
    NftTradeFill:
      description: Nft trade fill status
      example:
        buyFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        fee: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        sellFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        orderHash:
          description: The order hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        sellFilled:
          description: The orders sell fill
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        buyFilled:
          description: The orders buy fill
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        fee:
          description: The orders fee
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
      required:
      - buyFilled
      - fee
      - orderHash
      - sellFilled
      type: object
    NftTradeResponse:
      description: The trade settlement
      example:
        makerFills:
          buyFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          fee: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          sellFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        tradeHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        takerFills:
          buyFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          fee: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          sellFilled: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        makerFills:
          $ref: '#/components/schemas/NftTradeFill'
        takerFills:
          $ref: '#/components/schemas/NftTradeFill'
        tradeHash:
          description: The trade hash which can be queried in loopring scan web.
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
      required:
      - makerFills
      - takerFills
      - tradeHash
      type: object
    SubmitNftTradeRequestV3:
      description: settle down input NFT order pair
      example:
        makerFeeBips: 100
        maker:
          orderType: LIMIT_ORDER
          clientOrderId: "1"
          buyToken:
            amount: "1"
            tokenId: 0
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          fillAmountBOrS: "true"
          maxFeeBips: 20
          accountId: 1
          sellToken:
            amount: "1"
            tokenId: 0
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          allOrNone: "false"
          eddsaSignature: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          validUntil: 1567053142
          exchange: "1"
          taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          affiliate: "10068"
          storageId: 1
          tradeChannel: ORDER_BOOK
        ignoreFees: "true"
        matchByTaker: "true"
        taker:
          orderType: LIMIT_ORDER
          clientOrderId: "1"
          buyToken:
            amount: "1"
            tokenId: 0
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          fillAmountBOrS: "true"
          maxFeeBips: 20
          accountId: 1
          sellToken:
            amount: "1"
            tokenId: 0
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          allOrNone: "false"
          eddsaSignature: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          validUntil: 1567053142
          exchange: "1"
          taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          affiliate: "10068"
          storageId: 1
          tradeChannel: ORDER_BOOK
        takerFeeBips: 100
      properties:
        maker:
          $ref: '#/components/schemas/SubmitNftOrderRequestV3'
        makerFeeBips:
          description: "The maker feeBips, should <= maxFeeBips in makers order"
          example: 100
          format: int32
          type: integer
        taker:
          $ref: '#/components/schemas/SubmitNftOrderRequestV3'
        takerFeeBips:
          description: "The taker feeBips, should <= maxFeeBips in takers order"
          example: 100
          format: int32
          type: integer
        ignoreFees:
          description: "If this trade ignores the fees config of each order, only\
            \ whitelisted user can set this flag."
          example: "true"
          properties: {}
          type: object
        matchByTaker:
          description: field.SubmitNftTradeRequestV3.matchByTaker
          example: "true"
          properties: {}
          type: object
      required:
      - maker
      - makerFeeBips
      - taker
      - takerFeeBips
      type: object
    NftOffChainWithdrawalRequestV3:
      description: model.NftOffChainWithdrawalRequestV3.description
      example:
        owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        extraData: 0xABCD1234
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        maxFee:
          amount: "1"
          tokenId: 0
        token:
          amount: "1"
          tokenId: 0
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        accountId: 1003
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1519217383
        exchange: "1"
        to: 0x12345678
        minGas: 1519217383
        storageId: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        accountId:
          description: account ID
          example: 1003
          format: int64
          type: integer
        owner:
          description: account owner address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        token:
          $ref: '#/components/schemas/NftTokenAmountInfo'
        maxFee:
          $ref: '#/components/schemas/TokenAmountInfo'
        storageId:
          description: offchain ID
          example: 1
          format: int64
          type: integer
        validUntil:
          description: Timestamp for order to become invalid
          example: 1519217383
          format: int32
          type: integer
        minGas:
          description: "min gas for on-chain withdraw, Loopring exchange allocates\
            \ gas for each distribution, but people can also assign this min gas,\
            \ so Loopring have to allocate higher gas value for this specific distribution,\
            \ 0 means let loopring choose the reasonable gas"
          example: 1519217383
          format: int32
          type: integer
        to:
          description: withdraw to address
          example: 0x12345678
          type: string
        extraData:
          description: "extra data for complex withdraw mode, normally none"
          example: 0xABCD1234
          type: string
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSignature:
          description: eddsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: ecdsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        hashApproved:
          description: An approved hash string which was already submitted on eth
            mainnet
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
      required:
      - accountId
      - exchange
      - maxFee
      - owner
      - storageId
      - to
      - token
      - validUntil
      type: object
    NftTokenInfo:
      description: NFT token info
      example:
        royaltyPercentage: 0
        royaltyAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        nftType: "ERC1155, ERC721"
        tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        createdAt: 1578572292000
        minter: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        creatorFeeBips: 0
        nftOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        originalRoyaltyPercentage: 0
        originalMinter: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        status: true
        nftBaseUri: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
      properties:
        nftData:
          description: "NFT token nftData, which is a hash of token address, NFT_ID,\
            \ minter, etc."
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        minter:
          description: The minter of the NFT token
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        nftType:
          description: field.NftTokenInfo.nftType
          example: "ERC1155, ERC721"
          type: string
        tokenAddress:
          description: field.NftTokenInfo.tokenAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftId:
          description: field.NftTokenInfo.nftId
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        creatorFeeBips:
          description: field.NftTokenInfo.creatorFeeBips
          example: 0
          format: int32
          type: integer
        royaltyPercentage:
          description: field.NftTokenInfo.royaltyPercentage
          example: 0
          format: int32
          type: integer
        originalRoyaltyPercentage:
          description: field.NftTokenInfo.originalRoyaltyPercentage
          example: 0
          format: int32
          type: integer
        status:
          description: field.NftTokenInfo.status
          example: true
          type: boolean
        nftFactory:
          description: field.NftTokenInfo.nftFactory
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftOwner:
          description: field.NftTokenInfo.nftOwner
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftBaseUri:
          description: field.NftTokenInfo.nftBaseUri
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        royaltyAddress:
          description: field.NftTokenInfo.royaltyAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        originalMinter:
          description: field.NftTokenInfo.originalMinter
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        createdAt:
          description: field.NftTokenInfo.createdAt
          example: 1578572292000
          format: int64
          type: integer
      required:
      - creatorFeeBips
      - minter
      - nftData
      - nftId
      - nftType
      - originalRoyaltyPercentage
      - royaltyPercentage
      - status
      - tokenAddress
      type: object
    NftHolder:
      description: model.NftHolder.description
      example:
        accountId: 12345
        amount: "1"
        tokenId: 0
      properties:
        accountId:
          description: Sender accountId of the Tx
          example: 12345
          format: int64
          type: integer
        tokenId:
          description: The Loopring's NFT token identifier.
          example: 0
          format: int32
          type: integer
        amount:
          description: The amount of the NFT token
          example: "1"
          type: string
      required:
      - accountId
      - amount
      - tokenId
      type: object
    NftHolders:
      description: model.NftHolders.description
      example:
        totalNum: 0
        nftHolders:
        - accountId: 12345
          amount: "1"
          tokenId: 0
        - accountId: 12345
          amount: "1"
          tokenId: 0
      properties:
        totalNum:
          description: field.totalNum.description
          format: int32
          type: integer
        nftHolders:
          description: model.nftHolders.description
          items:
            $ref: '#/components/schemas/NftHolder'
          type: array
      required:
      - nftHolders
      - totalNum
      type: object
    FeeTokenAmount:
      description: The result of query NFT market minimum fee tokens amount
      example:
        minAmount: minAmount
        marketOrderInfo:
          maximum: "1000000000000000000"
          minimum: "10000000000000000"
          dust: "1000000000000000"
        tradeCost: tradeCost
        feeTokenSymbol: ETH
      properties:
        feeTokenSymbol:
          description: Fee token symbol
          example: ETH
          type: string
        minAmount:
          description: The minimum quote token amount to place a NFT order
          type: string
        tradeCost:
          description: The base cost of trade settlement
          type: string
        marketOrderInfo:
          $ref: '#/components/schemas/OrderAmountsV3'
      required:
      - feeTokenSymbol
      - marketOrderInfo
      - minAmount
      - tradeCost
      type: object
    GetUserNftOrderRatesAmountsResponse:
      description: "Get NFT market minimum order amount & user fee rate, also returns\
        \ the trade settlement costs."
      example:
        amounts:
        - minAmount: minAmount
          marketOrderInfo:
            maximum: "1000000000000000000"
            minimum: "10000000000000000"
            dust: "1000000000000000"
          tradeCost: tradeCost
          feeTokenSymbol: ETH
        - minAmount: minAmount
          marketOrderInfo:
            maximum: "1000000000000000000"
            minimum: "10000000000000000"
            dust: "1000000000000000"
          tradeCost: tradeCost
          feeTokenSymbol: ETH
        nftTokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        feeRate: 20
        gasPrice: "10000000000"
        cacheOverdueAt: 1632365568
      properties:
        nftTokenAddress:
          description: field.NftFeeRate.nftTokenAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        feeRate:
          description: field.NftFeeRate.rate
          example: 20
          format: int32
          type: integer
        amounts:
          description: Amounts
          items:
            $ref: '#/components/schemas/FeeTokenAmount'
          type: array
        gasPrice:
          description: field.GetUserNftFeeRatesResponse.gasPrice
          example: "10000000000"
          type: string
        cacheOverdueAt:
          description: Cached price data overdue time
          example: 1632365568
          format: int64
          type: integer
      required:
      - amounts
      - cacheOverdueAt
      - feeRate
      - gasPrice
      - nftTokenAddress
      type: object
    OrderAmountsV3:
      description: Contains information about the order amounts that are valid for
        usage with the token in order-related APIs.
      example:
        maximum: "1000000000000000000"
        minimum: "10000000000000000"
        dust: "1000000000000000"
      properties:
        minimum:
          description: The minimum amount enforced when submitting orders for the
            token.
          example: "10000000000000000"
          type: string
        maximum:
          description: The maximum amount enforced when submitting orders for the
            token.
          example: "1000000000000000000"
          type: string
        dust:
          description: The dust amount enforced when submitting orders for the token.
          example: "1000000000000000"
          type: string
      required:
      - dust
      - maximum
      - minimum
      type: object
    GetNftMintersResponse:
      example:
        totalNum: 0
        minters:
        - minters
        - minters
      properties:
        totalNum:
          format: int32
          type: integer
        minters:
          items:
            type: string
          type: array
      required:
      - minters
      - totalNum
      type: object
    GetNftTokenAddressesResponse:
      example:
        totalNum: 0
        nftTokenAddresses:
        - nftTokenAddresses
        - nftTokenAddresses
      properties:
        totalNum:
          format: int32
          type: integer
        nftTokenAddresses:
          items:
            type: string
          type: array
      required:
      - nftTokenAddresses
      - totalNum
      type: object
    CombinedNftBalance:
      description: model.nftBalance.description
      example:
        isCounterFactualNFT: true
        metadata:
          nftType: 1
          tokenAddress: tokenAddress
          extra:
            externalUrl: externalUrl
            backgroundColor: backgroundColor
            animationUrl: animationUrl
            minter: minter
            imageData: imageData
            youtubeUrl: youtubeUrl
            attributes: attributes
          nftId: nftId
          imageSize:
            key: imageSize
          uri: uri
          base:
            localization: localization
            image: image
            decimals: 0
            name: name
            description: description
            properties: properties
          status: 6
          network: 5
        tokenId: 10
        pending:
          deposit: "10000000000000"
          withdraw: "10000000000000"
        nftId: "100"
        tokenAddress: "100"
        nftType: "ERC1155, ERC721"
        accountId: 10
        total: "100"
        deploymentStatus: NOT_DEPLOYED DEPLOY_FAILED DEPLOYING DEPLOYED
        nftData: "100"
        id: 10
        locked: "100"
      properties:
        id:
          description: field.Balance.accountId
          example: 10
          format: int64
          type: integer
        accountId:
          description: field.Balance.accountId
          example: 10
          format: int64
          type: integer
        tokenId:
          description: field.Balance.tokenId
          example: 10
          format: int32
          type: integer
        nftData:
          description: Users NFT token nftData
          example: "100"
          type: string
        tokenAddress:
          description: field.NftBalance.tokenAddress
          example: "100"
          type: string
        nftId:
          description: field.NftBalance.nftId
          example: "100"
          type: string
        nftType:
          description: field.NftBalance.nftType
          example: "ERC1155, ERC721"
          type: string
        total:
          description: field.Balance.totalAmount
          example: "100"
          type: string
        locked:
          description: field.Balance.frozenAmount
          example: "100"
          type: string
        pending:
          $ref: '#/components/schemas/PendingBalance'
        deploymentStatus:
          description: field.Balance.deploymentStatus
          example: NOT_DEPLOYED DEPLOY_FAILED DEPLOYING DEPLOYED
          type: string
        isCounterFactualNFT:
          description: field.Balance.isCounterFactualNFT
          example: true
          type: boolean
        metadata:
          $ref: '#/components/schemas/NftMetadataL2Info'
      required:
      - accountId
      - id
      - locked
      - pending
      - tokenId
      - total
      type: object
    GetUserNftBalancesResponse:
      description: Users NFT token balance response
      example:
        data:
        - isCounterFactualNFT: true
          metadata:
            nftType: 1
            tokenAddress: tokenAddress
            extra:
              externalUrl: externalUrl
              backgroundColor: backgroundColor
              animationUrl: animationUrl
              minter: minter
              imageData: imageData
              youtubeUrl: youtubeUrl
              attributes: attributes
            nftId: nftId
            imageSize:
              key: imageSize
            uri: uri
            base:
              localization: localization
              image: image
              decimals: 0
              name: name
              description: description
              properties: properties
            status: 6
            network: 5
          tokenId: 10
          pending:
            deposit: "10000000000000"
            withdraw: "10000000000000"
          nftId: "100"
          tokenAddress: "100"
          nftType: "ERC1155, ERC721"
          accountId: 10
          total: "100"
          deploymentStatus: NOT_DEPLOYED DEPLOY_FAILED DEPLOYING DEPLOYED
          nftData: "100"
          id: 10
          locked: "100"
        - isCounterFactualNFT: true
          metadata:
            nftType: 1
            tokenAddress: tokenAddress
            extra:
              externalUrl: externalUrl
              backgroundColor: backgroundColor
              animationUrl: animationUrl
              minter: minter
              imageData: imageData
              youtubeUrl: youtubeUrl
              attributes: attributes
            nftId: nftId
            imageSize:
              key: imageSize
            uri: uri
            base:
              localization: localization
              image: image
              decimals: 0
              name: name
              description: description
              properties: properties
            status: 6
            network: 5
          tokenId: 10
          pending:
            deposit: "10000000000000"
            withdraw: "10000000000000"
          nftId: "100"
          tokenAddress: "100"
          nftType: "ERC1155, ERC721"
          accountId: 10
          total: "100"
          deploymentStatus: NOT_DEPLOYED DEPLOY_FAILED DEPLOYING DEPLOYED
          nftData: "100"
          id: 10
          locked: "100"
        totalNum: 100
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        data:
          description: NFT tokens balance info
          items:
            $ref: '#/components/schemas/CombinedNftBalance'
          type: array
      required:
      - data
      - totalNum
      type: object
    NftExtra:
      example:
        externalUrl: externalUrl
        backgroundColor: backgroundColor
        animationUrl: animationUrl
        minter: minter
        imageData: imageData
        youtubeUrl: youtubeUrl
        attributes: attributes
      properties:
        imageData:
          type: string
        externalUrl:
          type: string
        attributes:
          type: string
        backgroundColor:
          type: string
        animationUrl:
          type: string
        youtubeUrl:
          type: string
        minter:
          type: string
      required:
      - animationUrl
      - attributes
      - backgroundColor
      - externalUrl
      - imageData
      - minter
      - youtubeUrl
      type: object
    NftMetadataBaseInfo:
      example:
        localization: localization
        image: image
        decimals: 0
        name: name
        description: description
        properties: properties
      properties:
        name:
          type: string
        decimals:
          format: int32
          type: integer
        description:
          type: string
        image:
          type: string
        properties:
          type: string
        localization:
          type: string
      required:
      - decimals
      - description
      - image
      - localization
      - name
      - properties
      type: object
    NftMetadataL2Info:
      example:
        nftType: 1
        tokenAddress: tokenAddress
        extra:
          externalUrl: externalUrl
          backgroundColor: backgroundColor
          animationUrl: animationUrl
          minter: minter
          imageData: imageData
          youtubeUrl: youtubeUrl
          attributes: attributes
        nftId: nftId
        imageSize:
          key: imageSize
        uri: uri
        base:
          localization: localization
          image: image
          decimals: 0
          name: name
          description: description
          properties: properties
        status: 6
        network: 5
      properties:
        uri:
          type: string
        base:
          $ref: '#/components/schemas/NftMetadataBaseInfo'
        imageSize:
          additionalProperties:
            type: string
          type: object
        extra:
          $ref: '#/components/schemas/NftExtra'
        status:
          format: int32
          type: integer
        nftType:
          format: int32
          type: integer
        network:
          format: int32
          type: integer
        tokenAddress:
          type: string
        nftId:
          type: string
      required:
      - imageSize
      - network
      - nftId
      - nftType
      - status
      - tokenAddress
      - uri
      type: object
    NftTradeList:
      description: NFT trade list
      example:
        totalNum: 100
        trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\",\"0\"]]"
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        trades:
          description: Trade info
          example: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\",\"0\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - totalNum
      - trades
      type: object
    BlockIdInfo:
      example:
        blockId: 2
        indexInBlock: 7
      properties:
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
      required:
      - blockId
      - indexInBlock
      type: object
    GetUserNftTransfersResponse:
      description: model.GetUserNftTransfersResponse.description
      example:
        totalNum: 100
        transfers:
        - owner: owner
          amount: amount
          memo: memo
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 6
          feeAmount: feeAmount
          createdAt: 1
          payeeAddress: payeeAddress
          requestId: 0
          nftData: nftData
          id: id
          payeeId: 5
          txHash: txHash
          hash: hash
          status: status
          updatedAt: 5
        - owner: owner
          amount: amount
          memo: memo
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 6
          feeAmount: feeAmount
          createdAt: 1
          payeeAddress: payeeAddress
          requestId: 0
          nftData: nftData
          id: id
          payeeId: 5
          txHash: txHash
          hash: hash
          status: status
          updatedAt: 5
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        transfers:
          description: field.GetUserNftTransfersResponse.NftTransferDataList
          items:
            $ref: '#/components/schemas/NftTransferData'
          type: array
      required:
      - totalNum
      - transfers
      type: object
    NftTransferData:
      description: model.NftTransferData.description
      example:
        owner: owner
        amount: amount
        memo: memo
        feeTokenSymbol: feeTokenSymbol
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        blockIdInfo:
          blockId: 2
          indexInBlock: 7
        accountId: 6
        feeAmount: feeAmount
        createdAt: 1
        payeeAddress: payeeAddress
        requestId: 0
        nftData: nftData
        id: id
        payeeId: 5
        txHash: txHash
        hash: hash
        status: status
        updatedAt: 5
      properties:
        id:
          description: field.NftTransferData.id
          type: string
        requestId:
          description: field.NftTransferData.requestId
          format: int64
          type: integer
        hash:
          description: field.NftTransferData.hash
          type: string
        txHash:
          description: field.NftTransferData.txHash
          type: string
        accountId:
          description: field.NftTransferData.accountId
          format: int64
          type: integer
        owner:
          description: field.NftTransferData.owner
          type: string
        status:
          description: field.NftTransferData.status
          type: string
        nftData:
          description: field.NftTransferData.nftData
          type: string
        amount:
          description: field.NftTransferData.amount
          type: string
        feeTokenSymbol:
          description: field.NftTransferData.feeTokenSymbol
          type: string
        feeAmount:
          description: field.NftTransferData.feeAmount
          type: string
        createdAt:
          description: field.NftTransferData.createdAt
          format: int64
          type: integer
        updatedAt:
          description: field.NftTransferData.updatedAt
          format: int64
          type: integer
        memo:
          description: field.NftTransferData.memo
          type: string
        payeeId:
          description: field.NftTransferData.payeeId
          format: int64
          type: integer
        payeeAddress:
          description: field.NftTransferData.payeeAddress
          type: string
        blockIdInfo:
          $ref: '#/components/schemas/BlockIdInfo'
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - accountId
      - amount
      - createdAt
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - memo
      - nftData
      - owner
      - payeeAddress
      - payeeId
      - requestId
      - status
      - txHash
      - updatedAt
      type: object
    GetUserNftMintsResponse:
      description: model.GetUserNftMintsResponse.description
      example:
        mints:
        - owner: owner
          amount: amount
          memo: memo
          minterAddress: minterAddress
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 1
          feeAmount: feeAmount
          createdAt: 5
          requestId: 6
          nftData: nftData
          id: 0
          txHash: txHash
          hash: hash
          status: status
          updatedAt: 5
          minterId: 2
        - owner: owner
          amount: amount
          memo: memo
          minterAddress: minterAddress
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 1
          feeAmount: feeAmount
          createdAt: 5
          requestId: 6
          nftData: nftData
          id: 0
          txHash: txHash
          hash: hash
          status: status
          updatedAt: 5
          minterId: 2
        totalNum: 100
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        mints:
          description: field.GetUserNftMintsResponse.NftMintDataList
          items:
            $ref: '#/components/schemas/NftMintData'
          type: array
      required:
      - mints
      - totalNum
      type: object
    NftMintData:
      description: model.NftMintData.description
      example:
        owner: owner
        amount: amount
        memo: memo
        minterAddress: minterAddress
        feeTokenSymbol: feeTokenSymbol
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        blockIdInfo:
          blockId: 2
          indexInBlock: 7
        accountId: 1
        feeAmount: feeAmount
        createdAt: 5
        requestId: 6
        nftData: nftData
        id: 0
        txHash: txHash
        hash: hash
        status: status
        updatedAt: 5
        minterId: 2
      properties:
        id:
          description: field.NftMintData.id
          format: int64
          type: integer
        requestId:
          description: field.NftMintData.requestId
          format: int64
          type: integer
        hash:
          description: field.NftMintData.hash
          type: string
        txHash:
          description: field.NftMintData.txHash
          type: string
        accountId:
          description: field.NftMintData.accountId
          format: int64
          type: integer
        owner:
          description: field.NftMintData.owner
          type: string
        status:
          description: field.NftMintData.status
          type: string
        nftData:
          description: field.NftMintData.nftData
          type: string
        amount:
          description: field.NftMintData.amount
          type: string
        feeTokenSymbol:
          description: field.NftMintData.feeTokenSymbol
          type: string
        feeAmount:
          description: field.NftMintData.feeAmount
          type: string
        createdAt:
          description: field.NftMintData.createdAt
          format: int64
          type: integer
        updatedAt:
          description: field.NftMintData.updatedAt
          format: int64
          type: integer
        memo:
          description: field.NftMintData.memo
          type: string
        minterId:
          description: field.NftMintData.minterId
          format: int64
          type: integer
        minterAddress:
          description: field.NftMintData.minterAddress
          type: string
        blockIdInfo:
          $ref: '#/components/schemas/BlockIdInfo'
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - accountId
      - amount
      - createdAt
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - memo
      - minterAddress
      - minterId
      - nftData
      - owner
      - requestId
      - status
      - txHash
      - updatedAt
      type: object
    GetUserNftDepositResponse:
      description: model.GetUserNftDepositResponse.description
      example:
        totalNum: 100
        deposits:
        - owner: owner
          amount: "10000000000000"
          depositFrom: depositFrom
          memo: memo
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 10001
          feeAmount: "1000000000000"
          createdAt: 1627629262706
          requestId: 1
          nftData: nftData
          depositFromAccountId: 10001
          id: 1
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          status: status
          updatedAt: 1627629262706
        - owner: owner
          amount: "10000000000000"
          depositFrom: depositFrom
          memo: memo
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          accountId: 10001
          feeAmount: "1000000000000"
          createdAt: 1627629262706
          requestId: 1
          nftData: nftData
          depositFromAccountId: 10001
          id: 1
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          status: status
          updatedAt: 1627629262706
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        deposits:
          description: field.GetUserNftDepositResponse.NftDepositData
          items:
            $ref: '#/components/schemas/NftDepositData'
          type: array
      required:
      - deposits
      - totalNum
      type: object
    NftDepositData:
      description: model.NftDepositData.description
      example:
        owner: owner
        amount: "10000000000000"
        depositFrom: depositFrom
        memo: memo
        feeTokenSymbol: feeTokenSymbol
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        blockIdInfo:
          blockId: 2
          indexInBlock: 7
        accountId: 10001
        feeAmount: "1000000000000"
        createdAt: 1627629262706
        requestId: 1
        nftData: nftData
        depositFromAccountId: 10001
        id: 1
        txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        status: status
        updatedAt: 1627629262706
      properties:
        id:
          description: field.NftDepositData.id
          example: 1
          format: int64
          type: integer
        requestId:
          description: field.NftDepositData.requestId
          example: 1
          format: int64
          type: integer
        hash:
          description: field.NftDepositData.hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        txHash:
          description: field.NftDepositData.txHash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        accountId:
          description: field.NftDepositData.accountId
          example: 10001
          format: int64
          type: integer
        owner:
          description: field.NftDepositData.owner
          type: string
        status:
          description: field.NftDepositData.status
          type: string
        nftData:
          description: field.NftDepositData.nftData
          type: string
        amount:
          description: field.NftDepositData.amount
          example: "10000000000000"
          type: string
        feeTokenSymbol:
          description: field.NftDepositData.feeTokenSymbol
          type: string
        feeAmount:
          description: field.NftDepositData.feeAmount
          example: "1000000000000"
          type: string
        createdAt:
          description: field.NftDepositData.createdAt
          example: 1627629262706
          format: int64
          type: integer
        updatedAt:
          description: field.NftDepositData.updatedAt
          example: 1627629262706
          format: int64
          type: integer
        memo:
          description: field.NftDepositData.memo
          type: string
        depositFrom:
          description: field.NftDepositData.depositFrom
          type: string
        depositFromAccountId:
          description: field.NftDepositData.depositFromAccountId
          example: 10001
          format: int64
          type: integer
        blockIdInfo:
          $ref: '#/components/schemas/BlockIdInfo'
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - accountId
      - amount
      - createdAt
      - depositFrom
      - depositFromAccountId
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - nftData
      - owner
      - requestId
      - status
      - txHash
      - updatedAt
      type: object
    GetUserNftWithdrawalResponse:
      description: model.GetUserNftWithdrawalResponse.description
      example:
        totalNum: 100
        withdrawals:
        - owner: owner
          amount: "100000000000"
          isFast: false
          memo: memo
          distributeHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          fastWithdrawStatus: fastWithdrawStatus
          accountId: 10000
          feeAmount: "1000000000000"
          createdAt: 1627629262706
          requestId: 6
          nftData: nftData
          recipient: recipient
          id: 0
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          status: status
          updatedAt: 1627629262706
        - owner: owner
          amount: "100000000000"
          isFast: false
          memo: memo
          distributeHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          feeTokenSymbol: feeTokenSymbol
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          blockIdInfo:
            blockId: 2
            indexInBlock: 7
          fastWithdrawStatus: fastWithdrawStatus
          accountId: 10000
          feeAmount: "1000000000000"
          createdAt: 1627629262706
          requestId: 6
          nftData: nftData
          recipient: recipient
          id: 0
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          status: status
          updatedAt: 1627629262706
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        withdrawals:
          description: field.GetUserNftWithdrawalResponse.NftWithdrawalDataList
          items:
            $ref: '#/components/schemas/NftWithdrawalData'
          type: array
      required:
      - totalNum
      - withdrawals
      type: object
    NftWithdrawalData:
      description: model.NftWithdrawalData.description
      example:
        owner: owner
        amount: "100000000000"
        isFast: false
        memo: memo
        distributeHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        feeTokenSymbol: feeTokenSymbol
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        blockIdInfo:
          blockId: 2
          indexInBlock: 7
        fastWithdrawStatus: fastWithdrawStatus
        accountId: 10000
        feeAmount: "1000000000000"
        createdAt: 1627629262706
        requestId: 6
        nftData: nftData
        recipient: recipient
        id: 0
        txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        status: status
        updatedAt: 1627629262706
      properties:
        id:
          description: field.NftWithdrawalData.id
          format: int64
          type: integer
        requestId:
          description: field.NftWithdrawalData.requestId
          format: int64
          type: integer
        hash:
          description: field.NftWithdrawalData.hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        txHash:
          description: field.NftWithdrawalData.txHash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        accountId:
          description: field.NftWithdrawalData.accountId
          example: 10000
          format: int64
          type: integer
        owner:
          description: field.NftWithdrawalData.owner
          type: string
        status:
          description: field.NftWithdrawalData.status
          type: string
        nftData:
          description: field.NftWithdrawalData.nftData
          type: string
        amount:
          description: field.NftWithdrawalData.amount
          example: "100000000000"
          type: string
        feeTokenSymbol:
          description: field.NftWithdrawalData.feeTokenSymbol
          type: string
        feeAmount:
          description: field.NftWithdrawalData.feeAmount
          example: "1000000000000"
          type: string
        createdAt:
          description: field.NftWithdrawalData.createdAt
          example: 1627629262706
          format: int64
          type: integer
        updatedAt:
          description: field.NftWithdrawalData.updatedAt
          example: 1627629262706
          format: int64
          type: integer
        memo:
          description: field.NftWithdrawalData.memo
          type: string
        recipient:
          description: field.NftWithdrawalData.recipient
          type: string
        distributeHash:
          description: field.NftWithdrawalData.distributeHash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        fastWithdrawStatus:
          description: field.NftWithdrawalData.fastWithdrawStatus
          type: string
        isFast:
          description: field.NftWithdrawalData.isFast
          example: false
          type: boolean
        blockIdInfo:
          $ref: '#/components/schemas/BlockIdInfo'
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - accountId
      - createdAt
      - distributeHash
      - fastWithdrawStatus
      - feeAmount
      - hash
      - id
      - isFast
      - owner
      - recipient
      - requestId
      - status
      - txHash
      - updatedAt
      type: object
    GetUserNftFeeRatesResponse:
      description: The user fee rates result in NFT market
      example:
        feeRate:
          rate: 20
          nftTokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        gasPrice: "10000000000"
      properties:
        feeRate:
          $ref: '#/components/schemas/NftFeeRate'
        gasPrice:
          description: field.GetUserNftFeeRatesResponse.gasPrice
          example: "10000000000"
          type: string
      type: object
    NftFeeRate:
      description: The data structure of user query market fee rate
      example:
        rate: 20
        nftTokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
      properties:
        nftTokenAddress:
          description: field.NftFeeRate.nftTokenAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        rate:
          description: field.NftFeeRate.rate
          example: 20
          format: int32
          type: integer
      required:
      - nftTokenAddress
      - rate
      type: object
    GetUserNftTxsResponse:
      description: model.GetUserNftTxsResponse.description
      example:
        totalNum: 100
        transactions:
        - amount: "1000000000000000000"
          senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          metadata:
            nftType: 1
            tokenAddress: tokenAddress
            extra:
              externalUrl: externalUrl
              backgroundColor: backgroundColor
              animationUrl: animationUrl
              minter: minter
              imageData: imageData
              youtubeUrl: youtubeUrl
              attributes: attributes
            nftId: nftId
            imageSize:
              key: imageSize
            uri: uri
            base:
              localization: localization
              image: image
              decimals: 0
              name: name
              description: description
              properties: properties
            status: 6
            network: 5
          receiver: 1
          memo: 100%
          feeTokenSymbol: LRC
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          minterInfo:
            accountId: 0
            minter: minter
            originalMinter: originalMinter
          feeAmount: "1000000000000000"
          requestId: 1
          nftTxType: deposit
          nftStatusInfo:
            isCounterFactualNFT: true
            nftType: nftType
            tokenAddress: tokenAddress
            deploymentStatus: deploymentStatus
            nftId: nftId
            isDeployAndWithdrawal: true
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          withdrawalInfo:
            fastStatus: fastStatus
            recipient: recipient
            distributeHash: distributeHash
          id: 1
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
        - amount: "1000000000000000000"
          senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          metadata:
            nftType: 1
            tokenAddress: tokenAddress
            extra:
              externalUrl: externalUrl
              backgroundColor: backgroundColor
              animationUrl: animationUrl
              minter: minter
              imageData: imageData
              youtubeUrl: youtubeUrl
              attributes: attributes
            nftId: nftId
            imageSize:
              key: imageSize
            uri: uri
            base:
              localization: localization
              image: image
              decimals: 0
              name: name
              description: description
              properties: properties
            status: 6
            network: 5
          receiver: 1
          memo: 100%
          feeTokenSymbol: LRC
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          minterInfo:
            accountId: 0
            minter: minter
            originalMinter: originalMinter
          feeAmount: "1000000000000000"
          requestId: 1
          nftTxType: deposit
          nftStatusInfo:
            isCounterFactualNFT: true
            nftType: nftType
            tokenAddress: tokenAddress
            deploymentStatus: deploymentStatus
            nftId: nftId
            isDeployAndWithdrawal: true
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          withdrawalInfo:
            fastStatus: fastStatus
            recipient: recipient
            distributeHash: distributeHash
          id: 1
          txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          status: processing
          timestamp: 1578572292000
          updatedAt: 1578572292000
      properties:
        totalNum:
          description: field.totalNum.description
          example: 100
          format: int64
          type: integer
        transactions:
          description: field.GetUserNftTxsResponse.transactions
          items:
            $ref: '#/components/schemas/NftTxData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    GetUserNftTxsResponseV2:
      description: model.GetUserNftTxsResponseV2.description
      example:
        data:
          totalNum: 100
          transactions:
          - amount: "1000000000000000000"
            senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            metadata:
              nftType: 1
              tokenAddress: tokenAddress
              extra:
                externalUrl: externalUrl
                backgroundColor: backgroundColor
                animationUrl: animationUrl
                minter: minter
                imageData: imageData
                youtubeUrl: youtubeUrl
                attributes: attributes
              nftId: nftId
              imageSize:
                key: imageSize
              uri: uri
              base:
                localization: localization
                image: image
                decimals: 0
                name: name
                description: description
                properties: properties
              status: 6
              network: 5
            receiver: 1
            memo: 100%
            feeTokenSymbol: LRC
            storageInfo:
              accountId: 1
              tokenId: 5
              storageId: 5
            receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            minterInfo:
              accountId: 0
              minter: minter
              originalMinter: originalMinter
            feeAmount: "1000000000000000"
            requestId: 1
            nftTxType: deposit
            nftStatusInfo:
              isCounterFactualNFT: true
              nftType: nftType
              tokenAddress: tokenAddress
              deploymentStatus: deploymentStatus
              nftId: nftId
              isDeployAndWithdrawal: true
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            withdrawalInfo:
              fastStatus: fastStatus
              recipient: recipient
              distributeHash: distributeHash
            id: 1
            txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
          - amount: "1000000000000000000"
            senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            metadata:
              nftType: 1
              tokenAddress: tokenAddress
              extra:
                externalUrl: externalUrl
                backgroundColor: backgroundColor
                animationUrl: animationUrl
                minter: minter
                imageData: imageData
                youtubeUrl: youtubeUrl
                attributes: attributes
              nftId: nftId
              imageSize:
                key: imageSize
              uri: uri
              base:
                localization: localization
                image: image
                decimals: 0
                name: name
                description: description
                properties: properties
              status: 6
              network: 5
            receiver: 1
            memo: 100%
            feeTokenSymbol: LRC
            storageInfo:
              accountId: 1
              tokenId: 5
              storageId: 5
            receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
            minterInfo:
              accountId: 0
              minter: minter
              originalMinter: originalMinter
            feeAmount: "1000000000000000"
            requestId: 1
            nftTxType: deposit
            nftStatusInfo:
              isCounterFactualNFT: true
              nftType: nftType
              tokenAddress: tokenAddress
              deploymentStatus: deploymentStatus
              nftId: nftId
              isDeployAndWithdrawal: true
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            withdrawalInfo:
              fastStatus: fastStatus
              recipient: recipient
              distributeHash: distributeHash
            id: 1
            txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
            status: processing
            timestamp: 1578572292000
            updatedAt: 1578572292000
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/GetUserNftTxsResponse'
      required:
      - data
      - resultInfo
      type: object
    MinterInfo:
      example:
        accountId: 0
        minter: minter
        originalMinter: originalMinter
      properties:
        accountId:
          format: int64
          type: integer
        minter:
          type: string
        originalMinter:
          type: string
      required:
      - accountId
      - minter
      type: object
    NftStatusInfo:
      example:
        isCounterFactualNFT: true
        nftType: nftType
        tokenAddress: tokenAddress
        deploymentStatus: deploymentStatus
        nftId: nftId
        isDeployAndWithdrawal: true
      properties:
        deploymentStatus:
          type: string
        isCounterFactualNFT:
          type: boolean
        nftType:
          type: string
        tokenAddress:
          type: string
        nftId:
          type: string
        isDeployAndWithdrawal:
          type: boolean
      required:
      - deploymentStatus
      - isCounterFactualNFT
      - isDeployAndWithdrawal
      - nftId
      - nftType
      - tokenAddress
      type: object
    NftTxData:
      description: NFT transaction detail
      example:
        amount: "1000000000000000000"
        senderAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
        metadata:
          nftType: 1
          tokenAddress: tokenAddress
          extra:
            externalUrl: externalUrl
            backgroundColor: backgroundColor
            animationUrl: animationUrl
            minter: minter
            imageData: imageData
            youtubeUrl: youtubeUrl
            attributes: attributes
          nftId: nftId
          imageSize:
            key: imageSize
          uri: uri
          base:
            localization: localization
            image: image
            decimals: 0
            name: name
            description: description
            properties: properties
          status: 6
          network: 5
        receiver: 1
        memo: 100%
        feeTokenSymbol: LRC
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        receiverAddress: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
        minterInfo:
          accountId: 0
          minter: minter
          originalMinter: originalMinter
        feeAmount: "1000000000000000"
        requestId: 1
        nftTxType: deposit
        nftStatusInfo:
          isCounterFactualNFT: true
          nftType: nftType
          tokenAddress: tokenAddress
          deploymentStatus: deploymentStatus
          nftId: nftId
          isDeployAndWithdrawal: true
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        withdrawalInfo:
          fastStatus: fastStatus
          recipient: recipient
          distributeHash: distributeHash
        id: 1
        txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        hash: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
        status: processing
        timestamp: 1578572292000
        updatedAt: 1578572292000
      properties:
        id:
          description: Unique ID
          example: 1
          format: int64
          type: integer
        requestId:
          description: Request Id
          example: 1
          format: int64
          type: integer
        hash:
          description: hash
          example: 0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632
          type: string
        txHash:
          description: Transaction hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        nftTxType:
          description: User transaction type
          enum:
          - mint
          - deposit
          - transfer
          - withdraw
          example: deposit
          type: string
        nftData:
          description: The NFT tokens nftData in this transaction
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        amount:
          description: Amount requested by the user
          example: "1000000000000000000"
          type: string
        feeTokenSymbol:
          description: fee Token Id
          example: LRC
          type: string
        feeAmount:
          description: Fee amount in wei
          example: "1000000000000000"
          type: string
        status:
          description: Current transaction status
          enum:
          - pending
          - processing
          - processed
          - received
          - failed
          example: processing
          type: string
        timestamp:
          description: Create time
          example: 1578572292000
          format: int64
          type: integer
        updatedAt:
          description: Update time
          example: 1578572292000
          format: int64
          type: integer
        memo:
          description: User memo
          example: 100%
          type: string
        receiverAddress:
          description: The transfer receiver's address
          example: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          type: string
        senderAddress:
          description: field.NftTxData.senderAddress
          example: 0x0306b9d5c9Ed358FC7b77780bACD15398D242f26
          type: string
        receiver:
          description: Receiver ID
          example: 1
          format: int64
          type: integer
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
        withdrawalInfo:
          $ref: '#/components/schemas/WithdrawalInfo'
        minterInfo:
          $ref: '#/components/schemas/MinterInfo'
        nftStatusInfo:
          $ref: '#/components/schemas/NftStatusInfo'
        metadata:
          $ref: '#/components/schemas/NftMetadataL2Info'
      required:
      - amount
      - feeAmount
      - feeTokenSymbol
      - hash
      - id
      - memo
      - nftData
      - nftTxType
      - status
      - timestamp
      - txHash
      - updatedAt
      type: object
    WithdrawalInfo:
      example:
        fastStatus: fastStatus
        recipient: recipient
        distributeHash: distributeHash
      properties:
        recipient:
          type: string
        fastStatus:
          type: string
        distributeHash:
          type: string
      required:
      - distributeHash
      - fastStatus
      - recipient
      type: object
    TimestampV3:
      description: model.timestampV3.description
      example:
        timestamp: 1584683483382
      properties:
        timestamp:
          description: Current time in millisecond
          example: 1584683483382
          format: int64
          type: integer
      type: object
    GasAmountLimitV3:
      description: Contains information about the gas amounts required by ETH L1 requests.
      example:
        deposit: "1000000000000000"
        distribution: "1000000000000000"
      properties:
        distribution:
          description: The gas amount for withdrawal
          example: "1000000000000000"
          type: string
        deposit:
          description: The gas amount for deposit
          example: "1000000000000000"
          type: string
      required:
      - deposit
      - distribution
      type: object
    TokenInfoV3:
      description: Token Detail
      example:
        symbol: LRC
        address: 0x97241525fe425C90eBe5A41127816dcFA5954b06
        tokenId: 2
        precision: 6
        gasAmounts:
          deposit: "1000000000000000"
          distribution: "1000000000000000"
        type: ERC20
        enabled: true
        orderAmounts:
          maximum: "1000000000000000000"
          minimum: "10000000000000000"
          dust: "1000000000000000"
        precisionForOrder: 6
        luckyTokenAmounts:
          maximum: "1000000000000000000"
          minimum: "10000000000000000"
          dust: "1000000000000000"
        decimals: 18
        name: Loopring
        fastWithdrawLimit: "1000000000000000"
      properties:
        type:
          description: Token Type
          enum:
          - ERC20
          - ETH
          example: ERC20
          type: string
        tokenId:
          description: Token's numeric ID
          example: 2
          format: int32
          type: integer
        symbol:
          description: Token symbol
          example: LRC
          type: string
        name:
          description: Token name
          example: Loopring
          type: string
        address:
          description: Token ERC20 contract address
          example: 0x97241525fe425C90eBe5A41127816dcFA5954b06
          type: string
        decimals:
          description: Token decimals
          example: 18
          format: int32
          type: integer
        precision:
          description: "Max decimals that relayer uses for the token, smaller amount\
            \ will be treated as zero."
          example: 6
          format: int32
          type: integer
        precisionForOrder:
          description: "Max decimals that relayer uses for the token, smaller amount\
            \ will be treated as zero."
          example: 6
          format: int32
          type: integer
        orderAmounts:
          $ref: '#/components/schemas/OrderAmountsV3'
        luckyTokenAmounts:
          $ref: '#/components/schemas/OrderAmountsV3'
        fastWithdrawLimit:
          description: The maximum amount for single fast withdrawal
          example: "1000000000000000"
          type: string
        gasAmounts:
          $ref: '#/components/schemas/GasAmountLimitV3'
        enabled:
          description: Whether the token is currently enabled for deposits and withdrawals.
          example: true
          type: boolean
      required:
      - address
      - decimals
      - enabled
      - fastWithdrawLimit
      - gasAmounts
      - luckyTokenAmounts
      - name
      - orderAmounts
      - precision
      - precisionForOrder
      - symbol
      - tokenId
      - type
      type: object
    GetMarketsResponseV3:
      description: model.GetMarketsResponseV3.description
      example:
        markets:
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: false
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: false
      properties:
        markets:
          description: Markets list
          items:
            $ref: '#/components/schemas/MarketInfo'
          type: array
      required:
      - markets
      type: object
    AmmPoolInfoV3:
      description: AMM pool info
      example:
        market: AMM-LRC-USDT
        createdAt: "1609466400000"
        address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
        feeBips: 6
        name: LRC-USDT-Pool-1
        precisions:
          amount: 6
          price: 6
        tokens:
          pooled: "[2,3,5]"
          lp: 0
        version: 1.0.0
        status: 7
      properties:
        name:
          description: "AMM pool name, used to calculate domainSeparator of EIP712\
            \ hash if use chooses ECDSA sign path."
          example: LRC-USDT-Pool-1
          type: string
        market:
          description: "AMM pool market name, can be used to query market related\
            \ info like ticker, etc"
          example: AMM-LRC-USDT
          type: string
        address:
          description: AMM pool address
          example: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          type: string
        version:
          description: AMM pool contract version
          example: 1.0.0
          type: string
        tokens:
          $ref: '#/components/schemas/AmmPoolTokens'
        feeBips:
          description: AMM fee bips
          example: 6
          format: int32
          type: integer
        precisions:
          $ref: '#/components/schemas/AmmPoolPrecisions'
        createdAt:
          description: AMM pool online date
          example: "1609466400000"
          type: string
        status:
          description: AMM market status
          example: 7
          format: int32
          type: integer
      required:
      - address
      - createdAt
      - feeBips
      - market
      - name
      - precisions
      - status
      - tokens
      - version
      type: object
    AmmPoolPrecisions:
      description: The precision requirement of a AMM pool
      example:
        amount: 6
        price: 6
      properties:
        price:
          description: The price precision requirement of a AMM pool
          example: 6
          format: int32
          type: integer
        amount:
          description: The amount precision requirement of a AMM pool
          example: 6
          format: int32
          type: integer
      required:
      - amount
      - price
      type: object
    AmmPoolTokens:
      description: Wrapper object containing information about the tokens in the pool
      example:
        pooled: "[2,3,5]"
        lp: 0
      properties:
        pooled:
          description: "An array containing the unique identifiers of those tokens\
            \ that are currently in the pool, seq matters as most requests ask for\
            \ the same sequence."
          example: "[2,3,5]"
          items:
            properties: {}
            type: object
          type: array
        lp:
          description: "The unique identifier of the pool-specific LP token. This\
            \ token is minted when supplying liquidity to the pool, and represents\
            \ liquidity stakes in it"
          example: 0
          format: int32
          type: integer
      required:
      - lp
      - pooled
      type: object
    GetAmmPoolsResponse:
      description: model.GetAmmPoolsResponse.description
      example:
        pools:
        - market: AMM-LRC-USDT
          createdAt: "1609466400000"
          address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          feeBips: 6
          name: LRC-USDT-Pool-1
          precisions:
            amount: 6
            price: 6
          tokens:
            pooled: "[2,3,5]"
            lp: 0
          version: 1.0.0
          status: 7
        - market: AMM-LRC-USDT
          createdAt: "1609466400000"
          address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          feeBips: 6
          name: LRC-USDT-Pool-1
          precisions:
            amount: 6
            price: 6
          tokens:
            pooled: "[2,3,5]"
            lp: 0
          version: 1.0.0
          status: 7
      properties:
        pools:
          description: AMM pool list
          items:
            $ref: '#/components/schemas/AmmPoolInfoV3'
          type: array
      required:
      - pools
      type: object
    OriginTransferRequestV3:
      description: Submit internal transfer params
      example:
        payPayeeUpdateAccount: false
        clientId: hebao1234567
        payeeAddr: 0xCDEF
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        payerId: 1
        memo: Air Drop
        maxFee:
          volume: "1000000000000"
          tokenId: 0
        token:
          volume: "1000000000000"
          tokenId: 0
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        payerAddr: 0xABCD
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1598431481
        exchange: "1"
        payeeId: 1
        storageId: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        payerId:
          description: payer account ID
          example: 1
          format: int64
          type: integer
        payerAddr:
          description: payer account address
          example: 0xABCD
          type: string
        payeeId:
          description: payee account ID
          example: 1
          format: int64
          type: integer
        payeeAddr:
          description: payer account address
          example: 0xCDEF
          type: string
        token:
          $ref: '#/components/schemas/TokenVolumeV3'
        maxFee:
          $ref: '#/components/schemas/TokenVolumeV3'
        storageId:
          description: offchain Id
          example: 1
          format: int64
          type: integer
        validUntil:
          description: Timestamp for order to become invalid
          example: 1598431481
          format: int32
          type: integer
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSignature:
          description: eddsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: ecdsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        hashApproved:
          description: An approved hash string which was already submitted on eth
            mainnet
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        memo:
          description: transfer memo
          example: Air Drop
          type: string
        clientId:
          description: A user-defined id
          example: hebao1234567
          type: string
        payPayeeUpdateAccount:
          description: field.OriginTransferRequestV3.payPayeeUpdateAccount
          example: false
          type: boolean
      required:
      - exchange
      - maxFee
      - payeeAddr
      - payeeId
      - payerAddr
      - payerId
      - storageId
      - token
      - validUntil
      type: object
    TokenVolumeV3:
      description: Wrapper object used to describe a token associated with a certain
        quantity.
      example:
        volume: "1000000000000"
        tokenId: 0
      properties:
        tokenId:
          description: The Loopring's token identifier.
          example: 0
          format: int32
          type: integer
        volume:
          description: The volume of the token
          example: "1000000000000"
          type: string
      required:
      - tokenId
      - volume
      type: object
    PublicKey:
      description: Describes the users public key which is a point of the selected
        eclipse curve.
      example:
        x: 0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f
        "y": 0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c
      properties:
        x:
          description: The public keys x part.
          example: 0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f
          type: string
        "y":
          description: The public keys y part.
          example: 0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c
          type: string
      required:
      - x
      - "y"
      type: object
    UpdateAccountRequestV3:
      description: Params to update account EDDSA key
      example:
        owner: 0xB4A70168340C75119523019f79F5Ffd9c60DceC7
        accountId: 1
        keySeed: "Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\
          \ with key nonce: 103"
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1583183141
        exchange: "1"
        publicKey:
          x: 0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f
          "y": 0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c
        maxFee:
          volume: "1000000000000"
          tokenId: 0
        nonce: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        owner:
          description: owner address
          example: 0xB4A70168340C75119523019f79F5Ffd9c60DceC7
          type: string
        accountId:
          description: user account ID
          example: 1
          format: int64
          type: integer
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        maxFee:
          $ref: '#/components/schemas/TokenVolumeV3'
        validUntil:
          description: Timestamp for order to become invalid
          example: 1583183141
          format: int32
          type: integer
        nonce:
          description: Nonce of users exchange account that used in off-chain requests.
          example: 1
          format: int32
          type: integer
        keySeed:
          description: "KeySeed of users L2 eddsaKey, the L2 key should be generated\
            \ from this seed, i.e., L2_EDDSA_KEY=eth.sign(keySeed). Otherwise, user\
            \ may meet error in login loopring DEX"
          example: "Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\
            \ with key nonce: 103"
          type: string
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSignature:
          description: eddsa signature of this request
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: ecdsa signature of this request
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        hashApproved:
          description: An approved hash string which was submitted on eth mainnet
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
      required:
      - accountId
      - exchange
      - maxFee
      - nonce
      - owner
      - publicKey
      - validUntil
      type: object
    OrderDetailV3:
      description: Response details of order
      example:
        market: LRC-ETH
        orderType: LIMIT_ORDER
        side: SELL
        price: "0.01987608"
        clientOrderId: "200310143135081332"
        volumes:
          quoteFilled: "0"
          baseFilled: "0"
          fee: "0"
          quoteAmount: "0"
          baseAmount: "0"
        validity:
          start: 0
          end: 0
        hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
        storageInfo:
          accountId: 1
          tokenId: 5
          storageId: 5
        tradeChannel: ORDER_BOOK
        status: processing
      properties:
        hash:
          description: Order hash
          example: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          type: string
        clientOrderId:
          description: Order's client-side ID
          example: "200310143135081332"
          type: string
        side:
          description: Order's side
          enum:
          - SELL
          - BUY
          example: SELL
          type: string
        market:
          description: Trading pair
          example: LRC-ETH
          type: string
        price:
          description: Order price
          example: "0.01987608"
          type: string
        volumes:
          $ref: '#/components/schemas/OrderVolumesV3'
        validity:
          $ref: '#/components/schemas/OrderValidityV3'
        orderType:
          description: "Whether the order has to be treated as a limit, maker, or\
            \ taker operation."
          enum:
          - LIMIT_ORDER
          - TAKER_ONLY
          - MAKER_ONLY
          example: LIMIT_ORDER
          type: string
        tradeChannel:
          description: "Order channel, can be ORDER_BOOK, AMM_POOL, MIXED"
          enum:
          - ORDER_BOOK
          - AMM_POOL
          - MIXED
          example: ORDER_BOOK
          type: string
        status:
          description: Order status
          enum:
          - processing
          - processed
          - cancelling
          - cancelled
          - expired
          - waiting
          example: processing
          type: string
        storageInfo:
          $ref: '#/components/schemas/StorageInfo'
      required:
      - clientOrderId
      - hash
      - market
      - orderType
      - price
      - side
      - status
      - tradeChannel
      - validity
      - volumes
      type: object
    OrderValidityV3:
      description: Wraps data regarding time validity constraints (since and until
      example:
        start: 0
        end: 0
      properties:
        start:
          description: Timestamp from when the order officially becomes valid and
            fillable
          example: 0
          format: int64
          type: integer
        end:
          description: Timestamp from when the order ceases to be valid and fillable
          example: 0
          format: int64
          type: integer
      required:
      - end
      - start
      type: object
    OrderVolumesV3:
      description: "Wraps data regarding the orders volumes (base, quote, and filled.)"
      example:
        quoteFilled: "0"
        baseFilled: "0"
        fee: "0"
        quoteAmount: "0"
        baseAmount: "0"
      properties:
        baseAmount:
          description: The amount of base tokens involved in the order.
          example: "0"
          type: string
        quoteAmount:
          description: The amount of quote tokens involved in the order.
          example: "0"
          type: string
        baseFilled:
          description: The amount of requested base tokens filled in the order.
          example: "0"
          type: string
        quoteFilled:
          description: The amount of requested quote tokens filled in the order.
          example: "0"
          type: string
        fee:
          description: "The amount of quote or base token amount used to pay for the\
            \ orders fee. Whether this data refers to the base or quote token, one\
            \ can find out by looking at the orders side"
          example: "0"
          type: string
      required:
      - baseAmount
      - baseFilled
      - fee
      - quoteAmount
      - quoteFilled
      type: object
    OrdersDetailV3:
      description: Response orders
      example:
        totalNum: 10
        orders:
        - market: LRC-ETH
          orderType: LIMIT_ORDER
          side: SELL
          price: "0.01987608"
          clientOrderId: "200310143135081332"
          volumes:
            quoteFilled: "0"
            baseFilled: "0"
            fee: "0"
            quoteAmount: "0"
            baseAmount: "0"
          validity:
            start: 0
            end: 0
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          tradeChannel: ORDER_BOOK
          status: processing
        - market: LRC-ETH
          orderType: LIMIT_ORDER
          side: SELL
          price: "0.01987608"
          clientOrderId: "200310143135081332"
          volumes:
            quoteFilled: "0"
            baseFilled: "0"
            fee: "0"
            quoteAmount: "0"
            baseAmount: "0"
          validity:
            start: 0
            end: 0
          hash: 0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf
          storageInfo:
            accountId: 1
            tokenId: 5
            storageId: 5
          tradeChannel: ORDER_BOOK
          status: processing
      properties:
        totalNum:
          description: Total number of orders
          example: 10
          format: int64
          type: integer
        orders:
          description: List of order
          items:
            $ref: '#/components/schemas/OrderDetailV3'
          type: array
      required:
      - totalNum
      type: object
    DepthV3:
      description: Order book info
      example:
        market: LRC-ETH
        asks: "[]"
        bids: "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]"
        version: 147
        timestamp: 432312312
      properties:
        version:
          description: An ever-increasing numeric version number that reflects its
            change history.
          example: 147
          format: int64
          type: integer
        timestamp:
          description: Update timestamp
          example: 432312312
          format: int64
          type: integer
        market:
          description: Trading pair
          example: LRC-ETH
          type: string
        bids:
          description: "Array of bids, each item is an array that contains the price,\
            \ size, volume and the number of orders aggregated at this price."
          example: "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]"
          items:
            items:
              type: string
            type: array
          type: array
        asks:
          description: "Array of asks, each item is an array that contains the price,\
            \ size, volume and the number of orders aggregated at this price."
          example: "[]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - asks
      - bids
      - market
      - timestamp
      - version
      type: object
    GetTickerResponseV3:
      description: model.getTicker.description
      example:
        tickers: "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\"\
          ,\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]]"
      properties:
        tickers:
          description: "Each item in the list is an array that contains the following:\
            \ trading pair ID, update timestamp, base token volume, quote token volume,\
            \ open-price, highest price, lowest price, closing price, number of trades,\
            \ highest bid price, lowest ask price, base fee amount, quote fee amount.\
            \ All values are returned as strings. Fee amount is for AMM only."
          example: "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"\
            1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    GetPriceResponseV3:
      description: model.GetPriceResponseV3
      example:
        prices:
        - symbol: LRC
          price: "0"
          updatedAt: 0
        - symbol: LRC
          price: "0"
          updatedAt: 0
      properties:
        prices:
          description: field.GetPriceResponseV3.prices
          items:
            $ref: '#/components/schemas/PriceV3'
          type: array
      type: object
    PriceV3:
      description: Token fiat price
      example:
        symbol: LRC
        price: "0"
        updatedAt: 0
      properties:
        symbol:
          description: Token symbol
          example: LRC
          type: string
        price:
          description: Fiat price
          example: "0"
          type: string
        updatedAt:
          description: Last update timestamp
          example: 0
          format: int64
          type: integer
      required:
      - price
      - symbol
      - updatedAt
      type: object
    MarketTradesV3:
      description: model.marketTrades
      example:
        totalNum: 0
        trades: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]"
      properties:
        totalNum:
          description: The total number of trades in query result
          example: 0
          format: int64
          type: integer
        trades:
          description: "List of trades records, each trade record in the order of\
            \ the array is the trade time, record id, buying and selling direction,\
            \ volume, price, market, fees, blockId and indexInBlock"
          example: "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      required:
      - totalNum
      - trades
      type: object
    GetCandlestickResponseV3:
      description: The response of query Candlestick data
      example:
        candlesticks: "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"\
          0.5\",\"0.5\"]]"
      properties:
        candlesticks:
          description: "Candlestick data, each set of data includes start time, number\
            \ of transactions, opening price, closing price, highest price, lowest\
            \ price, total transaction volume of Base Token, total transaction volume\
            \ of Quote Token"
          example: "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\"\
            ,\"0.5\"]]"
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    DexAccountV3:
      description: User information
      example:
        owner: 0xABCD
        accountId: 10
        keySeed: "Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\
          \ with key nonce: 103"
        frozen: false
        publicKey:
          x: 0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f
          "y": 0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c
        keyNonce: 0
        nonce: 0
        tags: vip_1
      properties:
        accountId:
          description: Account ID
          example: 10
          format: int64
          type: integer
        owner:
          description: Ethereum address
          example: 0xABCD
          type: string
        frozen:
          description: "The frozen state of the account, true stands for frozen, if\
            \ the account is frozen, the user cant submit order."
          example: false
          type: boolean
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        tags:
          description: "Comma separated list of tags such as VIP levels, etc"
          example: vip_1
          type: string
        nonce:
          description: field.DexAccountV3.nonce
          example: 0
          format: int64
          type: integer
        keyNonce:
          description: "Nonce of users key change request, for backward compatible"
          example: 0
          format: int64
          type: integer
        keySeed:
          description: "KeySeed of users L2 eddsaKey, the L2 key should be generated\
            \ from this seed, i.e., L2_EDDSA_KEY=eth.sign(keySeed). Otherwise, user\
            \ may meet error in login loopring DEX"
          example: "Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\
            \ with key nonce: 103"
          type: string
      required:
      - accountId
      - frozen
      - keyNonce
      - keySeed
      - nonce
      - owner
      - publicKey
      type: object
    GetApiKeyResponseV3:
      description: The Response of updating user's ApiKey
      example:
        apiKey: 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt
      properties:
        apiKey:
          description: ApiKey
          example: 6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt
          type: string
      required:
      - apiKey
      type: object
    BalanceV3:
      description: Asset information
      example:
        total: "100"
        tokenId: 10
        pending:
          deposit: "10000000000000"
          withdraw: "10000000000000"
        locked: "100"
      properties:
        tokenId:
          description: Token ID
          example: 10
          format: int32
          type: integer
        total:
          description: Amount of the asset
          example: "100"
          type: string
        locked:
          description: The part of the total balance which is currently not liquid
            and not at the users disposal (because of pending withdrawals or orders
            for example)
          example: "100"
          type: string
        pending:
          $ref: '#/components/schemas/PendingBalance'
      required:
      - locked
      - pending
      - tokenId
      - total
      type: object
    OffChainWithdrawalRequestV3:
      example:
        owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        extraData: 0xABCD1234
        fastWithdrawalMode: false
        counterFactualInfo:
          walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        maxFee:
          volume: "1000000000000"
          tokenId: 0
        token:
          volume: "1000000000000"
          tokenId: 0
        accountId: 1003
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        hashApproved: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        validUntil: 1519217383
        exchange: "1"
        to: 0x12345678
        minGas: 1519217383
        storageId: 1
      properties:
        exchange:
          description: exchange address
          example: "1"
          type: string
        accountId:
          description: account ID
          example: 1003
          format: int64
          type: integer
        owner:
          description: account owner address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        token:
          $ref: '#/components/schemas/TokenVolumeV3'
        maxFee:
          $ref: '#/components/schemas/TokenVolumeV3'
        storageId:
          description: offchain ID
          example: 1
          format: int64
          type: integer
        validUntil:
          description: Timestamp for order to become invalid
          example: 1519217383
          format: int32
          type: integer
        minGas:
          description: "min gas for on-chain withdraw, Loopring exchange allocates\
            \ gas for each distribution, but people can also assign this min gas,\
            \ so Loopring have to allocate higher gas value for this specific distribution,\
            \ 0 means let loopring choose the reasonable gas"
          example: 1519217383
          format: int32
          type: integer
        to:
          description: withdraw to address
          example: 0x12345678
          type: string
        extraData:
          description: "extra data for complex withdraw mode, normally none"
          example: 0xABCD1234
          type: string
        fastWithdrawalMode:
          description: is fast withdraw mode
          example: false
          type: boolean
        counterFactualInfo:
          $ref: '#/components/schemas/CounterFactualInfo'
        eddsaSignature:
          description: eddsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: ecdsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
        hashApproved:
          description: An approved hash string which was already submitted on eth
            mainnet
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
      required:
      - accountId
      - exchange
      - maxFee
      - owner
      - storageId
      - to
      - token
      - validUntil
      type: object
    GetUserFeeRatesResponseData:
      example:
        feeRate:
          symbol: LRC-USDT
          makerRate: 20
          takerRate: 20
        gasPrice: "10000000000"
      properties:
        feeRate:
          $ref: '#/components/schemas/FeeRate'
        gasPrice:
          description: The gas price use to calculate fee rate
          example: "10000000000"
          type: string
      type: object
    GetMixedMarketsResponseV3:
      description: model.GetMarketsResponseV3.description
      example:
        markets:
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          createdAt: "1609466400000"
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: true
          status: 0
        - market: LRC-USDT
          quoteTokenId: 0
          precisionForPrice: 6
          createdAt: "1609466400000"
          orderbookAggLevels: 4
          baseTokenId: 2
          enabled: true
          status: 0
      properties:
        markets:
          description: Markets list
          items:
            $ref: '#/components/schemas/CombineMarketInfo'
          type: array
      required:
      - markets
      type: object
    AmmPoolJoinRequestV3:
      description: Join request which contains parameters and constraints that a user
        wants to see satisfied in order to join an AMM liquidity pool.
      example:
        owner: 0xe25c94ba036d91b48833acb637f719038f07372d
        storageIds: "1"
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        joinTokens:
          pooled: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
          minimumLp:
            volume: "1000000000000"
            tokenId: 0
        fee: "1000000000000000000"
        poolAddress: 0xe25c94ba036d91b48833acb637f719038f07372d
        validUntil: 1598431481
      properties:
        owner:
          description: The account owner adderss
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        poolAddress:
          description: AMM pool address to be joined
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        joinTokens:
          $ref: '#/components/schemas/AmmPoolJoinTokens'
        storageIds:
          description: Offchain request storage Id
          example: "1"
          type: string
        fee:
          description: fee of join request
          example: "1000000000000000000"
          type: string
        validUntil:
          description: Timestamp for order to become invalid
          example: 1598431481
          format: int32
          type: integer
        eddsaSignature:
          description: AMM join request eddsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: AMM join request ecdsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
      required:
      - fee
      - joinTokens
      - owner
      - poolAddress
      - storageIds
      - validUntil
      type: object
    AmmPoolJoinTokens:
      description: escribes an AMM join transaction
      example:
        pooled: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
        minimumLp:
          volume: "1000000000000"
          tokenId: 0
      properties:
        pooled:
          description: "Describes an amount of a specific token to be supplied to\
            \ the pool, the seq matters, and must be the same as the pool token list\
            \ returned by pool info"
          example: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
          items:
            $ref: '#/components/schemas/TokenVolumeV3'
          type: array
        minimumLp:
          $ref: '#/components/schemas/TokenVolumeV3'
      required:
      - minimumLp
      - pooled
      type: object
    AmmPoolExitRequestV3:
      example:
        owner: 0xe25c94ba036d91b48833acb637f719038f07372d
        ecdsaSignature: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
        eddsaSignature: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
        poolAddress: 0xe25c94ba036d91b48833acb637f719038f07372d
        exitTokens:
          unPooled: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
          burned: "1000000000"
        validUntil: 1598431481
        maxFee: "1000000000000000000"
        storageId: 1
      properties:
        owner:
          description: The account owner adderss
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        poolAddress:
          description: AMM pool address to be joined
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        exitTokens:
          $ref: '#/components/schemas/AmmPoolExitTokens'
        storageId:
          description: Offchain request storage Id
          example: 1
          format: int64
          type: integer
        maxFee:
          description: "Maximum fee of exit request, use the last in pool token by\
            \ default"
          example: "1000000000000000000"
          type: string
        validUntil:
          description: Timestamp for order to become invalid
          example: 1598431481
          format: int32
          type: integer
        eddsaSignature:
          description: AMM exit request eddsa signature
          example: 0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02
          type: string
        ecdsaSignature:
          description: AMM exit request ecdsa signature
          example: 0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9
          type: string
      required:
      - exitTokens
      - maxFee
      - owner
      - poolAddress
      - storageId
      - validUntil
      type: object
    AmmPoolExitTokens:
      description: escribes an AMM join transaction
      example:
        unPooled: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
        burned: "1000000000"
      properties:
        unPooled:
          description: "Describes list of the amount of a specific token to be removed\
            \ from the pool, tokens seq should be same as AMM pool info"
          example: "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]"
          items:
            $ref: '#/components/schemas/TokenVolumeV3'
          type: array
        burned:
          description: The minimum amoun of LP token to burn
          example: "1000000000"
          type: string
      required:
      - burned
      - unPooled
      type: object
    UserBill:
      example:
        income: true
        amountF: amountF
        amount: amount
        tokenId: 5
        billType: billType
        memo: memo
        label: label
        tokenF: tokenF
        token: token
        accountId: 5
        price: price
        transferType: transferType
        from: from
        id: 6
        to: to
        txHash: txHash
        hash: hash
        status: status
        timestamp: 1
        storageId: 2
      properties:
        id:
          format: int64
          type: integer
        from:
          type: string
        to:
          type: string
        token:
          type: string
        amount:
          type: string
        tokenF:
          type: string
        amountF:
          type: string
        status:
          type: string
        txHash:
          type: string
        billType:
          type: string
        income:
          type: boolean
        timestamp:
          format: int64
          type: integer
        memo:
          type: string
        price:
          type: string
        transferType:
          type: string
        hash:
          type: string
        accountId:
          format: int64
          type: integer
        tokenId:
          format: int32
          type: integer
        storageId:
          format: int64
          type: integer
        label:
          type: string
      required:
      - accountId
      - amount
      - amountF
      - billType
      - from
      - hash
      - id
      - income
      - label
      - memo
      - price
      - status
      - storageId
      - timestamp
      - to
      - token
      - tokenF
      - tokenId
      - transferType
      - txHash
      type: object
    UserBillList:
      example:
        totalNum: 0
        bills:
        - income: true
          amountF: amountF
          amount: amount
          tokenId: 5
          billType: billType
          memo: memo
          label: label
          tokenF: tokenF
          token: token
          accountId: 5
          price: price
          transferType: transferType
          from: from
          id: 6
          to: to
          txHash: txHash
          hash: hash
          status: status
          timestamp: 1
          storageId: 2
        - income: true
          amountF: amountF
          amount: amount
          tokenId: 5
          billType: billType
          memo: memo
          label: label
          tokenF: tokenF
          token: token
          accountId: 5
          price: price
          transferType: transferType
          from: from
          id: 6
          to: to
          txHash: txHash
          hash: hash
          status: status
          timestamp: 1
          storageId: 2
      properties:
        totalNum:
          format: int64
          type: integer
        bills:
          items:
            $ref: '#/components/schemas/UserBill'
          type: array
      required:
      - bills
      - totalNum
      type: object
    AmmTransactionDataListV3:
      description: Contains one or multiple AMM pool transactions.
      example:
        totalNum: 10
        transactions:
        - txStatus: processing
          poolTokens:
          - feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          - feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          blockId: 0
          createdAt: 1608189538074
          ammPoolAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          lpToken:
            feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          indexInBlock: 6
          txType: join
          ammLayerType: layer_2
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          updatedAt: 1608209538074
          storageInfos:
          - accountId: 1
            tokenId: 5
            storageId: 5
          - accountId: 1
            tokenId: 5
            storageId: 5
        - txStatus: processing
          poolTokens:
          - feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          - feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          blockId: 0
          createdAt: 1608189538074
          ammPoolAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          lpToken:
            feeAmount: "500000"
            amount: "1000000"
            tokenId: 0
            actualAmount: "100000"
          indexInBlock: 6
          txType: join
          ammLayerType: layer_2
          hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          updatedAt: 1608209538074
          storageInfos:
          - accountId: 1
            tokenId: 5
            storageId: 5
          - accountId: 1
            tokenId: 5
            storageId: 5
      properties:
        totalNum:
          description: Number of AMM pool transactions
          example: 10
          format: int64
          type: integer
        transactions:
          description: List of AMM pool transactions
          items:
            $ref: '#/components/schemas/AmmTransactionDataV3'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    AmmTransactionDataV3:
      description: AMM transaction info data
      example:
        txStatus: processing
        poolTokens:
        - feeAmount: "500000"
          amount: "1000000"
          tokenId: 0
          actualAmount: "100000"
        - feeAmount: "500000"
          amount: "1000000"
          tokenId: 0
          actualAmount: "100000"
        blockId: 0
        createdAt: 1608189538074
        ammPoolAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        lpToken:
          feeAmount: "500000"
          amount: "1000000"
          tokenId: 0
          actualAmount: "100000"
        indexInBlock: 6
        txType: join
        ammLayerType: layer_2
        hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        updatedAt: 1608209538074
        storageInfos:
        - accountId: 1
          tokenId: 5
          storageId: 5
        - accountId: 1
          tokenId: 5
          storageId: 5
      properties:
        hash:
          description: AMM transaction hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        txType:
          description: "AMM transaction type, i.e., join, exit, etc"
          enum:
          - join
          - exit
          example: join
          type: string
        txStatus:
          description: "AMM transaction processing status, i.e., processing, processed,\
            \ failed, etc"
          enum:
          - processing
          - cancelled
          - processed
          example: processing
          type: string
        ammPoolAddress:
          description: AMM pool address of query
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        ammLayerType:
          description: "AMM transaction layer, 1 or 2"
          enum:
          - layer_1
          - layer_2
          example: layer_2
          type: string
        poolTokens:
          description: The in pool tokens transfers records of the AMM transaction
          items:
            $ref: '#/components/schemas/AmmTransferDataV3'
          type: array
        lpToken:
          $ref: '#/components/schemas/AmmTransferDataV3'
        createdAt:
          description: Transaction creation time
          example: 1608189538074
          format: int64
          type: integer
        updatedAt:
          description: Transaction update time
          example: 1608209538074
          format: int64
          type: integer
        blockId:
          format: int64
          type: integer
        indexInBlock:
          format: int32
          type: integer
        storageInfos:
          items:
            $ref: '#/components/schemas/StorageInfo'
          type: array
      required:
      - ammLayerType
      - ammPoolAddress
      - blockId
      - createdAt
      - hash
      - indexInBlock
      - lpToken
      - poolTokens
      - txStatus
      - txType
      - updatedAt
      type: object
    AmmTransferDataV3:
      description: AMM transfer info data
      example:
        feeAmount: "500000"
        amount: "1000000"
        tokenId: 0
        actualAmount: "100000"
      properties:
        tokenId:
          description: AMM transfer token id
          example: 0
          format: int32
          type: integer
        amount:
          description: AMM transfer token amount
          example: "1000000"
          type: string
        actualAmount:
          description: Actual AMM transfer token amount due to precision processing
          example: "100000"
          type: string
        feeAmount:
          description: Actual AMM transfer fee amount
          example: "500000"
          type: string
      required:
      - actualAmount
      - amount
      - feeAmount
      - tokenId
      type: object
    AmmTradeDataListV3:
      description: Trading list of AMM pool
      example:
        totalNum: 12345
        trades:
        - market: AMM-DAI-ETH
          accountId: 12345
          feeAmount: "100000000"
          createdAt: 1608189538074
          side: BUY
          size: "100000000"
          tokenId: 0
          price: 0.03
          orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          storageId: 1
        - market: AMM-DAI-ETH
          accountId: 12345
          feeAmount: "100000000"
          createdAt: 1608189538074
          side: BUY
          size: "100000000"
          tokenId: 0
          price: 0.03
          orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          storageId: 1
      properties:
        totalNum:
          description: Number of trades
          example: 12345
          format: int64
          type: integer
        trades:
          description: AMM trade list
          items:
            $ref: '#/components/schemas/AmmTradeDataV3'
          type: array
      required:
      - totalNum
      - trades
      type: object
    AmmTradeDataV3:
      description: AMM trade info data
      example:
        market: AMM-DAI-ETH
        accountId: 12345
        feeAmount: "100000000"
        createdAt: 1608189538074
        side: BUY
        size: "100000000"
        tokenId: 0
        price: 0.03
        orderHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        storageId: 1
      properties:
        accountId:
          description: trader's accountId
          example: 12345
          format: int64
          type: integer
        orderHash:
          description: AMM trade's order hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        market:
          description: The trade market
          example: AMM-DAI-ETH
          type: string
        side:
          description: "The trade direction, buy or sell"
          enum:
          - BUY
          - SELL
          example: BUY
          type: string
        size:
          description: The trade volume
          example: "100000000"
          type: string
        price:
          description: The trade price
          example: 0.03
          format: double
          type: number
        feeAmount:
          description: The trade fee
          example: "100000000"
          type: string
        createdAt:
          description: The trade's creation time
          example: 1608189538074
          format: int64
          type: integer
        tokenId:
          description: field.SubmitOffChainResponseItem.tokenId
          example: 0
          format: int32
          type: integer
        storageId:
          description: field.SubmitOffChainResponseItem.storageId
          example: 1
          format: int64
          type: integer
      required:
      - accountId
      - createdAt
      - feeAmount
      - market
      - orderHash
      - price
      - side
      - size
      - storageId
      - tokenId
      type: object
    AmmPoolStatistics:
      description: model.AmmPoolStatistics
      example:
        market: LRC-ETH-Pool-1
        volume: "[10000000, 10000000]"
        fees: "[10000000, 10000000]"
        ohlc: "[open, high, low, close]"
        liquidityUSD: "100"
        apyBips: "4000"
        isRecommended: true
        lpLiquidity: "100"
        liquidity: "[10000000, 10000000]"
        rewards: "{tokenId: 0, volume: 10000000}"
      properties:
        market:
          description: field.AmmPoolStatistics.market
          example: LRC-ETH-Pool-1
          type: string
        liquidity:
          description: field.AmmPoolStatistics.liquidity
          example: "[10000000, 10000000]"
          items:
            type: string
          type: array
        lpLiquidity:
          description: field.AmmPoolStatistics.lpLiquidity
          example: "100"
          type: string
        liquidityUSD:
          description: field.AmmPoolStatistics.liquidityUSD
          example: "100"
          type: string
        ohlc:
          description: field.AmmPoolStatistics.ohlc
          example: "[open, high, low, close]"
          items:
            type: string
          type: array
        volume:
          description: field.AmmPoolStatistics.volume
          example: "[10000000, 10000000]"
          items:
            type: string
          type: array
        fees:
          description: field.AmmPoolStatistics.fees
          example: "[10000000, 10000000]"
          items:
            type: string
          type: array
        apyBips:
          description: field.AmmPoolStatistics.apyBips
          example: "4000"
          type: string
        isRecommended:
          description: field.AmmPoolStatistics.isRecommended
          example: true
          type: boolean
        rewards:
          description: field.AmmPoolStatistics.rewards
          example: "{tokenId: 0, volume: 10000000}"
          items:
            $ref: '#/components/schemas/TokenVolumeV3'
          type: array
      required:
      - apyBips
      - fees
      - isRecommended
      - liquidity
      - liquidityUSD
      - lpLiquidity
      - market
      - ohlc
      - rewards
      - volume
      type: object
    GetAmmPoolsStatsResponse:
      example:
        data:
        - market: LRC-ETH-Pool-1
          volume: "[10000000, 10000000]"
          fees: "[10000000, 10000000]"
          ohlc: "[open, high, low, close]"
          liquidityUSD: "100"
          apyBips: "4000"
          isRecommended: true
          lpLiquidity: "100"
          liquidity: "[10000000, 10000000]"
          rewards: "{tokenId: 0, volume: 10000000}"
        - market: LRC-ETH-Pool-1
          volume: "[10000000, 10000000]"
          fees: "[10000000, 10000000]"
          ohlc: "[open, high, low, close]"
          liquidityUSD: "100"
          apyBips: "4000"
          isRecommended: true
          lpLiquidity: "100"
          liquidity: "[10000000, 10000000]"
          rewards: "{tokenId: 0, volume: 10000000}"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: model.AmmPoolStatistics
          items:
            $ref: '#/components/schemas/AmmPoolStatistics'
          type: array
      required:
      - data
      - resultInfo
      type: object
    SubmitOrderResponseItemV3:
      description: Submit order response detail
      example:
        accountId: 10060
        clientOrderId: client_order_id
        isIdempotent: false
        tokens: "0"
        hash: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        status: cancelled
        storageId: 1
      properties:
        hash:
          description: Order hash of submit order response
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        clientOrderId:
          description: The clientOrderId of the submitted order
          example: client_order_id
          type: string
        status:
          description: Order status of submit order response
          enum:
          - processing
          - processed
          - cancelling
          - cancelled
          - expired
          - failed
          example: cancelled
          type: string
        isIdempotent:
          description: "Idempotent of submit order response, submit same order again\
            \ when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent\
            \ will be true"
          example: false
          type: boolean
        accountId:
          description: field.SubmitOffChainResponseItem.accountId
          example: 10060
          format: int64
          type: integer
        tokens:
          description: field.SubmitOffChainResponseItem.tokenId
          example: "0"
          items:
            properties: {}
            type: object
          type: array
        storageId:
          description: field.SubmitOffChainResponseItem.storageId
          example: 1
          format: int64
          type: integer
      required:
      - accountId
      - clientOrderId
      - hash
      - isIdempotent
      - status
      - storageId
      - tokens
      type: object
    SubmitOrderRequestV3:
      description: Describes an orders structure.
      example:
        orderType: LIMIT_ORDER
        clientOrderId: "1"
        buyToken:
          volume: "1000000000000"
          tokenId: 0
        fillAmountBOrS: "false"
        maxFeeBips: 20
        accountId: 1
        sellToken:
          volume: "1000000000000"
          tokenId: 0
        allOrNone: "false"
        eddsaSignature: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        validUntil: 1567053142
        poolAddress: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
        exchange: "1"
        taker: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
        affiliate: "10068"
        storageId: 1
        tradeChannel: ORDER_BOOK
      properties:
        exchange:
          description: The adderss of the exchange which has to process this order
          example: "1"
          type: string
        accountId:
          description: Loopring's account ID
          example: 1
          format: int64
          type: integer
        storageId:
          description: The unique identifier of the L2 Merkle tree storage slot where
            the burn made in order to exit the pool will or has been stored.
          example: 1
          format: int32
          type: integer
        sellToken:
          $ref: '#/components/schemas/TokenVolumeV3'
        buyToken:
          $ref: '#/components/schemas/TokenVolumeV3'
        allOrNone:
          description: Whether the order supports partial fills or not.Currently only
            supports false as a valid value
          example: "false"
          type: string
        fillAmountBOrS:
          description: Fill size by buy token or by sell token
          example: "false"
          type: string
        validUntil:
          description: "Order expiration time, accuracy is in seconds"
          example: 1567053142
          format: int64
          type: integer
        maxFeeBips:
          description: "Maximum order fee that the user can accept, value range (in\
            \ ten thousandths) 1 ~ 63"
          example: 20
          format: int32
          type: integer
        eddsaSignature:
          description: "The orders EdDSA signature. The signature is a hexadecimal\
            \ string obtained by signing the order itself and concatenating the resulting\
            \ signature parts (Rx, Ry, and S). Used to authenticate and authorize\
            \ the operation."
          example: "13375450901292179417154974849571793069911517354720397125027633242680470075859"
          type: string
        clientOrderId:
          description: "An arbitrary, client-set unique order identifier, max length\
            \ is 120 bytes"
          example: "1"
          type: string
        orderType:
          description: "Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY"
          enum:
          - LIMIT_ORDER
          - TAKER_ONLY
          - MAKER_ONLY
          - AMM
          example: LIMIT_ORDER
          type: string
        tradeChannel:
          description: "Order channel, can be ORDER_BOOK, AMM_POOL, MIXED"
          enum:
          - ORDER_BOOK
          - AMM_POOL
          - MIXED
          example: ORDER_BOOK
          type: string
        taker:
          description: "Used by the P2P order which user specify the taker, so far\
            \ its 0x0000000000000000000000000000000000000000"
          example: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          type: string
        poolAddress:
          description: The AMM pool address if order type is AMM
          example: 0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18
          type: string
        affiliate:
          description: An accountID who will recieve a share of the fee of this order
          example: "10068"
          type: string
      required:
      - accountId
      - allOrNone
      - buyToken
      - eddsaSignature
      - exchange
      - fillAmountBOrS
      - maxFeeBips
      - sellToken
      - storageId
      - validUntil
      type: object
    AccountCounterFactualInfo:
      description: model.AccountCounterFactualInfo.description
      example:
        accountId: 12345
        wallet: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        walletOwner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        walletFactory: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        walletSalt: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
      properties:
        accountId:
          description: field.AccountCounterFactualInfo.accountId
          example: 12345
          format: int64
          type: integer
        wallet:
          description: field.AccountCounterFactualInfo.wallet
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        walletFactory:
          description: field.AccountCounterFactualInfo.walletFactory
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        walletSalt:
          description: field.AccountCounterFactualInfo.walletSalt
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        walletOwner:
          description: field.AccountCounterFactualInfo.walletOwner
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
      required:
      - accountId
      - wallet
      - walletFactory
      - walletOwner
      - walletSalt
      type: object
    RequestInBlockResponse:
      example:
        blockId: 1234
        indexInBlock: 25
        hash: hash
      properties:
        hash:
          type: string
        blockId:
          description: The block Id.
          example: 1234
          format: int64
          type: integer
        indexInBlock:
          description: The tx index/postion in block
          example: 25
          format: int32
          type: integer
      required:
      - blockId
      - hash
      - indexInBlock
      type: object
    AmmPoolBalanceV3:
      description: Describes both pooled token balances for a given pool and minted
        LP tokens amount.
      example:
        pooled: "[{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}]"
        lp:
          volume: "1000000000000"
          tokenId: 0
        poolAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        risky: false
        poolName: AMM-LRC-ETH
      properties:
        poolName:
          description: field.AmmSnapshot.poolName
          example: AMM-LRC-ETH
          type: string
        poolAddress:
          description: field.AmmSnapshot.poolAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        pooled:
          description: AMM in pool tokens balances
          example: "[{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}]"
          items:
            $ref: '#/components/schemas/TokenVolumeV3'
          type: array
        lp:
          $ref: '#/components/schemas/TokenVolumeV3'
        risky:
          description: "AMM pool risky flag, true if AMM pool TVL is low which means\
            \ big slippage."
          example: false
          type: boolean
      required:
      - lp
      - poolAddress
      - poolName
      - pooled
      - risky
      type: object
    BlockResp:
      example:
        blockId: 1235
        createdAt: 1627904776000
        exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        transactions:
        - owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          spotTradeInfo:
            submitterId: 10008
            smallOrder: "true"
            affiliate: "30"
          toAccountAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          fee:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          toAccountId: 10006
          txType: transfer
          orderB:
            accountID: 10006
            feeBips: 60
            amountS: "100"
            amountB: "600"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            tokenB: 32768
            validUntil: 1235123512
            tokenS: 6
            taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            isAmm: true
            fillS: 500
            storageID: 6
          orderA:
            accountID: 10006
            feeBips: 60
            amountS: "100"
            amountB: "600"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            tokenB: 32768
            validUntil: 1235123512
            tokenS: 6
            taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            isAmm: true
            fillS: 500
            storageID: 6
          nonce: 65
          toAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          toToken:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          token:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          valid: false
          nftType: eip1155
          accountId: 10006
          minterAccountId: 10008
          minter: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          validUntil: 1627904776
          fromAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          storageId: 2
          nftToken:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        - owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          spotTradeInfo:
            submitterId: 10008
            smallOrder: "true"
            affiliate: "30"
          toAccountAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          fee:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          toAccountId: 10006
          txType: transfer
          orderB:
            accountID: 10006
            feeBips: 60
            amountS: "100"
            amountB: "600"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            tokenB: 32768
            validUntil: 1235123512
            tokenS: 6
            taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            isAmm: true
            fillS: 500
            storageID: 6
          orderA:
            accountID: 10006
            feeBips: 60
            amountS: "100"
            amountB: "600"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            tokenB: 32768
            validUntil: 1235123512
            tokenS: 6
            taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            isAmm: true
            fillS: 500
            storageID: 6
          nonce: 65
          toAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          toToken:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          token:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          valid: false
          nftType: eip1155
          accountId: 10006
          minterAccountId: 10008
          minter: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          validUntil: 1627904776
          fromAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          storageId: 2
          nftToken:
            tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
            amount: "100"
            tokenId: "6"
            nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
            nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        txHash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        blockSize: 64
        status: pending
      properties:
        blockId:
          description: The num index of the block
          example: 1235
          format: int64
          type: integer
        blockSize:
          description: The block size
          example: 64
          format: int32
          type: integer
        exchange:
          description: The exchange address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        txHash:
          description: The txHash of the block
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        status:
          description: The status of the block
          example: pending
          type: string
        createdAt:
          description: The creation time of the block
          example: 1627904776000
          format: int64
          type: integer
        transactions:
          description: The txs list inside the block
          items:
            $ref: '#/components/schemas/TransactionBlock'
          type: array
      required:
      - blockId
      - blockSize
      - createdAt
      - exchange
      - status
      - transactions
      - txHash
      type: object
    SpotTradeInfo:
      example:
        submitterId: 10008
        smallOrder: "true"
        affiliate: "30"
      properties:
        submitterId:
          description: field.spotTradeInfo.submitterId
          example: 10008
          format: int64
          type: integer
        smallOrder:
          description: field.spotTradeInfo.smallOrder
          example: "true"
          properties: {}
          type: object
        affiliate:
          description: field.spotTradeInfo.affiliate
          example: "30"
          properties: {}
          type: object
      type: object
    TransactionBlock:
      example:
        owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        spotTradeInfo:
          submitterId: 10008
          smallOrder: "true"
          affiliate: "30"
        toAccountAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        fee:
          tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          amount: "100"
          tokenId: "6"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        toAccountId: 10006
        txType: transfer
        orderB:
          accountID: 10006
          feeBips: 60
          amountS: "100"
          amountB: "600"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          tokenB: 32768
          validUntil: 1235123512
          tokenS: 6
          taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          isAmm: true
          fillS: 500
          storageID: 6
        orderA:
          accountID: 10006
          feeBips: 60
          amountS: "100"
          amountB: "600"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          tokenB: 32768
          validUntil: 1235123512
          tokenS: 6
          taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          isAmm: true
          fillS: 500
          storageID: 6
        nonce: 65
        toAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        toToken:
          tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          amount: "100"
          tokenId: "6"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        token:
          tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          amount: "100"
          tokenId: "6"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        valid: false
        nftType: eip1155
        accountId: 10006
        minterAccountId: 10008
        minter: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        validUntil: 1627904776
        fromAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        storageId: 2
        nftToken:
          tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          amount: "100"
          tokenId: "6"
          nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        txType:
          description: "The txType of the transaction, one in [Noop,Deposit,Withdraw,Transfer,SpotTrade,AccountUpdate,AmmUpdate,JoinAmm,ExitAmm,SignatureVerification,NftMint,NftData]"
          enum:
          - Noop
          - Deposit
          - Withdraw
          - Transfer
          - SpotTrade
          - AccountUpdate
          - AmmUpdate
          - JoinAmm
          - ExitAmm
          - SignatureVerification
          - NftMint
          - NftData
          example: transfer
          type: string
        accountId:
          description: The accountId of the transaction
          example: 10006
          format: int64
          type: integer
        owner:
          description: The owner of the transaction
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        token:
          $ref: '#/components/schemas/_Token'
        toToken:
          $ref: '#/components/schemas/_Token'
        fee:
          $ref: '#/components/schemas/_Token'
        validUntil:
          description: The validUntil of the transaction
          example: 1627904776
          format: int64
          type: integer
        toAccountId:
          description: The toAccountId of the transaction if tx has a destination
            account
          example: 10006
          format: int64
          type: integer
        toAccountAddress:
          description: The toAccountAddress of the transaction if tx has a destination
            account
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        storageId:
          description: The storageId of the transaction
          example: 2
          format: int64
          type: integer
        orderA:
          $ref: '#/components/schemas/_Order'
        orderB:
          $ref: '#/components/schemas/_Order'
        valid:
          description: The validness of the transaction
          example: false
          type: boolean
        nonce:
          description: The nonce of the transaction if it uses nonce
          example: 65
          format: int32
          type: integer
        minterAccountId:
          description: The minterAccountId of the transaction if its a mint tx
          example: 10008
          format: int64
          type: integer
        minter:
          description: The minter of the transaction if its a mint tx
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftToken:
          $ref: '#/components/schemas/_Token'
        nftType:
          description: The nftType of the transaction if its a mint tx
          example: eip1155
          type: string
        fromAddress:
          description: field.TransactionBlock.fromAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        toAddress:
          description: field.TransactionBlock.toAddress
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        spotTradeInfo:
          $ref: '#/components/schemas/SpotTradeInfo'
      required:
      - txType
      type: object
    _Order:
      example:
        accountID: 10006
        feeBips: 60
        amountS: "100"
        amountB: "600"
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        tokenB: 32768
        validUntil: 1235123512
        tokenS: 6
        taker: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        isAmm: true
        fillS: 500
        storageID: 6
      properties:
        storageID:
          description: The storageId of the order
          example: 6
          format: int64
          type: integer
        accountID:
          description: The accountID of the order
          example: 10006
          format: int64
          type: integer
        amountS:
          description: The amountS of the order
          example: "100"
          type: string
        amountB:
          description: The amountB of the order
          example: "600"
          type: string
        tokenS:
          description: The tokenS of the order
          example: 6
          format: int32
          type: integer
        tokenB:
          description: The tokenB of the order
          example: 32768
          format: int32
          type: integer
        validUntil:
          description: The validUntil of the order
          example: 1235123512
          format: int64
          type: integer
        taker:
          description: The taker of the order
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        feeBips:
          description: The feeBips of the order
          example: 60
          format: int32
          type: integer
        isAmm:
          description: If the order isAmm
          example: true
          type: boolean
        nftData:
          description: "The nftData of the order, if its NFT order"
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        fillS:
          description: The fillS of the order
          example: 500
          format: int64
          type: integer
      required:
      - accountID
      - amountB
      - amountS
      - feeBips
      - fillS
      - isAmm
      - nftData
      - storageID
      - taker
      - tokenB
      - tokenS
      - validUntil
      type: object
    _Token:
      example:
        tokenAddress: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        amount: "100"
        tokenId: "6"
        nftData: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
        nftId: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        tokenId:
          description: The tokenId of the token
          example: "6"
          properties: {}
          type: object
        tokenAddress:
          description: The token Address
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        nftData:
          description: The nftData of the NFT token
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        nftId:
          description: The NFT_ID of the NFT token
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        amount:
          description: The token amount
          example: "100"
          type: string
      type: object
    AmmMarketInfo:
      example:
        market: LP-LRC-USDT
        inPoolTokens: "2,0"
        pricePrecision: 6
        createdAt: "1609466400000"
        poolTokenId: 0
        address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
        feeBips: 6
        name: LRC-USDT-Pool-1
        version: 1.0.0
        enabled: true
        amountPrecision: 6
        status: 0
      properties:
        name:
          description: field.AmmMarketInfo.name
          example: LRC-USDT-Pool-1
          type: string
        market:
          description: field.AmmMarketInfo.market
          example: LP-LRC-USDT
          type: string
        address:
          description: field.AmmMarketInfo.address
          example: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          type: string
        version:
          description: field.AmmMarketInfo.version
          example: 1.0.0
          type: string
        inPoolTokens:
          description: field.AmmMarketInfo.inPoolTokens
          example: "2,0"
          items:
            properties: {}
            type: object
          type: array
        poolTokenId:
          description: field.AmmMarketInfo.poolTokenId
          example: 0
          format: int32
          type: integer
        feeBips:
          description: field.AmmMarketInfo.feeBips
          example: 6
          format: int32
          type: integer
        pricePrecision:
          description: field.AmmMarketInfo.pricePrecision
          example: 6
          format: int32
          type: integer
        amountPrecision:
          description: field.AmmMarketInfo.amountPrecision
          example: 6
          format: int32
          type: integer
        createdAt:
          description: field.AmmMarketInfo.createdAt
          example: "1609466400000"
          type: string
        enabled:
          description: field.AmmMarketInfo.enabled
          example: true
          type: boolean
        status:
          description: field.AmmMarketInfo.status
          example: 0
          format: int32
          type: integer
      required:
      - address
      - amountPrecision
      - createdAt
      - enabled
      - feeBips
      - inPoolTokens
      - market
      - name
      - poolTokenId
      - pricePrecision
      - status
      - version
      type: object
    GetAmmMarketInfoResponse:
      description: model.getAmmMarketInfoResponse
      example:
        data:
        - market: LP-LRC-USDT
          inPoolTokens: "2,0"
          pricePrecision: 6
          createdAt: "1609466400000"
          poolTokenId: 0
          address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          feeBips: 6
          name: LRC-USDT-Pool-1
          version: 1.0.0
          enabled: true
          amountPrecision: 6
          status: 0
        - market: LP-LRC-USDT
          inPoolTokens: "2,0"
          pricePrecision: 6
          createdAt: "1609466400000"
          poolTokenId: 0
          address: 0xa6fa83b62b09174694EFD7EE3aE608ad478a138E
          feeBips: 6
          name: LRC-USDT-Pool-1
          version: 1.0.0
          enabled: true
          amountPrecision: 6
          status: 0
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: field.getAmmMarketInfoResponse.data
          items:
            $ref: '#/components/schemas/AmmMarketInfo'
          type: array
      required:
      - resultInfo
      type: object
    AmmSnapshot:
      description: model.AmmSnapshot.description
      example:
        poolTokenId: 10
        tokenAmounts: "100"
        PoolTokenAmount: "100"
        poolAddress: "10"
        tokenIds: "100"
        risky: false
        poolName: LRC-ETH-Pool-1
      properties:
        poolName:
          description: field.AmmSnapshot.poolName
          example: LRC-ETH-Pool-1
          type: string
        poolAddress:
          description: field.AmmSnapshot.poolAddress
          example: "10"
          type: string
        poolTokenId:
          description: field.AmmSnapshot.poolTokenId
          example: 10
          format: int32
          type: integer
        PoolTokenAmount:
          description: field.AmmSnapshot.PoolTokenAmount
          example: "100"
          type: string
        tokenIds:
          description: field.AmmSnapshot.tokenIds
          example: "100"
          items:
            properties: {}
            type: object
          type: array
        tokenAmounts:
          description: field.AmmSnapshot.tokenAmounts
          example: "100"
          items:
            type: string
          type: array
        risky:
          description: field.AmmSnapshot.risky
          example: false
          type: boolean
      required:
      - PoolTokenAmount
      - poolAddress
      - poolName
      - poolTokenId
      - risky
      - tokenAmounts
      - tokenIds
      type: object
    GetAmmSnapshotResponse:
      description: model.GetAmmSnapshotResponse
      example:
        data:
          poolTokenId: 10
          tokenAmounts: "100"
          PoolTokenAmount: "100"
          poolAddress: "10"
          tokenIds: "100"
          risky: false
          poolName: LRC-ETH-Pool-1
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/AmmSnapshot'
      required:
      - data
      - resultInfo
      type: object
    AmmPoolJoinRequest:
      description: model.AmmPoolJoinRequest.description
      example:
        owner: 0xe25c94ba036d91b48833acb637f719038f07372d
        eddsaSig: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
        joinAmounts: "10000000000,20000000000"
        joinStorageIDs: "1"
        fee: "1000000000000000000"
        mintMinAmount: "1000000000"
        poolAddress: 0xe25c94ba036d91b48833acb637f719038f07372d
        validUntil: 1598431481
        ecdsaSig: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
      properties:
        owner:
          description: field.AmmPoolJoinRequest.owner
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        poolAddress:
          description: field.AmmPoolJoinRequest.poolAddress
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        joinAmounts:
          description: field.AmmPoolJoinRequest.joinAmounts
          example: "10000000000,20000000000"
          type: string
        joinStorageIDs:
          description: field.AmmPoolJoinRequest.joinStorageIDs
          example: "1"
          type: string
        mintMinAmount:
          description: field.AmmPoolJoinRequest.mintMinAmount
          example: "1000000000"
          type: string
        fee:
          description: field.AmmPoolJoinRequest.fee
          example: "1000000000000000000"
          type: string
        validUntil:
          description: field.AmmPoolJoinRequest.validUntil
          example: 1598431481
          format: int32
          type: integer
        ecdsaSig:
          description: field.AmmPoolJoinRequest.ecdsaSig
          example: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
          type: string
        eddsaSig:
          description: field.AmmPoolJoinRequest.eddsaSig
          example: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
          type: string
      required:
      - ecdsaSig
      - eddsaSig
      - fee
      - joinAmounts
      - joinStorageIDs
      - mintMinAmount
      - owner
      - poolAddress
      - validUntil
      type: object
    AmmPoolExitRequest:
      example:
        owner: 0xe25c94ba036d91b48833acb637f719038f07372d
        burnAmount: "100000000000000"
        eddsaSig: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
        fee: "1000000000000000000"
        poolAddress: 0xe25c94ba036d91b48833acb637f719038f07372d
        validUntil: 1598431481
        ecdsaSig: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
        exitMinAmounts: "1000000000000000000"
        burnStorageID: 1
      properties:
        owner:
          description: field.AmmPoolJoinRequest.owner
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        poolAddress:
          description: field.AmmPoolJoinRequest.poolAddress
          example: 0xe25c94ba036d91b48833acb637f719038f07372d
          type: string
        burnAmount:
          description: field.AmmPoolExitRequest.burnAmount
          example: "100000000000000"
          type: string
        burnStorageID:
          description: field.AmmPoolExitRequest.burnStorageID
          example: 1
          format: int64
          type: integer
        exitMinAmounts:
          description: field.AmmPoolExitRequest.exitMinAmounts
          example: "1000000000000000000"
          type: string
        fee:
          description: field.AmmPoolExitRequest.fee
          example: "1000000000000000000"
          type: string
        validUntil:
          description: field.AmmPoolExitRequest.validUntil
          example: 1598431481
          format: int32
          type: integer
        ecdsaSig:
          description: field.AmmPoolExitRequest.ecdsaSig
          example: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
          type: string
        eddsaSig:
          description: field.AmmPoolExitRequest.eddsaSig
          example: 0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b
          type: string
      required:
      - burnAmount
      - burnStorageID
      - ecdsaSig
      - eddsaSig
      - exitMinAmounts
      - fee
      - owner
      - poolAddress
      - validUntil
      type: object
    AmmTransactionData:
      example:
        owner: owner
        txType: txType
        storageInfos:
        - accountId: 1
          tokenId: 5
          storageId: 5
        - accountId: 1
          tokenId: 5
          storageId: 5
        txStatus: txStatus
        ammPoolId: 1
        createdAt: 9
        lpTokenAmount: lpTokenAmount
        lpTokenSymbol: lpTokenSymbol
        blockHeight: 7
        ammPoolAddress: ammPoolAddress
        transfers:
        - feeAmount: feeAmount
          amount: amount
          tokenId: 2
          tokenSymbol: tokenSymbol
          actualAmount: actualAmount
          id: 5
        - feeAmount: feeAmount
          amount: amount
          tokenId: 2
          tokenSymbol: tokenSymbol
          actualAmount: actualAmount
          id: 5
        id: 6
        ammLayerType: ammLayerType
        lpTokenId: 5
        txHash: txHash
        hash: hash
        updatedAt: 3
      properties:
        id:
          format: int64
          type: integer
        hash:
          type: string
        txHash:
          type: string
        owner:
          type: string
        txType:
          type: string
        txStatus:
          type: string
        ammLayerType:
          type: string
        ammPoolId:
          format: int64
          type: integer
        ammPoolAddress:
          type: string
        lpTokenId:
          format: int64
          type: integer
        lpTokenSymbol:
          type: string
        lpTokenAmount:
          type: string
        transfers:
          items:
            $ref: '#/components/schemas/AmmTransferData'
          type: array
        blockHeight:
          format: int64
          type: integer
        createdAt:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
        storageInfos:
          items:
            $ref: '#/components/schemas/StorageInfo'
          type: array
      required:
      - ammLayerType
      - ammPoolAddress
      - ammPoolId
      - blockHeight
      - createdAt
      - hash
      - id
      - lpTokenAmount
      - lpTokenId
      - lpTokenSymbol
      - owner
      - transfers
      - txHash
      - txStatus
      - txType
      - updatedAt
      type: object
    AmmTransactionDataList:
      example:
        totalNum: 0
        transactions:
        - owner: owner
          txType: txType
          storageInfos:
          - accountId: 1
            tokenId: 5
            storageId: 5
          - accountId: 1
            tokenId: 5
            storageId: 5
          txStatus: txStatus
          ammPoolId: 1
          createdAt: 9
          lpTokenAmount: lpTokenAmount
          lpTokenSymbol: lpTokenSymbol
          blockHeight: 7
          ammPoolAddress: ammPoolAddress
          transfers:
          - feeAmount: feeAmount
            amount: amount
            tokenId: 2
            tokenSymbol: tokenSymbol
            actualAmount: actualAmount
            id: 5
          - feeAmount: feeAmount
            amount: amount
            tokenId: 2
            tokenSymbol: tokenSymbol
            actualAmount: actualAmount
            id: 5
          id: 6
          ammLayerType: ammLayerType
          lpTokenId: 5
          txHash: txHash
          hash: hash
          updatedAt: 3
        - owner: owner
          txType: txType
          storageInfos:
          - accountId: 1
            tokenId: 5
            storageId: 5
          - accountId: 1
            tokenId: 5
            storageId: 5
          txStatus: txStatus
          ammPoolId: 1
          createdAt: 9
          lpTokenAmount: lpTokenAmount
          lpTokenSymbol: lpTokenSymbol
          blockHeight: 7
          ammPoolAddress: ammPoolAddress
          transfers:
          - feeAmount: feeAmount
            amount: amount
            tokenId: 2
            tokenSymbol: tokenSymbol
            actualAmount: actualAmount
            id: 5
          - feeAmount: feeAmount
            amount: amount
            tokenId: 2
            tokenSymbol: tokenSymbol
            actualAmount: actualAmount
            id: 5
          id: 6
          ammLayerType: ammLayerType
          lpTokenId: 5
          txHash: txHash
          hash: hash
          updatedAt: 3
      properties:
        totalNum:
          format: int64
          type: integer
        transactions:
          items:
            $ref: '#/components/schemas/AmmTransactionData'
          type: array
      required:
      - totalNum
      - transactions
      type: object
    AmmTransferData:
      example:
        feeAmount: feeAmount
        amount: amount
        tokenId: 2
        tokenSymbol: tokenSymbol
        actualAmount: actualAmount
        id: 5
      properties:
        id:
          format: int64
          type: integer
        tokenId:
          format: int32
          type: integer
        tokenSymbol:
          type: string
        amount:
          type: string
        actualAmount:
          type: string
        feeAmount:
          type: string
      required:
      - actualAmount
      - amount
      - feeAmount
      - id
      - tokenId
      - tokenSymbol
      type: object
    GetAmmTransactionResponseV2:
      example:
        data:
          totalNum: 0
          transactions:
          - owner: owner
            txType: txType
            storageInfos:
            - accountId: 1
              tokenId: 5
              storageId: 5
            - accountId: 1
              tokenId: 5
              storageId: 5
            txStatus: txStatus
            ammPoolId: 1
            createdAt: 9
            lpTokenAmount: lpTokenAmount
            lpTokenSymbol: lpTokenSymbol
            blockHeight: 7
            ammPoolAddress: ammPoolAddress
            transfers:
            - feeAmount: feeAmount
              amount: amount
              tokenId: 2
              tokenSymbol: tokenSymbol
              actualAmount: actualAmount
              id: 5
            - feeAmount: feeAmount
              amount: amount
              tokenId: 2
              tokenSymbol: tokenSymbol
              actualAmount: actualAmount
              id: 5
            id: 6
            ammLayerType: ammLayerType
            lpTokenId: 5
            txHash: txHash
            hash: hash
            updatedAt: 3
          - owner: owner
            txType: txType
            storageInfos:
            - accountId: 1
              tokenId: 5
              storageId: 5
            - accountId: 1
              tokenId: 5
              storageId: 5
            txStatus: txStatus
            ammPoolId: 1
            createdAt: 9
            lpTokenAmount: lpTokenAmount
            lpTokenSymbol: lpTokenSymbol
            blockHeight: 7
            ammPoolAddress: ammPoolAddress
            transfers:
            - feeAmount: feeAmount
              amount: amount
              tokenId: 2
              tokenSymbol: tokenSymbol
              actualAmount: actualAmount
              id: 5
            - feeAmount: feeAmount
              amount: amount
              tokenId: 2
              tokenSymbol: tokenSymbol
              actualAmount: actualAmount
              id: 5
            id: 6
            ammLayerType: ammLayerType
            lpTokenId: 5
            txHash: txHash
            hash: hash
            updatedAt: 3
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/AmmTransactionDataList'
      required:
      - data
      - resultInfo
      type: object
    AmmTradeData:
      example:
        market: market
        accountId: 1
        feeAmount: feeAmount
        createdAt: 2
        side: side
        settlementRequestId: 5
        size: size
        price: 5.637376656633329
        sequenceId: 6
        orderHash: orderHash
      properties:
        sequenceId:
          format: int64
          type: integer
        accountId:
          format: int64
          type: integer
        settlementRequestId:
          format: int64
          type: integer
        orderHash:
          type: string
        market:
          type: string
        side:
          type: string
        size:
          type: string
        price:
          format: double
          type: number
        feeAmount:
          type: string
        createdAt:
          format: int64
          type: integer
      required:
      - accountId
      - createdAt
      - feeAmount
      - market
      - orderHash
      - price
      - sequenceId
      - settlementRequestId
      - side
      - size
      type: object
    AmmTradeDataList:
      example:
        totalNum: 0
        trades:
        - market: market
          accountId: 1
          feeAmount: feeAmount
          createdAt: 2
          side: side
          settlementRequestId: 5
          size: size
          price: 5.637376656633329
          sequenceId: 6
          orderHash: orderHash
        - market: market
          accountId: 1
          feeAmount: feeAmount
          createdAt: 2
          side: side
          settlementRequestId: 5
          size: size
          price: 5.637376656633329
          sequenceId: 6
          orderHash: orderHash
      properties:
        totalNum:
          format: int64
          type: integer
        trades:
          items:
            $ref: '#/components/schemas/AmmTradeData'
          type: array
      required:
      - totalNum
      - trades
      type: object
    GetAmmTradesResponseV2:
      example:
        data:
          totalNum: 0
          trades:
          - market: market
            accountId: 1
            feeAmount: feeAmount
            createdAt: 2
            side: side
            settlementRequestId: 5
            size: size
            price: 5.637376656633329
            sequenceId: 6
            orderHash: orderHash
          - market: market
            accountId: 1
            feeAmount: feeAmount
            createdAt: 2
            side: side
            settlementRequestId: 5
            size: size
            price: 5.637376656633329
            sequenceId: 6
            orderHash: orderHash
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/AmmTradeDataList'
      required:
      - data
      - resultInfo
      type: object
    GetLuckyTokenAgentsResponse:
      example:
        data:
        - owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          infos: "['https://loopring.io']"
        - owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          infos: "['https://loopring.io']"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          description: model.GetAmmUserPoolsStatsResponse
          items:
            $ref: '#/components/schemas/LuckyTokenAgent'
          type: array
      required:
      - data
      - resultInfo
      type: object
    LuckyTokenAgent:
      description: model.luckyTokenAgent
      example:
        owner: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        infos: "['https://loopring.io']"
      properties:
        owner:
          description: field.luckyTokenAgent.owner
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        infos:
          description: field.luckyTokenAgent.infos
          example: "['https://loopring.io']"
          items:
            type: string
          type: array
      required:
      - infos
      - owner
      type: object
    SendLuckyTokenRequestV3:
      example:
        signerFlag: "true"
        validSince: 1519217383
        numbers: 5
        memo: Lucky Draw for YOU
        type: "1"
        templateId: 1
        luckyToken: 1
      properties:
        type:
          description: field.SendLuckyTokenRequestV3.exchange
          example: "1"
          type: string
        numbers:
          description: field.SendLuckyTokenRequestV3.numbers
          example: 5
          format: int64
          type: integer
        memo:
          description: field.SendLuckyTokenRequestV3.memo
          example: Lucky Draw for YOU
          type: string
        signerFlag:
          description: field.SendLuckyTokenRequestV3.signerFlag
          example: "true"
          type: string
        templateId:
          description: field.SendLuckyTokenRequestV3.templateId
          example: 1
          format: int64
          type: integer
        validSince:
          description: field.SendLuckyTokenRequestV3.validSince
          example: 1519217383
          format: int32
          type: integer
        luckyToken:
          description: field.SendLuckyTokenRequestV3.luckyToken
          example: 1
          format: int64
          type: integer
      required:
      - luckyToken
      - memo
      - numbers
      - signerFlag
      - templateId
      - type
      - validSince
      type: object
    GetLuckyTokenClaimAmountResponse:
      example:
        data:
          amount: "1000000"
        resultInfo:
          code: 0
          message: SUCCESS
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        data:
          $ref: '#/components/schemas/LuckyTokenClaimAmount'
      required:
      - data
      - resultInfo
      type: object
    LuckyTokenClaimAmount:
      example:
        amount: "1000000"
      properties:
        amount:
          description: field.LuckyTokenClaimAmount.amount
          example: "1000000"
          type: string
      required:
      - amount
      type: object
    ClaimLuckyTokenRequestV3:
      example:
        referrer: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        claimer: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        hash: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
      properties:
        hash:
          description: field.ClaimLuckyTokenRequestV3.hash
          example: 0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085
          type: string
        claimer:
          description: field.SendLuckyTokenRequestV3.claimer
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        referrer:
          description: field.SendLuckyTokenRequestV3.referrer
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
      required:
      - claimer
      - hash
      type: object
    WithdrawLuckyTokenRequestV3:
      example:
        layer2Transfer: layer2Transfer
        amount: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        tokenId: 0
        claimer: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
        feeTokenId: 6
      properties:
        tokenId:
          description: field.WithdrawLuckyTokenRequestV3.withdrawTokenId
          format: int32
          type: integer
        feeTokenId:
          description: field.WithdrawLuckyTokenRequestV3.feeTokenId
          format: int32
          type: integer
        amount:
          description: field.WithdrawLuckyTokenRequestV3.amount
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        claimer:
          description: field.WithdrawLuckyTokenRequestV3.claimer
          example: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd
          type: string
        layer2Transfer:
          description: field.WithdrawLuckyTokenRequestV3.layer2Transfer
          type: string
      required:
      - amount
      - claimer
      - feeTokenId
      - tokenId
      type: object
x-original-swagger-version: "2.0"
