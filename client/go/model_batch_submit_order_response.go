/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// BatchSubmitOrderResponse Batch submit orders.
type BatchSubmitOrderResponse struct {
	ResultInfo ResultInfo `json:"resultInfo"`
	// Result of batch submit orders.
	Data []SubmitOrderResult `json:"data"`
}

// NewBatchSubmitOrderResponse instantiates a new BatchSubmitOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchSubmitOrderResponse(resultInfo ResultInfo, data []SubmitOrderResult) *BatchSubmitOrderResponse {
	this := BatchSubmitOrderResponse{}
	this.ResultInfo = resultInfo
	this.Data = data
	return &this
}

// NewBatchSubmitOrderResponseWithDefaults instantiates a new BatchSubmitOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchSubmitOrderResponseWithDefaults() *BatchSubmitOrderResponse {
	this := BatchSubmitOrderResponse{}
	return &this
}

// GetResultInfo returns the ResultInfo field value
func (o *BatchSubmitOrderResponse) GetResultInfo() ResultInfo {
	if o == nil {
		var ret ResultInfo
		return ret
	}

	return o.ResultInfo
}

// GetResultInfoOk returns a tuple with the ResultInfo field value
// and a boolean to check if the value has been set.
func (o *BatchSubmitOrderResponse) GetResultInfoOk() (*ResultInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultInfo, true
}

// SetResultInfo sets field value
func (o *BatchSubmitOrderResponse) SetResultInfo(v ResultInfo) {
	o.ResultInfo = v
}

// GetData returns the Data field value
func (o *BatchSubmitOrderResponse) GetData() []SubmitOrderResult {
	if o == nil {
		var ret []SubmitOrderResult
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *BatchSubmitOrderResponse) GetDataOk() ([]SubmitOrderResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *BatchSubmitOrderResponse) SetData(v []SubmitOrderResult) {
	o.Data = v
}

func (o BatchSubmitOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resultInfo"] = o.ResultInfo
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableBatchSubmitOrderResponse struct {
	value *BatchSubmitOrderResponse
	isSet bool
}

func (v NullableBatchSubmitOrderResponse) Get() *BatchSubmitOrderResponse {
	return v.value
}

func (v *NullableBatchSubmitOrderResponse) Set(val *BatchSubmitOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchSubmitOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchSubmitOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchSubmitOrderResponse(val *BatchSubmitOrderResponse) *NullableBatchSubmitOrderResponse {
	return &NullableBatchSubmitOrderResponse{value: val, isSet: true}
}

func (v NullableBatchSubmitOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchSubmitOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
