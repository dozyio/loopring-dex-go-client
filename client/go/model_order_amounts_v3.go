/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OrderAmountsV3 Contains information about the order amounts that are valid for usage with the token in order-related APIs.
type OrderAmountsV3 struct {
	// The minimum amount enforced when submitting orders for the token.
	Minimum string `json:"minimum"`
	// The maximum amount enforced when submitting orders for the token.
	Maximum string `json:"maximum"`
	// The dust amount enforced when submitting orders for the token.
	Dust string `json:"dust"`
}

// NewOrderAmountsV3 instantiates a new OrderAmountsV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderAmountsV3(minimum string, maximum string, dust string) *OrderAmountsV3 {
	this := OrderAmountsV3{}
	this.Minimum = minimum
	this.Maximum = maximum
	this.Dust = dust
	return &this
}

// NewOrderAmountsV3WithDefaults instantiates a new OrderAmountsV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderAmountsV3WithDefaults() *OrderAmountsV3 {
	this := OrderAmountsV3{}
	return &this
}

// GetMinimum returns the Minimum field value
func (o *OrderAmountsV3) GetMinimum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value
// and a boolean to check if the value has been set.
func (o *OrderAmountsV3) GetMinimumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minimum, true
}

// SetMinimum sets field value
func (o *OrderAmountsV3) SetMinimum(v string) {
	o.Minimum = v
}

// GetMaximum returns the Maximum field value
func (o *OrderAmountsV3) GetMaximum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value
// and a boolean to check if the value has been set.
func (o *OrderAmountsV3) GetMaximumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Maximum, true
}

// SetMaximum sets field value
func (o *OrderAmountsV3) SetMaximum(v string) {
	o.Maximum = v
}

// GetDust returns the Dust field value
func (o *OrderAmountsV3) GetDust() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dust
}

// GetDustOk returns a tuple with the Dust field value
// and a boolean to check if the value has been set.
func (o *OrderAmountsV3) GetDustOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dust, true
}

// SetDust sets field value
func (o *OrderAmountsV3) SetDust(v string) {
	o.Dust = v
}

func (o OrderAmountsV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["minimum"] = o.Minimum
	}
	if true {
		toSerialize["maximum"] = o.Maximum
	}
	if true {
		toSerialize["dust"] = o.Dust
	}
	return json.Marshal(toSerialize)
}

type NullableOrderAmountsV3 struct {
	value *OrderAmountsV3
	isSet bool
}

func (v NullableOrderAmountsV3) Get() *OrderAmountsV3 {
	return v.value
}

func (v *NullableOrderAmountsV3) Set(val *OrderAmountsV3) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderAmountsV3) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderAmountsV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderAmountsV3(val *OrderAmountsV3) *NullableOrderAmountsV3 {
	return &NullableOrderAmountsV3{value: val, isSet: true}
}

func (v NullableOrderAmountsV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderAmountsV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
