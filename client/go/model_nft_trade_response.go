/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftTradeResponse The trade settlement
type NftTradeResponse struct {
	MakerFills NftTradeFill `json:"makerFills"`
	TakerFills NftTradeFill `json:"takerFills"`
	// The trade hash which can be queried in loopring scan web.
	TradeHash string `json:"tradeHash"`
}

// NewNftTradeResponse instantiates a new NftTradeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTradeResponse(makerFills NftTradeFill, takerFills NftTradeFill, tradeHash string) *NftTradeResponse {
	this := NftTradeResponse{}
	this.MakerFills = makerFills
	this.TakerFills = takerFills
	this.TradeHash = tradeHash
	return &this
}

// NewNftTradeResponseWithDefaults instantiates a new NftTradeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTradeResponseWithDefaults() *NftTradeResponse {
	this := NftTradeResponse{}
	return &this
}

// GetMakerFills returns the MakerFills field value
func (o *NftTradeResponse) GetMakerFills() NftTradeFill {
	if o == nil {
		var ret NftTradeFill
		return ret
	}

	return o.MakerFills
}

// GetMakerFillsOk returns a tuple with the MakerFills field value
// and a boolean to check if the value has been set.
func (o *NftTradeResponse) GetMakerFillsOk() (*NftTradeFill, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MakerFills, true
}

// SetMakerFills sets field value
func (o *NftTradeResponse) SetMakerFills(v NftTradeFill) {
	o.MakerFills = v
}

// GetTakerFills returns the TakerFills field value
func (o *NftTradeResponse) GetTakerFills() NftTradeFill {
	if o == nil {
		var ret NftTradeFill
		return ret
	}

	return o.TakerFills
}

// GetTakerFillsOk returns a tuple with the TakerFills field value
// and a boolean to check if the value has been set.
func (o *NftTradeResponse) GetTakerFillsOk() (*NftTradeFill, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TakerFills, true
}

// SetTakerFills sets field value
func (o *NftTradeResponse) SetTakerFills(v NftTradeFill) {
	o.TakerFills = v
}

// GetTradeHash returns the TradeHash field value
func (o *NftTradeResponse) GetTradeHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeHash
}

// GetTradeHashOk returns a tuple with the TradeHash field value
// and a boolean to check if the value has been set.
func (o *NftTradeResponse) GetTradeHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeHash, true
}

// SetTradeHash sets field value
func (o *NftTradeResponse) SetTradeHash(v string) {
	o.TradeHash = v
}

func (o NftTradeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["makerFills"] = o.MakerFills
	}
	if true {
		toSerialize["takerFills"] = o.TakerFills
	}
	if true {
		toSerialize["tradeHash"] = o.TradeHash
	}
	return json.Marshal(toSerialize)
}

type NullableNftTradeResponse struct {
	value *NftTradeResponse
	isSet bool
}

func (v NullableNftTradeResponse) Get() *NftTradeResponse {
	return v.value
}

func (v *NullableNftTradeResponse) Set(val *NftTradeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTradeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTradeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTradeResponse(val *NftTradeResponse) *NullableNftTradeResponse {
	return &NullableNftTradeResponse{value: val, isSet: true}
}

func (v NullableNftTradeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTradeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
