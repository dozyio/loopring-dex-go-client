/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// AmmPoolJoinRequestV3 Join request which contains parameters and constraints that a user wants to see satisfied in order to join an AMM liquidity pool.
type AmmPoolJoinRequestV3 struct {
	// The account owner adderss
	Owner string `json:"owner"`
	// AMM pool address to be joined
	PoolAddress string            `json:"poolAddress"`
	JoinTokens  AmmPoolJoinTokens `json:"joinTokens"`
	// Offchain request storage Id
	StorageIds string `json:"storageIds"`
	// fee of join request
	Fee string `json:"fee"`
	// Timestamp for order to become invalid
	ValidUntil int32 `json:"validUntil"`
	// AMM join request eddsa signature
	EddsaSignature *string `json:"eddsaSignature,omitempty"`
	// AMM join request ecdsa signature
	EcdsaSignature *string `json:"ecdsaSignature,omitempty"`
}

// NewAmmPoolJoinRequestV3 instantiates a new AmmPoolJoinRequestV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmmPoolJoinRequestV3(owner string, poolAddress string, joinTokens AmmPoolJoinTokens, storageIds string, fee string, validUntil int32) *AmmPoolJoinRequestV3 {
	this := AmmPoolJoinRequestV3{}
	this.Owner = owner
	this.PoolAddress = poolAddress
	this.JoinTokens = joinTokens
	this.StorageIds = storageIds
	this.Fee = fee
	this.ValidUntil = validUntil
	return &this
}

// NewAmmPoolJoinRequestV3WithDefaults instantiates a new AmmPoolJoinRequestV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmmPoolJoinRequestV3WithDefaults() *AmmPoolJoinRequestV3 {
	this := AmmPoolJoinRequestV3{}
	return &this
}

// GetOwner returns the Owner field value
func (o *AmmPoolJoinRequestV3) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *AmmPoolJoinRequestV3) SetOwner(v string) {
	o.Owner = v
}

// GetPoolAddress returns the PoolAddress field value
func (o *AmmPoolJoinRequestV3) GetPoolAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolAddress
}

// GetPoolAddressOk returns a tuple with the PoolAddress field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetPoolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolAddress, true
}

// SetPoolAddress sets field value
func (o *AmmPoolJoinRequestV3) SetPoolAddress(v string) {
	o.PoolAddress = v
}

// GetJoinTokens returns the JoinTokens field value
func (o *AmmPoolJoinRequestV3) GetJoinTokens() AmmPoolJoinTokens {
	if o == nil {
		var ret AmmPoolJoinTokens
		return ret
	}

	return o.JoinTokens
}

// GetJoinTokensOk returns a tuple with the JoinTokens field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetJoinTokensOk() (*AmmPoolJoinTokens, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JoinTokens, true
}

// SetJoinTokens sets field value
func (o *AmmPoolJoinRequestV3) SetJoinTokens(v AmmPoolJoinTokens) {
	o.JoinTokens = v
}

// GetStorageIds returns the StorageIds field value
func (o *AmmPoolJoinRequestV3) GetStorageIds() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageIds
}

// GetStorageIdsOk returns a tuple with the StorageIds field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetStorageIdsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageIds, true
}

// SetStorageIds sets field value
func (o *AmmPoolJoinRequestV3) SetStorageIds(v string) {
	o.StorageIds = v
}

// GetFee returns the Fee field value
func (o *AmmPoolJoinRequestV3) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *AmmPoolJoinRequestV3) SetFee(v string) {
	o.Fee = v
}

// GetValidUntil returns the ValidUntil field value
func (o *AmmPoolJoinRequestV3) GetValidUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetValidUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *AmmPoolJoinRequestV3) SetValidUntil(v int32) {
	o.ValidUntil = v
}

// GetEddsaSignature returns the EddsaSignature field value if set, zero value otherwise.
func (o *AmmPoolJoinRequestV3) GetEddsaSignature() string {
	if o == nil || o.EddsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EddsaSignature
}

// GetEddsaSignatureOk returns a tuple with the EddsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetEddsaSignatureOk() (*string, bool) {
	if o == nil || o.EddsaSignature == nil {
		return nil, false
	}
	return o.EddsaSignature, true
}

// HasEddsaSignature returns a boolean if a field has been set.
func (o *AmmPoolJoinRequestV3) HasEddsaSignature() bool {
	if o != nil && o.EddsaSignature != nil {
		return true
	}

	return false
}

// SetEddsaSignature gets a reference to the given string and assigns it to the EddsaSignature field.
func (o *AmmPoolJoinRequestV3) SetEddsaSignature(v string) {
	o.EddsaSignature = &v
}

// GetEcdsaSignature returns the EcdsaSignature field value if set, zero value otherwise.
func (o *AmmPoolJoinRequestV3) GetEcdsaSignature() string {
	if o == nil || o.EcdsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EcdsaSignature
}

// GetEcdsaSignatureOk returns a tuple with the EcdsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinRequestV3) GetEcdsaSignatureOk() (*string, bool) {
	if o == nil || o.EcdsaSignature == nil {
		return nil, false
	}
	return o.EcdsaSignature, true
}

// HasEcdsaSignature returns a boolean if a field has been set.
func (o *AmmPoolJoinRequestV3) HasEcdsaSignature() bool {
	if o != nil && o.EcdsaSignature != nil {
		return true
	}

	return false
}

// SetEcdsaSignature gets a reference to the given string and assigns it to the EcdsaSignature field.
func (o *AmmPoolJoinRequestV3) SetEcdsaSignature(v string) {
	o.EcdsaSignature = &v
}

func (o AmmPoolJoinRequestV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["poolAddress"] = o.PoolAddress
	}
	if true {
		toSerialize["joinTokens"] = o.JoinTokens
	}
	if true {
		toSerialize["storageIds"] = o.StorageIds
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if o.EddsaSignature != nil {
		toSerialize["eddsaSignature"] = o.EddsaSignature
	}
	if o.EcdsaSignature != nil {
		toSerialize["ecdsaSignature"] = o.EcdsaSignature
	}
	return json.Marshal(toSerialize)
}

type NullableAmmPoolJoinRequestV3 struct {
	value *AmmPoolJoinRequestV3
	isSet bool
}

func (v NullableAmmPoolJoinRequestV3) Get() *AmmPoolJoinRequestV3 {
	return v.value
}

func (v *NullableAmmPoolJoinRequestV3) Set(val *AmmPoolJoinRequestV3) {
	v.value = val
	v.isSet = true
}

func (v NullableAmmPoolJoinRequestV3) IsSet() bool {
	return v.isSet
}

func (v *NullableAmmPoolJoinRequestV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmmPoolJoinRequestV3(val *AmmPoolJoinRequestV3) *NullableAmmPoolJoinRequestV3 {
	return &NullableAmmPoolJoinRequestV3{value: val, isSet: true}
}

func (v NullableAmmPoolJoinRequestV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmmPoolJoinRequestV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
