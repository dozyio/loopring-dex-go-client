/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftDepositData model.NftDepositData.description
type NftDepositData struct {
	// field.NftDepositData.id
	Id int64 `json:"id"`
	// field.NftDepositData.requestId
	RequestId int64 `json:"requestId"`
	// field.NftDepositData.hash
	Hash string `json:"hash"`
	// field.NftDepositData.txHash
	TxHash string `json:"txHash"`
	// field.NftDepositData.accountId
	AccountId int64 `json:"accountId"`
	// field.NftDepositData.owner
	Owner string `json:"owner"`
	// field.NftDepositData.status
	Status string `json:"status"`
	// field.NftDepositData.nftData
	NftData string `json:"nftData"`
	// field.NftDepositData.amount
	Amount string `json:"amount"`
	// field.NftDepositData.feeTokenSymbol
	FeeTokenSymbol string `json:"feeTokenSymbol"`
	// field.NftDepositData.feeAmount
	FeeAmount string `json:"feeAmount"`
	// field.NftDepositData.createdAt
	CreatedAt int64 `json:"createdAt"`
	// field.NftDepositData.updatedAt
	UpdatedAt int64 `json:"updatedAt"`
	// field.NftDepositData.memo
	Memo *string `json:"memo,omitempty"`
	// field.NftDepositData.depositFrom
	DepositFrom string `json:"depositFrom"`
	// field.NftDepositData.depositFromAccountId
	DepositFromAccountId int64        `json:"depositFromAccountId"`
	BlockIdInfo          *BlockIdInfo `json:"blockIdInfo,omitempty"`
	StorageInfo          *StorageInfo `json:"storageInfo,omitempty"`
}

// NewNftDepositData instantiates a new NftDepositData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftDepositData(id int64, requestId int64, hash string, txHash string, accountId int64, owner string, status string, nftData string, amount string, feeTokenSymbol string, feeAmount string, createdAt int64, updatedAt int64, depositFrom string, depositFromAccountId int64) *NftDepositData {
	this := NftDepositData{}
	this.Id = id
	this.RequestId = requestId
	this.Hash = hash
	this.TxHash = txHash
	this.AccountId = accountId
	this.Owner = owner
	this.Status = status
	this.NftData = nftData
	this.Amount = amount
	this.FeeTokenSymbol = feeTokenSymbol
	this.FeeAmount = feeAmount
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.DepositFrom = depositFrom
	this.DepositFromAccountId = depositFromAccountId
	return &this
}

// NewNftDepositDataWithDefaults instantiates a new NftDepositData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftDepositDataWithDefaults() *NftDepositData {
	this := NftDepositData{}
	return &this
}

// GetId returns the Id field value
func (o *NftDepositData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NftDepositData) SetId(v int64) {
	o.Id = v
}

// GetRequestId returns the RequestId field value
func (o *NftDepositData) GetRequestId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetRequestIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *NftDepositData) SetRequestId(v int64) {
	o.RequestId = v
}

// GetHash returns the Hash field value
func (o *NftDepositData) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *NftDepositData) SetHash(v string) {
	o.Hash = v
}

// GetTxHash returns the TxHash field value
func (o *NftDepositData) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *NftDepositData) SetTxHash(v string) {
	o.TxHash = v
}

// GetAccountId returns the AccountId field value
func (o *NftDepositData) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NftDepositData) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOwner returns the Owner field value
func (o *NftDepositData) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *NftDepositData) SetOwner(v string) {
	o.Owner = v
}

// GetStatus returns the Status field value
func (o *NftDepositData) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NftDepositData) SetStatus(v string) {
	o.Status = v
}

// GetNftData returns the NftData field value
func (o *NftDepositData) GetNftData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetNftDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftData, true
}

// SetNftData sets field value
func (o *NftDepositData) SetNftData(v string) {
	o.NftData = v
}

// GetAmount returns the Amount field value
func (o *NftDepositData) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *NftDepositData) SetAmount(v string) {
	o.Amount = v
}

// GetFeeTokenSymbol returns the FeeTokenSymbol field value
func (o *NftDepositData) GetFeeTokenSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeTokenSymbol
}

// GetFeeTokenSymbolOk returns a tuple with the FeeTokenSymbol field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetFeeTokenSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeTokenSymbol, true
}

// SetFeeTokenSymbol sets field value
func (o *NftDepositData) SetFeeTokenSymbol(v string) {
	o.FeeTokenSymbol = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *NftDepositData) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *NftDepositData) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NftDepositData) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NftDepositData) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *NftDepositData) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *NftDepositData) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *NftDepositData) GetMemo() string {
	if o == nil || o.Memo == nil {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetMemoOk() (*string, bool) {
	if o == nil || o.Memo == nil {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *NftDepositData) HasMemo() bool {
	if o != nil && o.Memo != nil {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *NftDepositData) SetMemo(v string) {
	o.Memo = &v
}

// GetDepositFrom returns the DepositFrom field value
func (o *NftDepositData) GetDepositFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepositFrom
}

// GetDepositFromOk returns a tuple with the DepositFrom field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetDepositFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepositFrom, true
}

// SetDepositFrom sets field value
func (o *NftDepositData) SetDepositFrom(v string) {
	o.DepositFrom = v
}

// GetDepositFromAccountId returns the DepositFromAccountId field value
func (o *NftDepositData) GetDepositFromAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepositFromAccountId
}

// GetDepositFromAccountIdOk returns a tuple with the DepositFromAccountId field value
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetDepositFromAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepositFromAccountId, true
}

// SetDepositFromAccountId sets field value
func (o *NftDepositData) SetDepositFromAccountId(v int64) {
	o.DepositFromAccountId = v
}

// GetBlockIdInfo returns the BlockIdInfo field value if set, zero value otherwise.
func (o *NftDepositData) GetBlockIdInfo() BlockIdInfo {
	if o == nil || o.BlockIdInfo == nil {
		var ret BlockIdInfo
		return ret
	}
	return *o.BlockIdInfo
}

// GetBlockIdInfoOk returns a tuple with the BlockIdInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetBlockIdInfoOk() (*BlockIdInfo, bool) {
	if o == nil || o.BlockIdInfo == nil {
		return nil, false
	}
	return o.BlockIdInfo, true
}

// HasBlockIdInfo returns a boolean if a field has been set.
func (o *NftDepositData) HasBlockIdInfo() bool {
	if o != nil && o.BlockIdInfo != nil {
		return true
	}

	return false
}

// SetBlockIdInfo gets a reference to the given BlockIdInfo and assigns it to the BlockIdInfo field.
func (o *NftDepositData) SetBlockIdInfo(v BlockIdInfo) {
	o.BlockIdInfo = &v
}

// GetStorageInfo returns the StorageInfo field value if set, zero value otherwise.
func (o *NftDepositData) GetStorageInfo() StorageInfo {
	if o == nil || o.StorageInfo == nil {
		var ret StorageInfo
		return ret
	}
	return *o.StorageInfo
}

// GetStorageInfoOk returns a tuple with the StorageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftDepositData) GetStorageInfoOk() (*StorageInfo, bool) {
	if o == nil || o.StorageInfo == nil {
		return nil, false
	}
	return o.StorageInfo, true
}

// HasStorageInfo returns a boolean if a field has been set.
func (o *NftDepositData) HasStorageInfo() bool {
	if o != nil && o.StorageInfo != nil {
		return true
	}

	return false
}

// SetStorageInfo gets a reference to the given StorageInfo and assigns it to the StorageInfo field.
func (o *NftDepositData) SetStorageInfo(v StorageInfo) {
	o.StorageInfo = &v
}

func (o NftDepositData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["txHash"] = o.TxHash
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["nftData"] = o.NftData
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["feeTokenSymbol"] = o.FeeTokenSymbol
	}
	if true {
		toSerialize["feeAmount"] = o.FeeAmount
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Memo != nil {
		toSerialize["memo"] = o.Memo
	}
	if true {
		toSerialize["depositFrom"] = o.DepositFrom
	}
	if true {
		toSerialize["depositFromAccountId"] = o.DepositFromAccountId
	}
	if o.BlockIdInfo != nil {
		toSerialize["blockIdInfo"] = o.BlockIdInfo
	}
	if o.StorageInfo != nil {
		toSerialize["storageInfo"] = o.StorageInfo
	}
	return json.Marshal(toSerialize)
}

type NullableNftDepositData struct {
	value *NftDepositData
	isSet bool
}

func (v NullableNftDepositData) Get() *NftDepositData {
	return v.value
}

func (v *NullableNftDepositData) Set(val *NftDepositData) {
	v.value = val
	v.isSet = true
}

func (v NullableNftDepositData) IsSet() bool {
	return v.isSet
}

func (v *NullableNftDepositData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftDepositData(val *NftDepositData) *NullableNftDepositData {
	return &NullableNftDepositData{value: val, isSet: true}
}

func (v NullableNftDepositData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftDepositData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
