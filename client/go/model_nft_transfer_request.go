/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftTransferRequest Submit NFT transfer request
type NftTransferRequest struct {
	// exchange address
	Exchange string `json:"exchange"`
	// payer account ID
	FromAccountId int64 `json:"fromAccountId"`
	// payer account address
	FromAddress string `json:"fromAddress"`
	// payee account ID
	ToAccountId int64 `json:"toAccountId"`
	// payer account address
	ToAddress string             `json:"toAddress"`
	Token     NftTokenAmountInfo `json:"token"`
	MaxFee    TokenAmountInfo    `json:"maxFee"`
	// offchain Id
	StorageId int64 `json:"storageId"`
	// Timestamp for order to become invalid
	ValidUntil         int32               `json:"validUntil"`
	CounterFactualInfo *CounterFactualInfo `json:"counterFactualInfo,omitempty"`
	// eddsa signature
	EddsaSignature *string `json:"eddsaSignature,omitempty"`
	// ecdsa signature
	EcdsaSignature *string `json:"ecdsaSignature,omitempty"`
	// An approved hash string which was already submitted on eth mainnet
	HashApproved *string `json:"hashApproved,omitempty"`
	// transfer memo
	Memo *string `json:"memo,omitempty"`
	// field.OriginTransferRequestV3.payPayeeUpdateAccount
	PayPayeeUpdateAccount *bool `json:"payPayeeUpdateAccount,omitempty"`
}

// NewNftTransferRequest instantiates a new NftTransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTransferRequest(exchange string, fromAccountId int64, fromAddress string, toAccountId int64, toAddress string, token NftTokenAmountInfo, maxFee TokenAmountInfo, storageId int64, validUntil int32) *NftTransferRequest {
	this := NftTransferRequest{}
	this.Exchange = exchange
	this.FromAccountId = fromAccountId
	this.FromAddress = fromAddress
	this.ToAccountId = toAccountId
	this.ToAddress = toAddress
	this.Token = token
	this.MaxFee = maxFee
	this.StorageId = storageId
	this.ValidUntil = validUntil
	return &this
}

// NewNftTransferRequestWithDefaults instantiates a new NftTransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTransferRequestWithDefaults() *NftTransferRequest {
	this := NftTransferRequest{}
	return &this
}

// GetExchange returns the Exchange field value
func (o *NftTransferRequest) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *NftTransferRequest) SetExchange(v string) {
	o.Exchange = v
}

// GetFromAccountId returns the FromAccountId field value
func (o *NftTransferRequest) GetFromAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FromAccountId
}

// GetFromAccountIdOk returns a tuple with the FromAccountId field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetFromAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAccountId, true
}

// SetFromAccountId sets field value
func (o *NftTransferRequest) SetFromAccountId(v int64) {
	o.FromAccountId = v
}

// GetFromAddress returns the FromAddress field value
func (o *NftTransferRequest) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *NftTransferRequest) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetToAccountId returns the ToAccountId field value
func (o *NftTransferRequest) GetToAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToAccountId
}

// GetToAccountIdOk returns a tuple with the ToAccountId field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetToAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAccountId, true
}

// SetToAccountId sets field value
func (o *NftTransferRequest) SetToAccountId(v int64) {
	o.ToAccountId = v
}

// GetToAddress returns the ToAddress field value
func (o *NftTransferRequest) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *NftTransferRequest) SetToAddress(v string) {
	o.ToAddress = v
}

// GetToken returns the Token field value
func (o *NftTransferRequest) GetToken() NftTokenAmountInfo {
	if o == nil {
		var ret NftTokenAmountInfo
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetTokenOk() (*NftTokenAmountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *NftTransferRequest) SetToken(v NftTokenAmountInfo) {
	o.Token = v
}

// GetMaxFee returns the MaxFee field value
func (o *NftTransferRequest) GetMaxFee() TokenAmountInfo {
	if o == nil {
		var ret TokenAmountInfo
		return ret
	}

	return o.MaxFee
}

// GetMaxFeeOk returns a tuple with the MaxFee field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetMaxFeeOk() (*TokenAmountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFee, true
}

// SetMaxFee sets field value
func (o *NftTransferRequest) SetMaxFee(v TokenAmountInfo) {
	o.MaxFee = v
}

// GetStorageId returns the StorageId field value
func (o *NftTransferRequest) GetStorageId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetStorageIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *NftTransferRequest) SetStorageId(v int64) {
	o.StorageId = v
}

// GetValidUntil returns the ValidUntil field value
func (o *NftTransferRequest) GetValidUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetValidUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *NftTransferRequest) SetValidUntil(v int32) {
	o.ValidUntil = v
}

// GetCounterFactualInfo returns the CounterFactualInfo field value if set, zero value otherwise.
func (o *NftTransferRequest) GetCounterFactualInfo() CounterFactualInfo {
	if o == nil || o.CounterFactualInfo == nil {
		var ret CounterFactualInfo
		return ret
	}
	return *o.CounterFactualInfo
}

// GetCounterFactualInfoOk returns a tuple with the CounterFactualInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetCounterFactualInfoOk() (*CounterFactualInfo, bool) {
	if o == nil || o.CounterFactualInfo == nil {
		return nil, false
	}
	return o.CounterFactualInfo, true
}

// HasCounterFactualInfo returns a boolean if a field has been set.
func (o *NftTransferRequest) HasCounterFactualInfo() bool {
	if o != nil && o.CounterFactualInfo != nil {
		return true
	}

	return false
}

// SetCounterFactualInfo gets a reference to the given CounterFactualInfo and assigns it to the CounterFactualInfo field.
func (o *NftTransferRequest) SetCounterFactualInfo(v CounterFactualInfo) {
	o.CounterFactualInfo = &v
}

// GetEddsaSignature returns the EddsaSignature field value if set, zero value otherwise.
func (o *NftTransferRequest) GetEddsaSignature() string {
	if o == nil || o.EddsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EddsaSignature
}

// GetEddsaSignatureOk returns a tuple with the EddsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetEddsaSignatureOk() (*string, bool) {
	if o == nil || o.EddsaSignature == nil {
		return nil, false
	}
	return o.EddsaSignature, true
}

// HasEddsaSignature returns a boolean if a field has been set.
func (o *NftTransferRequest) HasEddsaSignature() bool {
	if o != nil && o.EddsaSignature != nil {
		return true
	}

	return false
}

// SetEddsaSignature gets a reference to the given string and assigns it to the EddsaSignature field.
func (o *NftTransferRequest) SetEddsaSignature(v string) {
	o.EddsaSignature = &v
}

// GetEcdsaSignature returns the EcdsaSignature field value if set, zero value otherwise.
func (o *NftTransferRequest) GetEcdsaSignature() string {
	if o == nil || o.EcdsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EcdsaSignature
}

// GetEcdsaSignatureOk returns a tuple with the EcdsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetEcdsaSignatureOk() (*string, bool) {
	if o == nil || o.EcdsaSignature == nil {
		return nil, false
	}
	return o.EcdsaSignature, true
}

// HasEcdsaSignature returns a boolean if a field has been set.
func (o *NftTransferRequest) HasEcdsaSignature() bool {
	if o != nil && o.EcdsaSignature != nil {
		return true
	}

	return false
}

// SetEcdsaSignature gets a reference to the given string and assigns it to the EcdsaSignature field.
func (o *NftTransferRequest) SetEcdsaSignature(v string) {
	o.EcdsaSignature = &v
}

// GetHashApproved returns the HashApproved field value if set, zero value otherwise.
func (o *NftTransferRequest) GetHashApproved() string {
	if o == nil || o.HashApproved == nil {
		var ret string
		return ret
	}
	return *o.HashApproved
}

// GetHashApprovedOk returns a tuple with the HashApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetHashApprovedOk() (*string, bool) {
	if o == nil || o.HashApproved == nil {
		return nil, false
	}
	return o.HashApproved, true
}

// HasHashApproved returns a boolean if a field has been set.
func (o *NftTransferRequest) HasHashApproved() bool {
	if o != nil && o.HashApproved != nil {
		return true
	}

	return false
}

// SetHashApproved gets a reference to the given string and assigns it to the HashApproved field.
func (o *NftTransferRequest) SetHashApproved(v string) {
	o.HashApproved = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *NftTransferRequest) GetMemo() string {
	if o == nil || o.Memo == nil {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetMemoOk() (*string, bool) {
	if o == nil || o.Memo == nil {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *NftTransferRequest) HasMemo() bool {
	if o != nil && o.Memo != nil {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *NftTransferRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetPayPayeeUpdateAccount returns the PayPayeeUpdateAccount field value if set, zero value otherwise.
func (o *NftTransferRequest) GetPayPayeeUpdateAccount() bool {
	if o == nil || o.PayPayeeUpdateAccount == nil {
		var ret bool
		return ret
	}
	return *o.PayPayeeUpdateAccount
}

// GetPayPayeeUpdateAccountOk returns a tuple with the PayPayeeUpdateAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTransferRequest) GetPayPayeeUpdateAccountOk() (*bool, bool) {
	if o == nil || o.PayPayeeUpdateAccount == nil {
		return nil, false
	}
	return o.PayPayeeUpdateAccount, true
}

// HasPayPayeeUpdateAccount returns a boolean if a field has been set.
func (o *NftTransferRequest) HasPayPayeeUpdateAccount() bool {
	if o != nil && o.PayPayeeUpdateAccount != nil {
		return true
	}

	return false
}

// SetPayPayeeUpdateAccount gets a reference to the given bool and assigns it to the PayPayeeUpdateAccount field.
func (o *NftTransferRequest) SetPayPayeeUpdateAccount(v bool) {
	o.PayPayeeUpdateAccount = &v
}

func (o NftTransferRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["fromAccountId"] = o.FromAccountId
	}
	if true {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if true {
		toSerialize["toAccountId"] = o.ToAccountId
	}
	if true {
		toSerialize["toAddress"] = o.ToAddress
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["maxFee"] = o.MaxFee
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if o.CounterFactualInfo != nil {
		toSerialize["counterFactualInfo"] = o.CounterFactualInfo
	}
	if o.EddsaSignature != nil {
		toSerialize["eddsaSignature"] = o.EddsaSignature
	}
	if o.EcdsaSignature != nil {
		toSerialize["ecdsaSignature"] = o.EcdsaSignature
	}
	if o.HashApproved != nil {
		toSerialize["hashApproved"] = o.HashApproved
	}
	if o.Memo != nil {
		toSerialize["memo"] = o.Memo
	}
	if o.PayPayeeUpdateAccount != nil {
		toSerialize["payPayeeUpdateAccount"] = o.PayPayeeUpdateAccount
	}
	return json.Marshal(toSerialize)
}

type NullableNftTransferRequest struct {
	value *NftTransferRequest
	isSet bool
}

func (v NullableNftTransferRequest) Get() *NftTransferRequest {
	return v.value
}

func (v *NullableNftTransferRequest) Set(val *NftTransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTransferRequest(val *NftTransferRequest) *NullableNftTransferRequest {
	return &NullableNftTransferRequest{value: val, isSet: true}
}

func (v NullableNftTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
