/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftWithdrawalData model.NftWithdrawalData.description
type NftWithdrawalData struct {
	// field.NftWithdrawalData.id
	Id int64 `json:"id"`
	// field.NftWithdrawalData.requestId
	RequestId int64 `json:"requestId"`
	// field.NftWithdrawalData.hash
	Hash string `json:"hash"`
	// field.NftWithdrawalData.txHash
	TxHash string `json:"txHash"`
	// field.NftWithdrawalData.accountId
	AccountId int64 `json:"accountId"`
	// field.NftWithdrawalData.owner
	Owner string `json:"owner"`
	// field.NftWithdrawalData.status
	Status string `json:"status"`
	// field.NftWithdrawalData.nftData
	NftData *string `json:"nftData,omitempty"`
	// field.NftWithdrawalData.amount
	Amount *string `json:"amount,omitempty"`
	// field.NftWithdrawalData.feeTokenSymbol
	FeeTokenSymbol *string `json:"feeTokenSymbol,omitempty"`
	// field.NftWithdrawalData.feeAmount
	FeeAmount string `json:"feeAmount"`
	// field.NftWithdrawalData.createdAt
	CreatedAt int64 `json:"createdAt"`
	// field.NftWithdrawalData.updatedAt
	UpdatedAt int64 `json:"updatedAt"`
	// field.NftWithdrawalData.memo
	Memo *string `json:"memo,omitempty"`
	// field.NftWithdrawalData.recipient
	Recipient string `json:"recipient"`
	// field.NftWithdrawalData.distributeHash
	DistributeHash string `json:"distributeHash"`
	// field.NftWithdrawalData.fastWithdrawStatus
	FastWithdrawStatus string `json:"fastWithdrawStatus"`
	// field.NftWithdrawalData.isFast
	IsFast      bool         `json:"isFast"`
	BlockIdInfo *BlockIdInfo `json:"blockIdInfo,omitempty"`
	StorageInfo *StorageInfo `json:"storageInfo,omitempty"`
}

// NewNftWithdrawalData instantiates a new NftWithdrawalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftWithdrawalData(id int64, requestId int64, hash string, txHash string, accountId int64, owner string, status string, feeAmount string, createdAt int64, updatedAt int64, recipient string, distributeHash string, fastWithdrawStatus string, isFast bool) *NftWithdrawalData {
	this := NftWithdrawalData{}
	this.Id = id
	this.RequestId = requestId
	this.Hash = hash
	this.TxHash = txHash
	this.AccountId = accountId
	this.Owner = owner
	this.Status = status
	this.FeeAmount = feeAmount
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Recipient = recipient
	this.DistributeHash = distributeHash
	this.FastWithdrawStatus = fastWithdrawStatus
	this.IsFast = isFast
	return &this
}

// NewNftWithdrawalDataWithDefaults instantiates a new NftWithdrawalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftWithdrawalDataWithDefaults() *NftWithdrawalData {
	this := NftWithdrawalData{}
	return &this
}

// GetId returns the Id field value
func (o *NftWithdrawalData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NftWithdrawalData) SetId(v int64) {
	o.Id = v
}

// GetRequestId returns the RequestId field value
func (o *NftWithdrawalData) GetRequestId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetRequestIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *NftWithdrawalData) SetRequestId(v int64) {
	o.RequestId = v
}

// GetHash returns the Hash field value
func (o *NftWithdrawalData) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *NftWithdrawalData) SetHash(v string) {
	o.Hash = v
}

// GetTxHash returns the TxHash field value
func (o *NftWithdrawalData) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *NftWithdrawalData) SetTxHash(v string) {
	o.TxHash = v
}

// GetAccountId returns the AccountId field value
func (o *NftWithdrawalData) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NftWithdrawalData) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOwner returns the Owner field value
func (o *NftWithdrawalData) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *NftWithdrawalData) SetOwner(v string) {
	o.Owner = v
}

// GetStatus returns the Status field value
func (o *NftWithdrawalData) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NftWithdrawalData) SetStatus(v string) {
	o.Status = v
}

// GetNftData returns the NftData field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetNftData() string {
	if o == nil || o.NftData == nil {
		var ret string
		return ret
	}
	return *o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetNftDataOk() (*string, bool) {
	if o == nil || o.NftData == nil {
		return nil, false
	}
	return o.NftData, true
}

// HasNftData returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasNftData() bool {
	if o != nil && o.NftData != nil {
		return true
	}

	return false
}

// SetNftData gets a reference to the given string and assigns it to the NftData field.
func (o *NftWithdrawalData) SetNftData(v string) {
	o.NftData = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *NftWithdrawalData) SetAmount(v string) {
	o.Amount = &v
}

// GetFeeTokenSymbol returns the FeeTokenSymbol field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetFeeTokenSymbol() string {
	if o == nil || o.FeeTokenSymbol == nil {
		var ret string
		return ret
	}
	return *o.FeeTokenSymbol
}

// GetFeeTokenSymbolOk returns a tuple with the FeeTokenSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetFeeTokenSymbolOk() (*string, bool) {
	if o == nil || o.FeeTokenSymbol == nil {
		return nil, false
	}
	return o.FeeTokenSymbol, true
}

// HasFeeTokenSymbol returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasFeeTokenSymbol() bool {
	if o != nil && o.FeeTokenSymbol != nil {
		return true
	}

	return false
}

// SetFeeTokenSymbol gets a reference to the given string and assigns it to the FeeTokenSymbol field.
func (o *NftWithdrawalData) SetFeeTokenSymbol(v string) {
	o.FeeTokenSymbol = &v
}

// GetFeeAmount returns the FeeAmount field value
func (o *NftWithdrawalData) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *NftWithdrawalData) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NftWithdrawalData) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NftWithdrawalData) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *NftWithdrawalData) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *NftWithdrawalData) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetMemo() string {
	if o == nil || o.Memo == nil {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetMemoOk() (*string, bool) {
	if o == nil || o.Memo == nil {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasMemo() bool {
	if o != nil && o.Memo != nil {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *NftWithdrawalData) SetMemo(v string) {
	o.Memo = &v
}

// GetRecipient returns the Recipient field value
func (o *NftWithdrawalData) GetRecipient() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetRecipientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipient, true
}

// SetRecipient sets field value
func (o *NftWithdrawalData) SetRecipient(v string) {
	o.Recipient = v
}

// GetDistributeHash returns the DistributeHash field value
func (o *NftWithdrawalData) GetDistributeHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistributeHash
}

// GetDistributeHashOk returns a tuple with the DistributeHash field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetDistributeHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistributeHash, true
}

// SetDistributeHash sets field value
func (o *NftWithdrawalData) SetDistributeHash(v string) {
	o.DistributeHash = v
}

// GetFastWithdrawStatus returns the FastWithdrawStatus field value
func (o *NftWithdrawalData) GetFastWithdrawStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FastWithdrawStatus
}

// GetFastWithdrawStatusOk returns a tuple with the FastWithdrawStatus field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetFastWithdrawStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FastWithdrawStatus, true
}

// SetFastWithdrawStatus sets field value
func (o *NftWithdrawalData) SetFastWithdrawStatus(v string) {
	o.FastWithdrawStatus = v
}

// GetIsFast returns the IsFast field value
func (o *NftWithdrawalData) GetIsFast() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFast
}

// GetIsFastOk returns a tuple with the IsFast field value
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetIsFastOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFast, true
}

// SetIsFast sets field value
func (o *NftWithdrawalData) SetIsFast(v bool) {
	o.IsFast = v
}

// GetBlockIdInfo returns the BlockIdInfo field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetBlockIdInfo() BlockIdInfo {
	if o == nil || o.BlockIdInfo == nil {
		var ret BlockIdInfo
		return ret
	}
	return *o.BlockIdInfo
}

// GetBlockIdInfoOk returns a tuple with the BlockIdInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetBlockIdInfoOk() (*BlockIdInfo, bool) {
	if o == nil || o.BlockIdInfo == nil {
		return nil, false
	}
	return o.BlockIdInfo, true
}

// HasBlockIdInfo returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasBlockIdInfo() bool {
	if o != nil && o.BlockIdInfo != nil {
		return true
	}

	return false
}

// SetBlockIdInfo gets a reference to the given BlockIdInfo and assigns it to the BlockIdInfo field.
func (o *NftWithdrawalData) SetBlockIdInfo(v BlockIdInfo) {
	o.BlockIdInfo = &v
}

// GetStorageInfo returns the StorageInfo field value if set, zero value otherwise.
func (o *NftWithdrawalData) GetStorageInfo() StorageInfo {
	if o == nil || o.StorageInfo == nil {
		var ret StorageInfo
		return ret
	}
	return *o.StorageInfo
}

// GetStorageInfoOk returns a tuple with the StorageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftWithdrawalData) GetStorageInfoOk() (*StorageInfo, bool) {
	if o == nil || o.StorageInfo == nil {
		return nil, false
	}
	return o.StorageInfo, true
}

// HasStorageInfo returns a boolean if a field has been set.
func (o *NftWithdrawalData) HasStorageInfo() bool {
	if o != nil && o.StorageInfo != nil {
		return true
	}

	return false
}

// SetStorageInfo gets a reference to the given StorageInfo and assigns it to the StorageInfo field.
func (o *NftWithdrawalData) SetStorageInfo(v StorageInfo) {
	o.StorageInfo = &v
}

func (o NftWithdrawalData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if true {
		toSerialize["txHash"] = o.TxHash
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.NftData != nil {
		toSerialize["nftData"] = o.NftData
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.FeeTokenSymbol != nil {
		toSerialize["feeTokenSymbol"] = o.FeeTokenSymbol
	}
	if true {
		toSerialize["feeAmount"] = o.FeeAmount
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Memo != nil {
		toSerialize["memo"] = o.Memo
	}
	if true {
		toSerialize["recipient"] = o.Recipient
	}
	if true {
		toSerialize["distributeHash"] = o.DistributeHash
	}
	if true {
		toSerialize["fastWithdrawStatus"] = o.FastWithdrawStatus
	}
	if true {
		toSerialize["isFast"] = o.IsFast
	}
	if o.BlockIdInfo != nil {
		toSerialize["blockIdInfo"] = o.BlockIdInfo
	}
	if o.StorageInfo != nil {
		toSerialize["storageInfo"] = o.StorageInfo
	}
	return json.Marshal(toSerialize)
}

type NullableNftWithdrawalData struct {
	value *NftWithdrawalData
	isSet bool
}

func (v NullableNftWithdrawalData) Get() *NftWithdrawalData {
	return v.value
}

func (v *NullableNftWithdrawalData) Set(val *NftWithdrawalData) {
	v.value = val
	v.isSet = true
}

func (v NullableNftWithdrawalData) IsSet() bool {
	return v.isSet
}

func (v *NullableNftWithdrawalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftWithdrawalData(val *NftWithdrawalData) *NullableNftWithdrawalData {
	return &NullableNftWithdrawalData{value: val, isSet: true}
}

func (v NullableNftWithdrawalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftWithdrawalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
