/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OrderInfo The result of token amount
type OrderInfo struct {
	// The minimum amount
	MinAmount *string `json:"minAmount,omitempty"`
	// Maker rate
	MakerRate *int32 `json:"makerRate,omitempty"`
	// Taker rate
	TakerRate *int32 `json:"takerRate,omitempty"`
}

// NewOrderInfo instantiates a new OrderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderInfo() *OrderInfo {
	this := OrderInfo{}
	return &this
}

// NewOrderInfoWithDefaults instantiates a new OrderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderInfoWithDefaults() *OrderInfo {
	this := OrderInfo{}
	return &this
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *OrderInfo) GetMinAmount() string {
	if o == nil || o.MinAmount == nil {
		var ret string
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderInfo) GetMinAmountOk() (*string, bool) {
	if o == nil || o.MinAmount == nil {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *OrderInfo) HasMinAmount() bool {
	if o != nil && o.MinAmount != nil {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given string and assigns it to the MinAmount field.
func (o *OrderInfo) SetMinAmount(v string) {
	o.MinAmount = &v
}

// GetMakerRate returns the MakerRate field value if set, zero value otherwise.
func (o *OrderInfo) GetMakerRate() int32 {
	if o == nil || o.MakerRate == nil {
		var ret int32
		return ret
	}
	return *o.MakerRate
}

// GetMakerRateOk returns a tuple with the MakerRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderInfo) GetMakerRateOk() (*int32, bool) {
	if o == nil || o.MakerRate == nil {
		return nil, false
	}
	return o.MakerRate, true
}

// HasMakerRate returns a boolean if a field has been set.
func (o *OrderInfo) HasMakerRate() bool {
	if o != nil && o.MakerRate != nil {
		return true
	}

	return false
}

// SetMakerRate gets a reference to the given int32 and assigns it to the MakerRate field.
func (o *OrderInfo) SetMakerRate(v int32) {
	o.MakerRate = &v
}

// GetTakerRate returns the TakerRate field value if set, zero value otherwise.
func (o *OrderInfo) GetTakerRate() int32 {
	if o == nil || o.TakerRate == nil {
		var ret int32
		return ret
	}
	return *o.TakerRate
}

// GetTakerRateOk returns a tuple with the TakerRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderInfo) GetTakerRateOk() (*int32, bool) {
	if o == nil || o.TakerRate == nil {
		return nil, false
	}
	return o.TakerRate, true
}

// HasTakerRate returns a boolean if a field has been set.
func (o *OrderInfo) HasTakerRate() bool {
	if o != nil && o.TakerRate != nil {
		return true
	}

	return false
}

// SetTakerRate gets a reference to the given int32 and assigns it to the TakerRate field.
func (o *OrderInfo) SetTakerRate(v int32) {
	o.TakerRate = &v
}

func (o OrderInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinAmount != nil {
		toSerialize["minAmount"] = o.MinAmount
	}
	if o.MakerRate != nil {
		toSerialize["makerRate"] = o.MakerRate
	}
	if o.TakerRate != nil {
		toSerialize["takerRate"] = o.TakerRate
	}
	return json.Marshal(toSerialize)
}

type NullableOrderInfo struct {
	value *OrderInfo
	isSet bool
}

func (v NullableOrderInfo) Get() *OrderInfo {
	return v.value
}

func (v *NullableOrderInfo) Set(val *OrderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderInfo(val *OrderInfo) *NullableOrderInfo {
	return &NullableOrderInfo{value: val, isSet: true}
}

func (v NullableOrderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
