/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SubmitOrderResult Single order submission results.
type SubmitOrderResult struct {
	// Hash of order submitted
	Hash  string      `json:"hash"`
	Error *ResultInfo `json:"error,omitempty"`
}

// NewSubmitOrderResult instantiates a new SubmitOrderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitOrderResult(hash string) *SubmitOrderResult {
	this := SubmitOrderResult{}
	this.Hash = hash
	return &this
}

// NewSubmitOrderResultWithDefaults instantiates a new SubmitOrderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitOrderResultWithDefaults() *SubmitOrderResult {
	this := SubmitOrderResult{}
	return &this
}

// GetHash returns the Hash field value
func (o *SubmitOrderResult) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *SubmitOrderResult) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *SubmitOrderResult) SetHash(v string) {
	o.Hash = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SubmitOrderResult) GetError() ResultInfo {
	if o == nil || o.Error == nil {
		var ret ResultInfo
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitOrderResult) GetErrorOk() (*ResultInfo, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SubmitOrderResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ResultInfo and assigns it to the Error field.
func (o *SubmitOrderResult) SetError(v ResultInfo) {
	o.Error = &v
}

func (o SubmitOrderResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hash"] = o.Hash
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitOrderResult struct {
	value *SubmitOrderResult
	isSet bool
}

func (v NullableSubmitOrderResult) Get() *SubmitOrderResult {
	return v.value
}

func (v *NullableSubmitOrderResult) Set(val *SubmitOrderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitOrderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitOrderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitOrderResult(val *SubmitOrderResult) *NullableSubmitOrderResult {
	return &NullableSubmitOrderResult{value: val, isSet: true}
}

func (v NullableSubmitOrderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitOrderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
