/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OffChainWithdrawalRequestV3 struct for OffChainWithdrawalRequestV3
type OffChainWithdrawalRequestV3 struct {
	// exchange address
	Exchange string `json:"exchange"`
	// account ID
	AccountId int64 `json:"accountId"`
	// account owner address
	Owner  string        `json:"owner"`
	Token  TokenVolumeV3 `json:"token"`
	MaxFee TokenVolumeV3 `json:"maxFee"`
	// offchain ID
	StorageId int64 `json:"storageId"`
	// Timestamp for order to become invalid
	ValidUntil int32 `json:"validUntil"`
	// min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution, but people can also assign this min gas, so Loopring have to allocate higher gas value for this specific distribution, 0 means let loopring choose the reasonable gas
	MinGas *int32 `json:"minGas,omitempty"`
	// withdraw to address
	To string `json:"to"`
	// extra data for complex withdraw mode, normally none
	ExtraData *string `json:"extraData,omitempty"`
	// is fast withdraw mode
	FastWithdrawalMode *bool               `json:"fastWithdrawalMode,omitempty"`
	CounterFactualInfo *CounterFactualInfo `json:"counterFactualInfo,omitempty"`
	// eddsa signature
	EddsaSignature *string `json:"eddsaSignature,omitempty"`
	// ecdsa signature
	EcdsaSignature *string `json:"ecdsaSignature,omitempty"`
	// An approved hash string which was already submitted on eth mainnet
	HashApproved *string `json:"hashApproved,omitempty"`
}

// NewOffChainWithdrawalRequestV3 instantiates a new OffChainWithdrawalRequestV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffChainWithdrawalRequestV3(exchange string, accountId int64, owner string, token TokenVolumeV3, maxFee TokenVolumeV3, storageId int64, validUntil int32, to string) *OffChainWithdrawalRequestV3 {
	this := OffChainWithdrawalRequestV3{}
	this.Exchange = exchange
	this.AccountId = accountId
	this.Owner = owner
	this.Token = token
	this.MaxFee = maxFee
	this.StorageId = storageId
	this.ValidUntil = validUntil
	this.To = to
	return &this
}

// NewOffChainWithdrawalRequestV3WithDefaults instantiates a new OffChainWithdrawalRequestV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffChainWithdrawalRequestV3WithDefaults() *OffChainWithdrawalRequestV3 {
	this := OffChainWithdrawalRequestV3{}
	return &this
}

// GetExchange returns the Exchange field value
func (o *OffChainWithdrawalRequestV3) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *OffChainWithdrawalRequestV3) SetExchange(v string) {
	o.Exchange = v
}

// GetAccountId returns the AccountId field value
func (o *OffChainWithdrawalRequestV3) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *OffChainWithdrawalRequestV3) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOwner returns the Owner field value
func (o *OffChainWithdrawalRequestV3) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *OffChainWithdrawalRequestV3) SetOwner(v string) {
	o.Owner = v
}

// GetToken returns the Token field value
func (o *OffChainWithdrawalRequestV3) GetToken() TokenVolumeV3 {
	if o == nil {
		var ret TokenVolumeV3
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetTokenOk() (*TokenVolumeV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *OffChainWithdrawalRequestV3) SetToken(v TokenVolumeV3) {
	o.Token = v
}

// GetMaxFee returns the MaxFee field value
func (o *OffChainWithdrawalRequestV3) GetMaxFee() TokenVolumeV3 {
	if o == nil {
		var ret TokenVolumeV3
		return ret
	}

	return o.MaxFee
}

// GetMaxFeeOk returns a tuple with the MaxFee field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetMaxFeeOk() (*TokenVolumeV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxFee, true
}

// SetMaxFee sets field value
func (o *OffChainWithdrawalRequestV3) SetMaxFee(v TokenVolumeV3) {
	o.MaxFee = v
}

// GetStorageId returns the StorageId field value
func (o *OffChainWithdrawalRequestV3) GetStorageId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetStorageIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *OffChainWithdrawalRequestV3) SetStorageId(v int64) {
	o.StorageId = v
}

// GetValidUntil returns the ValidUntil field value
func (o *OffChainWithdrawalRequestV3) GetValidUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetValidUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *OffChainWithdrawalRequestV3) SetValidUntil(v int32) {
	o.ValidUntil = v
}

// GetMinGas returns the MinGas field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetMinGas() int32 {
	if o == nil || o.MinGas == nil {
		var ret int32
		return ret
	}
	return *o.MinGas
}

// GetMinGasOk returns a tuple with the MinGas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetMinGasOk() (*int32, bool) {
	if o == nil || o.MinGas == nil {
		return nil, false
	}
	return o.MinGas, true
}

// HasMinGas returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasMinGas() bool {
	if o != nil && o.MinGas != nil {
		return true
	}

	return false
}

// SetMinGas gets a reference to the given int32 and assigns it to the MinGas field.
func (o *OffChainWithdrawalRequestV3) SetMinGas(v int32) {
	o.MinGas = &v
}

// GetTo returns the To field value
func (o *OffChainWithdrawalRequestV3) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *OffChainWithdrawalRequestV3) SetTo(v string) {
	o.To = v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetExtraData() string {
	if o == nil || o.ExtraData == nil {
		var ret string
		return ret
	}
	return *o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetExtraDataOk() (*string, bool) {
	if o == nil || o.ExtraData == nil {
		return nil, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasExtraData() bool {
	if o != nil && o.ExtraData != nil {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given string and assigns it to the ExtraData field.
func (o *OffChainWithdrawalRequestV3) SetExtraData(v string) {
	o.ExtraData = &v
}

// GetFastWithdrawalMode returns the FastWithdrawalMode field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetFastWithdrawalMode() bool {
	if o == nil || o.FastWithdrawalMode == nil {
		var ret bool
		return ret
	}
	return *o.FastWithdrawalMode
}

// GetFastWithdrawalModeOk returns a tuple with the FastWithdrawalMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetFastWithdrawalModeOk() (*bool, bool) {
	if o == nil || o.FastWithdrawalMode == nil {
		return nil, false
	}
	return o.FastWithdrawalMode, true
}

// HasFastWithdrawalMode returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasFastWithdrawalMode() bool {
	if o != nil && o.FastWithdrawalMode != nil {
		return true
	}

	return false
}

// SetFastWithdrawalMode gets a reference to the given bool and assigns it to the FastWithdrawalMode field.
func (o *OffChainWithdrawalRequestV3) SetFastWithdrawalMode(v bool) {
	o.FastWithdrawalMode = &v
}

// GetCounterFactualInfo returns the CounterFactualInfo field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetCounterFactualInfo() CounterFactualInfo {
	if o == nil || o.CounterFactualInfo == nil {
		var ret CounterFactualInfo
		return ret
	}
	return *o.CounterFactualInfo
}

// GetCounterFactualInfoOk returns a tuple with the CounterFactualInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetCounterFactualInfoOk() (*CounterFactualInfo, bool) {
	if o == nil || o.CounterFactualInfo == nil {
		return nil, false
	}
	return o.CounterFactualInfo, true
}

// HasCounterFactualInfo returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasCounterFactualInfo() bool {
	if o != nil && o.CounterFactualInfo != nil {
		return true
	}

	return false
}

// SetCounterFactualInfo gets a reference to the given CounterFactualInfo and assigns it to the CounterFactualInfo field.
func (o *OffChainWithdrawalRequestV3) SetCounterFactualInfo(v CounterFactualInfo) {
	o.CounterFactualInfo = &v
}

// GetEddsaSignature returns the EddsaSignature field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetEddsaSignature() string {
	if o == nil || o.EddsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EddsaSignature
}

// GetEddsaSignatureOk returns a tuple with the EddsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetEddsaSignatureOk() (*string, bool) {
	if o == nil || o.EddsaSignature == nil {
		return nil, false
	}
	return o.EddsaSignature, true
}

// HasEddsaSignature returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasEddsaSignature() bool {
	if o != nil && o.EddsaSignature != nil {
		return true
	}

	return false
}

// SetEddsaSignature gets a reference to the given string and assigns it to the EddsaSignature field.
func (o *OffChainWithdrawalRequestV3) SetEddsaSignature(v string) {
	o.EddsaSignature = &v
}

// GetEcdsaSignature returns the EcdsaSignature field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetEcdsaSignature() string {
	if o == nil || o.EcdsaSignature == nil {
		var ret string
		return ret
	}
	return *o.EcdsaSignature
}

// GetEcdsaSignatureOk returns a tuple with the EcdsaSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetEcdsaSignatureOk() (*string, bool) {
	if o == nil || o.EcdsaSignature == nil {
		return nil, false
	}
	return o.EcdsaSignature, true
}

// HasEcdsaSignature returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasEcdsaSignature() bool {
	if o != nil && o.EcdsaSignature != nil {
		return true
	}

	return false
}

// SetEcdsaSignature gets a reference to the given string and assigns it to the EcdsaSignature field.
func (o *OffChainWithdrawalRequestV3) SetEcdsaSignature(v string) {
	o.EcdsaSignature = &v
}

// GetHashApproved returns the HashApproved field value if set, zero value otherwise.
func (o *OffChainWithdrawalRequestV3) GetHashApproved() string {
	if o == nil || o.HashApproved == nil {
		var ret string
		return ret
	}
	return *o.HashApproved
}

// GetHashApprovedOk returns a tuple with the HashApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffChainWithdrawalRequestV3) GetHashApprovedOk() (*string, bool) {
	if o == nil || o.HashApproved == nil {
		return nil, false
	}
	return o.HashApproved, true
}

// HasHashApproved returns a boolean if a field has been set.
func (o *OffChainWithdrawalRequestV3) HasHashApproved() bool {
	if o != nil && o.HashApproved != nil {
		return true
	}

	return false
}

// SetHashApproved gets a reference to the given string and assigns it to the HashApproved field.
func (o *OffChainWithdrawalRequestV3) SetHashApproved(v string) {
	o.HashApproved = &v
}

func (o OffChainWithdrawalRequestV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["maxFee"] = o.MaxFee
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if o.MinGas != nil {
		toSerialize["minGas"] = o.MinGas
	}
	if true {
		toSerialize["to"] = o.To
	}
	if o.ExtraData != nil {
		toSerialize["extraData"] = o.ExtraData
	}
	if o.FastWithdrawalMode != nil {
		toSerialize["fastWithdrawalMode"] = o.FastWithdrawalMode
	}
	if o.CounterFactualInfo != nil {
		toSerialize["counterFactualInfo"] = o.CounterFactualInfo
	}
	if o.EddsaSignature != nil {
		toSerialize["eddsaSignature"] = o.EddsaSignature
	}
	if o.EcdsaSignature != nil {
		toSerialize["ecdsaSignature"] = o.EcdsaSignature
	}
	if o.HashApproved != nil {
		toSerialize["hashApproved"] = o.HashApproved
	}
	return json.Marshal(toSerialize)
}

type NullableOffChainWithdrawalRequestV3 struct {
	value *OffChainWithdrawalRequestV3
	isSet bool
}

func (v NullableOffChainWithdrawalRequestV3) Get() *OffChainWithdrawalRequestV3 {
	return v.value
}

func (v *NullableOffChainWithdrawalRequestV3) Set(val *OffChainWithdrawalRequestV3) {
	v.value = val
	v.isSet = true
}

func (v NullableOffChainWithdrawalRequestV3) IsSet() bool {
	return v.isSet
}

func (v *NullableOffChainWithdrawalRequestV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffChainWithdrawalRequestV3(val *OffChainWithdrawalRequestV3) *NullableOffChainWithdrawalRequestV3 {
	return &NullableOffChainWithdrawalRequestV3{value: val, isSet: true}
}

func (v NullableOffChainWithdrawalRequestV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffChainWithdrawalRequestV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
