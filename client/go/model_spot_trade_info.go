/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// SpotTradeInfo struct for SpotTradeInfo
type SpotTradeInfo struct {
	// field.spotTradeInfo.submitterId
	SubmitterId *int64 `json:"submitterId,omitempty"`
	// field.spotTradeInfo.smallOrder
	SmallOrder map[string]interface{} `json:"smallOrder,omitempty"`
	// field.spotTradeInfo.affiliate
	Affiliate map[string]interface{} `json:"affiliate,omitempty"`
}

// NewSpotTradeInfo instantiates a new SpotTradeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotTradeInfo() *SpotTradeInfo {
	this := SpotTradeInfo{}
	return &this
}

// NewSpotTradeInfoWithDefaults instantiates a new SpotTradeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotTradeInfoWithDefaults() *SpotTradeInfo {
	this := SpotTradeInfo{}
	return &this
}

// GetSubmitterId returns the SubmitterId field value if set, zero value otherwise.
func (o *SpotTradeInfo) GetSubmitterId() int64 {
	if o == nil || o.SubmitterId == nil {
		var ret int64
		return ret
	}
	return *o.SubmitterId
}

// GetSubmitterIdOk returns a tuple with the SubmitterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotTradeInfo) GetSubmitterIdOk() (*int64, bool) {
	if o == nil || o.SubmitterId == nil {
		return nil, false
	}
	return o.SubmitterId, true
}

// HasSubmitterId returns a boolean if a field has been set.
func (o *SpotTradeInfo) HasSubmitterId() bool {
	if o != nil && o.SubmitterId != nil {
		return true
	}

	return false
}

// SetSubmitterId gets a reference to the given int64 and assigns it to the SubmitterId field.
func (o *SpotTradeInfo) SetSubmitterId(v int64) {
	o.SubmitterId = &v
}

// GetSmallOrder returns the SmallOrder field value if set, zero value otherwise.
func (o *SpotTradeInfo) GetSmallOrder() map[string]interface{} {
	if o == nil || o.SmallOrder == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SmallOrder
}

// GetSmallOrderOk returns a tuple with the SmallOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotTradeInfo) GetSmallOrderOk() (map[string]interface{}, bool) {
	if o == nil || o.SmallOrder == nil {
		return nil, false
	}
	return o.SmallOrder, true
}

// HasSmallOrder returns a boolean if a field has been set.
func (o *SpotTradeInfo) HasSmallOrder() bool {
	if o != nil && o.SmallOrder != nil {
		return true
	}

	return false
}

// SetSmallOrder gets a reference to the given map[string]interface{} and assigns it to the SmallOrder field.
func (o *SpotTradeInfo) SetSmallOrder(v map[string]interface{}) {
	o.SmallOrder = v
}

// GetAffiliate returns the Affiliate field value if set, zero value otherwise.
func (o *SpotTradeInfo) GetAffiliate() map[string]interface{} {
	if o == nil || o.Affiliate == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Affiliate
}

// GetAffiliateOk returns a tuple with the Affiliate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotTradeInfo) GetAffiliateOk() (map[string]interface{}, bool) {
	if o == nil || o.Affiliate == nil {
		return nil, false
	}
	return o.Affiliate, true
}

// HasAffiliate returns a boolean if a field has been set.
func (o *SpotTradeInfo) HasAffiliate() bool {
	if o != nil && o.Affiliate != nil {
		return true
	}

	return false
}

// SetAffiliate gets a reference to the given map[string]interface{} and assigns it to the Affiliate field.
func (o *SpotTradeInfo) SetAffiliate(v map[string]interface{}) {
	o.Affiliate = v
}

func (o SpotTradeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubmitterId != nil {
		toSerialize["submitterId"] = o.SubmitterId
	}
	if o.SmallOrder != nil {
		toSerialize["smallOrder"] = o.SmallOrder
	}
	if o.Affiliate != nil {
		toSerialize["affiliate"] = o.Affiliate
	}
	return json.Marshal(toSerialize)
}

type NullableSpotTradeInfo struct {
	value *SpotTradeInfo
	isSet bool
}

func (v NullableSpotTradeInfo) Get() *SpotTradeInfo {
	return v.value
}

func (v *NullableSpotTradeInfo) Set(val *SpotTradeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotTradeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotTradeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotTradeInfo(val *SpotTradeInfo) *NullableSpotTradeInfo {
	return &NullableSpotTradeInfo{value: val, isSet: true}
}

func (v NullableSpotTradeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotTradeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
