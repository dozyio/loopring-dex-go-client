/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// AmmPoolExitRequest struct for AmmPoolExitRequest
type AmmPoolExitRequest struct {
	// field.AmmPoolJoinRequest.owner
	Owner string `json:"owner"`
	// field.AmmPoolJoinRequest.poolAddress
	PoolAddress string `json:"poolAddress"`
	// field.AmmPoolExitRequest.burnAmount
	BurnAmount string `json:"burnAmount"`
	// field.AmmPoolExitRequest.burnStorageID
	BurnStorageID int64 `json:"burnStorageID"`
	// field.AmmPoolExitRequest.exitMinAmounts
	ExitMinAmounts string `json:"exitMinAmounts"`
	// field.AmmPoolExitRequest.fee
	Fee string `json:"fee"`
	// field.AmmPoolExitRequest.validUntil
	ValidUntil int32 `json:"validUntil"`
	// field.AmmPoolExitRequest.ecdsaSig
	EcdsaSig string `json:"ecdsaSig"`
	// field.AmmPoolExitRequest.eddsaSig
	EddsaSig string `json:"eddsaSig"`
}

// NewAmmPoolExitRequest instantiates a new AmmPoolExitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmmPoolExitRequest(owner string, poolAddress string, burnAmount string, burnStorageID int64, exitMinAmounts string, fee string, validUntil int32, ecdsaSig string, eddsaSig string) *AmmPoolExitRequest {
	this := AmmPoolExitRequest{}
	this.Owner = owner
	this.PoolAddress = poolAddress
	this.BurnAmount = burnAmount
	this.BurnStorageID = burnStorageID
	this.ExitMinAmounts = exitMinAmounts
	this.Fee = fee
	this.ValidUntil = validUntil
	this.EcdsaSig = ecdsaSig
	this.EddsaSig = eddsaSig
	return &this
}

// NewAmmPoolExitRequestWithDefaults instantiates a new AmmPoolExitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmmPoolExitRequestWithDefaults() *AmmPoolExitRequest {
	this := AmmPoolExitRequest{}
	return &this
}

// GetOwner returns the Owner field value
func (o *AmmPoolExitRequest) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *AmmPoolExitRequest) SetOwner(v string) {
	o.Owner = v
}

// GetPoolAddress returns the PoolAddress field value
func (o *AmmPoolExitRequest) GetPoolAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolAddress
}

// GetPoolAddressOk returns a tuple with the PoolAddress field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetPoolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolAddress, true
}

// SetPoolAddress sets field value
func (o *AmmPoolExitRequest) SetPoolAddress(v string) {
	o.PoolAddress = v
}

// GetBurnAmount returns the BurnAmount field value
func (o *AmmPoolExitRequest) GetBurnAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BurnAmount
}

// GetBurnAmountOk returns a tuple with the BurnAmount field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetBurnAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnAmount, true
}

// SetBurnAmount sets field value
func (o *AmmPoolExitRequest) SetBurnAmount(v string) {
	o.BurnAmount = v
}

// GetBurnStorageID returns the BurnStorageID field value
func (o *AmmPoolExitRequest) GetBurnStorageID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BurnStorageID
}

// GetBurnStorageIDOk returns a tuple with the BurnStorageID field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetBurnStorageIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnStorageID, true
}

// SetBurnStorageID sets field value
func (o *AmmPoolExitRequest) SetBurnStorageID(v int64) {
	o.BurnStorageID = v
}

// GetExitMinAmounts returns the ExitMinAmounts field value
func (o *AmmPoolExitRequest) GetExitMinAmounts() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExitMinAmounts
}

// GetExitMinAmountsOk returns a tuple with the ExitMinAmounts field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetExitMinAmountsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitMinAmounts, true
}

// SetExitMinAmounts sets field value
func (o *AmmPoolExitRequest) SetExitMinAmounts(v string) {
	o.ExitMinAmounts = v
}

// GetFee returns the Fee field value
func (o *AmmPoolExitRequest) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *AmmPoolExitRequest) SetFee(v string) {
	o.Fee = v
}

// GetValidUntil returns the ValidUntil field value
func (o *AmmPoolExitRequest) GetValidUntil() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetValidUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidUntil, true
}

// SetValidUntil sets field value
func (o *AmmPoolExitRequest) SetValidUntil(v int32) {
	o.ValidUntil = v
}

// GetEcdsaSig returns the EcdsaSig field value
func (o *AmmPoolExitRequest) GetEcdsaSig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EcdsaSig
}

// GetEcdsaSigOk returns a tuple with the EcdsaSig field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetEcdsaSigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EcdsaSig, true
}

// SetEcdsaSig sets field value
func (o *AmmPoolExitRequest) SetEcdsaSig(v string) {
	o.EcdsaSig = v
}

// GetEddsaSig returns the EddsaSig field value
func (o *AmmPoolExitRequest) GetEddsaSig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EddsaSig
}

// GetEddsaSigOk returns a tuple with the EddsaSig field value
// and a boolean to check if the value has been set.
func (o *AmmPoolExitRequest) GetEddsaSigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EddsaSig, true
}

// SetEddsaSig sets field value
func (o *AmmPoolExitRequest) SetEddsaSig(v string) {
	o.EddsaSig = v
}

func (o AmmPoolExitRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["poolAddress"] = o.PoolAddress
	}
	if true {
		toSerialize["burnAmount"] = o.BurnAmount
	}
	if true {
		toSerialize["burnStorageID"] = o.BurnStorageID
	}
	if true {
		toSerialize["exitMinAmounts"] = o.ExitMinAmounts
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if true {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if true {
		toSerialize["ecdsaSig"] = o.EcdsaSig
	}
	if true {
		toSerialize["eddsaSig"] = o.EddsaSig
	}
	return json.Marshal(toSerialize)
}

type NullableAmmPoolExitRequest struct {
	value *AmmPoolExitRequest
	isSet bool
}

func (v NullableAmmPoolExitRequest) Get() *AmmPoolExitRequest {
	return v.value
}

func (v *NullableAmmPoolExitRequest) Set(val *AmmPoolExitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAmmPoolExitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAmmPoolExitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmmPoolExitRequest(val *AmmPoolExitRequest) *NullableAmmPoolExitRequest {
	return &NullableAmmPoolExitRequest{value: val, isSet: true}
}

func (v NullableAmmPoolExitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmmPoolExitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
