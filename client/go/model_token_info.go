/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TokenInfo field.tokenInfo.description
type TokenInfo struct {
	// field.tokenInfo.type
	Type string `json:"type"`
	// field.tokenInfo.tokenId
	TokenId int32 `json:"tokenId"`
	// field.tokenInfo.symbol
	Symbol string `json:"symbol"`
	// field.tokenInfo.name
	Name string `json:"name"`
	// field.tokenInfo.address
	Address string `json:"address"`
	// field.tokenInfo.decimals
	Decimals int32 `json:"decimals"`
	// field.tokenInfo.precision
	Precision int32 `json:"precision"`
	// field.tokenInfo.precision
	PrecisionForOrder int32 `json:"precisionForOrder"`
	// field.tokenInfo.minOrderAmount
	MinOrderAmount string `json:"minOrderAmount"`
	// field.tokenInfo.maxOrderAmount
	MaxOrderAmount string `json:"maxOrderAmount"`
	// field.tokenInfo.dustOrderAmount
	DustOrderAmount string `json:"dustOrderAmount"`
	// field.tokenInfo.maxLuckyTokenAmount
	MaxLuckyTokenAmount string `json:"maxLuckyTokenAmount"`
	// field.tokenInfo.minLuckyTokenAmount
	MinLuckyTokenAmount string `json:"minLuckyTokenAmount"`
	// field.tokenInfo.fastWithdrawLimit
	FastWithdrawLimit string `json:"fastWithdrawLimit"`
	// field.tokenInfo.distributionGas
	DistributionGas string `json:"distributionGas"`
	// field.tokenInfo.depositGas
	DepositGas string `json:"depositGas"`
	// field.tokenInfo.enabled
	Enabled bool `json:"enabled"`
}

// NewTokenInfo instantiates a new TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfo(type_ string, tokenId int32, symbol string, name string, address string, decimals int32, precision int32, precisionForOrder int32, minOrderAmount string, maxOrderAmount string, dustOrderAmount string, maxLuckyTokenAmount string, minLuckyTokenAmount string, fastWithdrawLimit string, distributionGas string, depositGas string, enabled bool) *TokenInfo {
	this := TokenInfo{}
	this.Type = type_
	this.TokenId = tokenId
	this.Symbol = symbol
	this.Name = name
	this.Address = address
	this.Decimals = decimals
	this.Precision = precision
	this.PrecisionForOrder = precisionForOrder
	this.MinOrderAmount = minOrderAmount
	this.MaxOrderAmount = maxOrderAmount
	this.DustOrderAmount = dustOrderAmount
	this.MaxLuckyTokenAmount = maxLuckyTokenAmount
	this.MinLuckyTokenAmount = minLuckyTokenAmount
	this.FastWithdrawLimit = fastWithdrawLimit
	this.DistributionGas = distributionGas
	this.DepositGas = depositGas
	this.Enabled = enabled
	return &this
}

// NewTokenInfoWithDefaults instantiates a new TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoWithDefaults() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// GetType returns the Type field value
func (o *TokenInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TokenInfo) SetType(v string) {
	o.Type = v
}

// GetTokenId returns the TokenId field value
func (o *TokenInfo) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenInfo) SetTokenId(v int32) {
	o.TokenId = v
}

// GetSymbol returns the Symbol field value
func (o *TokenInfo) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenInfo) SetSymbol(v string) {
	o.Symbol = v
}

// GetName returns the Name field value
func (o *TokenInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenInfo) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *TokenInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenInfo) SetAddress(v string) {
	o.Address = v
}

// GetDecimals returns the Decimals field value
func (o *TokenInfo) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenInfo) SetDecimals(v int32) {
	o.Decimals = v
}

// GetPrecision returns the Precision field value
func (o *TokenInfo) GetPrecision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetPrecisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Precision, true
}

// SetPrecision sets field value
func (o *TokenInfo) SetPrecision(v int32) {
	o.Precision = v
}

// GetPrecisionForOrder returns the PrecisionForOrder field value
func (o *TokenInfo) GetPrecisionForOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrecisionForOrder
}

// GetPrecisionForOrderOk returns a tuple with the PrecisionForOrder field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetPrecisionForOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrecisionForOrder, true
}

// SetPrecisionForOrder sets field value
func (o *TokenInfo) SetPrecisionForOrder(v int32) {
	o.PrecisionForOrder = v
}

// GetMinOrderAmount returns the MinOrderAmount field value
func (o *TokenInfo) GetMinOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinOrderAmount
}

// GetMinOrderAmountOk returns a tuple with the MinOrderAmount field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMinOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinOrderAmount, true
}

// SetMinOrderAmount sets field value
func (o *TokenInfo) SetMinOrderAmount(v string) {
	o.MinOrderAmount = v
}

// GetMaxOrderAmount returns the MaxOrderAmount field value
func (o *TokenInfo) GetMaxOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxOrderAmount
}

// GetMaxOrderAmountOk returns a tuple with the MaxOrderAmount field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMaxOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxOrderAmount, true
}

// SetMaxOrderAmount sets field value
func (o *TokenInfo) SetMaxOrderAmount(v string) {
	o.MaxOrderAmount = v
}

// GetDustOrderAmount returns the DustOrderAmount field value
func (o *TokenInfo) GetDustOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DustOrderAmount
}

// GetDustOrderAmountOk returns a tuple with the DustOrderAmount field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetDustOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DustOrderAmount, true
}

// SetDustOrderAmount sets field value
func (o *TokenInfo) SetDustOrderAmount(v string) {
	o.DustOrderAmount = v
}

// GetMaxLuckyTokenAmount returns the MaxLuckyTokenAmount field value
func (o *TokenInfo) GetMaxLuckyTokenAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxLuckyTokenAmount
}

// GetMaxLuckyTokenAmountOk returns a tuple with the MaxLuckyTokenAmount field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMaxLuckyTokenAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLuckyTokenAmount, true
}

// SetMaxLuckyTokenAmount sets field value
func (o *TokenInfo) SetMaxLuckyTokenAmount(v string) {
	o.MaxLuckyTokenAmount = v
}

// GetMinLuckyTokenAmount returns the MinLuckyTokenAmount field value
func (o *TokenInfo) GetMinLuckyTokenAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinLuckyTokenAmount
}

// GetMinLuckyTokenAmountOk returns a tuple with the MinLuckyTokenAmount field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetMinLuckyTokenAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinLuckyTokenAmount, true
}

// SetMinLuckyTokenAmount sets field value
func (o *TokenInfo) SetMinLuckyTokenAmount(v string) {
	o.MinLuckyTokenAmount = v
}

// GetFastWithdrawLimit returns the FastWithdrawLimit field value
func (o *TokenInfo) GetFastWithdrawLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FastWithdrawLimit
}

// GetFastWithdrawLimitOk returns a tuple with the FastWithdrawLimit field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetFastWithdrawLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FastWithdrawLimit, true
}

// SetFastWithdrawLimit sets field value
func (o *TokenInfo) SetFastWithdrawLimit(v string) {
	o.FastWithdrawLimit = v
}

// GetDistributionGas returns the DistributionGas field value
func (o *TokenInfo) GetDistributionGas() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistributionGas
}

// GetDistributionGasOk returns a tuple with the DistributionGas field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetDistributionGasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistributionGas, true
}

// SetDistributionGas sets field value
func (o *TokenInfo) SetDistributionGas(v string) {
	o.DistributionGas = v
}

// GetDepositGas returns the DepositGas field value
func (o *TokenInfo) GetDepositGas() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepositGas
}

// GetDepositGasOk returns a tuple with the DepositGas field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetDepositGasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepositGas, true
}

// SetDepositGas sets field value
func (o *TokenInfo) SetDepositGas(v string) {
	o.DepositGas = v
}

// GetEnabled returns the Enabled field value
func (o *TokenInfo) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TokenInfo) SetEnabled(v bool) {
	o.Enabled = v
}

func (o TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["decimals"] = o.Decimals
	}
	if true {
		toSerialize["precision"] = o.Precision
	}
	if true {
		toSerialize["precisionForOrder"] = o.PrecisionForOrder
	}
	if true {
		toSerialize["minOrderAmount"] = o.MinOrderAmount
	}
	if true {
		toSerialize["maxOrderAmount"] = o.MaxOrderAmount
	}
	if true {
		toSerialize["dustOrderAmount"] = o.DustOrderAmount
	}
	if true {
		toSerialize["maxLuckyTokenAmount"] = o.MaxLuckyTokenAmount
	}
	if true {
		toSerialize["minLuckyTokenAmount"] = o.MinLuckyTokenAmount
	}
	if true {
		toSerialize["fastWithdrawLimit"] = o.FastWithdrawLimit
	}
	if true {
		toSerialize["distributionGas"] = o.DistributionGas
	}
	if true {
		toSerialize["depositGas"] = o.DepositGas
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableTokenInfo struct {
	value *TokenInfo
	isSet bool
}

func (v NullableTokenInfo) Get() *TokenInfo {
	return v.value
}

func (v *NullableTokenInfo) Set(val *TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfo(val *TokenInfo) *NullableTokenInfo {
	return &NullableTokenInfo{value: val, isSet: true}
}

func (v NullableTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
