/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TimestampV3 model.timestampV3.description
type TimestampV3 struct {
	// Current time in millisecond
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewTimestampV3 instantiates a new TimestampV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampV3() *TimestampV3 {
	this := TimestampV3{}
	return &this
}

// NewTimestampV3WithDefaults instantiates a new TimestampV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampV3WithDefaults() *TimestampV3 {
	this := TimestampV3{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TimestampV3) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampV3) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TimestampV3) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *TimestampV3) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o TimestampV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableTimestampV3 struct {
	value *TimestampV3
	isSet bool
}

func (v NullableTimestampV3) Get() *TimestampV3 {
	return v.value
}

func (v *NullableTimestampV3) Set(val *TimestampV3) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampV3) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampV3(val *TimestampV3) *NullableTimestampV3 {
	return &NullableTimestampV3{value: val, isSet: true}
}

func (v NullableTimestampV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
