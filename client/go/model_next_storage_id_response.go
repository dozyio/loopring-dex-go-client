/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NextStorageIdResponse {{model.NextStorageIdResponse.description}
type NextStorageIdResponse struct {
	// Next storage ID for order request, must be even
	OrderId *int64 `json:"orderId,omitempty"`
	// Next storage ID for offchain requests, i.e., transfer/withdraw/updateAccount, must be odd
	OffchainId *int64 `json:"offchainId,omitempty"`
}

// NewNextStorageIdResponse instantiates a new NextStorageIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextStorageIdResponse() *NextStorageIdResponse {
	this := NextStorageIdResponse{}
	return &this
}

// NewNextStorageIdResponseWithDefaults instantiates a new NextStorageIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextStorageIdResponseWithDefaults() *NextStorageIdResponse {
	this := NextStorageIdResponse{}
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *NextStorageIdResponse) GetOrderId() int64 {
	if o == nil || o.OrderId == nil {
		var ret int64
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextStorageIdResponse) GetOrderIdOk() (*int64, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *NextStorageIdResponse) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int64 and assigns it to the OrderId field.
func (o *NextStorageIdResponse) SetOrderId(v int64) {
	o.OrderId = &v
}

// GetOffchainId returns the OffchainId field value if set, zero value otherwise.
func (o *NextStorageIdResponse) GetOffchainId() int64 {
	if o == nil || o.OffchainId == nil {
		var ret int64
		return ret
	}
	return *o.OffchainId
}

// GetOffchainIdOk returns a tuple with the OffchainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextStorageIdResponse) GetOffchainIdOk() (*int64, bool) {
	if o == nil || o.OffchainId == nil {
		return nil, false
	}
	return o.OffchainId, true
}

// HasOffchainId returns a boolean if a field has been set.
func (o *NextStorageIdResponse) HasOffchainId() bool {
	if o != nil && o.OffchainId != nil {
		return true
	}

	return false
}

// SetOffchainId gets a reference to the given int64 and assigns it to the OffchainId field.
func (o *NextStorageIdResponse) SetOffchainId(v int64) {
	o.OffchainId = &v
}

func (o NextStorageIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OffchainId != nil {
		toSerialize["offchainId"] = o.OffchainId
	}
	return json.Marshal(toSerialize)
}

type NullableNextStorageIdResponse struct {
	value *NextStorageIdResponse
	isSet bool
}

func (v NullableNextStorageIdResponse) Get() *NextStorageIdResponse {
	return v.value
}

func (v *NullableNextStorageIdResponse) Set(val *NextStorageIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNextStorageIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNextStorageIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextStorageIdResponse(val *NextStorageIdResponse) *NullableNextStorageIdResponse {
	return &NullableNextStorageIdResponse{value: val, isSet: true}
}

func (v NullableNextStorageIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextStorageIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
