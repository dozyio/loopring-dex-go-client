/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// AmmPoolJoinTokens escribes an AMM join transaction
type AmmPoolJoinTokens struct {
	// Describes an amount of a specific token to be supplied to the pool, the seq matters, and must be the same as the pool token list returned by pool info
	Pooled    []TokenVolumeV3 `json:"pooled"`
	MinimumLp TokenVolumeV3   `json:"minimumLp"`
}

// NewAmmPoolJoinTokens instantiates a new AmmPoolJoinTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmmPoolJoinTokens(pooled []TokenVolumeV3, minimumLp TokenVolumeV3) *AmmPoolJoinTokens {
	this := AmmPoolJoinTokens{}
	this.Pooled = pooled
	this.MinimumLp = minimumLp
	return &this
}

// NewAmmPoolJoinTokensWithDefaults instantiates a new AmmPoolJoinTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmmPoolJoinTokensWithDefaults() *AmmPoolJoinTokens {
	this := AmmPoolJoinTokens{}
	return &this
}

// GetPooled returns the Pooled field value
func (o *AmmPoolJoinTokens) GetPooled() []TokenVolumeV3 {
	if o == nil {
		var ret []TokenVolumeV3
		return ret
	}

	return o.Pooled
}

// GetPooledOk returns a tuple with the Pooled field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinTokens) GetPooledOk() ([]TokenVolumeV3, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pooled, true
}

// SetPooled sets field value
func (o *AmmPoolJoinTokens) SetPooled(v []TokenVolumeV3) {
	o.Pooled = v
}

// GetMinimumLp returns the MinimumLp field value
func (o *AmmPoolJoinTokens) GetMinimumLp() TokenVolumeV3 {
	if o == nil {
		var ret TokenVolumeV3
		return ret
	}

	return o.MinimumLp
}

// GetMinimumLpOk returns a tuple with the MinimumLp field value
// and a boolean to check if the value has been set.
func (o *AmmPoolJoinTokens) GetMinimumLpOk() (*TokenVolumeV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumLp, true
}

// SetMinimumLp sets field value
func (o *AmmPoolJoinTokens) SetMinimumLp(v TokenVolumeV3) {
	o.MinimumLp = v
}

func (o AmmPoolJoinTokens) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pooled"] = o.Pooled
	}
	if true {
		toSerialize["minimumLp"] = o.MinimumLp
	}
	return json.Marshal(toSerialize)
}

type NullableAmmPoolJoinTokens struct {
	value *AmmPoolJoinTokens
	isSet bool
}

func (v NullableAmmPoolJoinTokens) Get() *AmmPoolJoinTokens {
	return v.value
}

func (v *NullableAmmPoolJoinTokens) Set(val *AmmPoolJoinTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableAmmPoolJoinTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableAmmPoolJoinTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmmPoolJoinTokens(val *AmmPoolJoinTokens) *NullableAmmPoolJoinTokens {
	return &NullableAmmPoolJoinTokens{value: val, isSet: true}
}

func (v NullableAmmPoolJoinTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmmPoolJoinTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
