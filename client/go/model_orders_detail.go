/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// OrdersDetail Response orders
type OrdersDetail struct {
	// Total number of orders
	TotalNum int64 `json:"totalNum"`
	// List of order
	Orders []OrderDetail `json:"orders,omitempty"`
}

// NewOrdersDetail instantiates a new OrdersDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrdersDetail(totalNum int64) *OrdersDetail {
	this := OrdersDetail{}
	this.TotalNum = totalNum
	return &this
}

// NewOrdersDetailWithDefaults instantiates a new OrdersDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersDetailWithDefaults() *OrdersDetail {
	this := OrdersDetail{}
	return &this
}

// GetTotalNum returns the TotalNum field value
func (o *OrdersDetail) GetTotalNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalNum
}

// GetTotalNumOk returns a tuple with the TotalNum field value
// and a boolean to check if the value has been set.
func (o *OrdersDetail) GetTotalNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalNum, true
}

// SetTotalNum sets field value
func (o *OrdersDetail) SetTotalNum(v int64) {
	o.TotalNum = v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *OrdersDetail) GetOrders() []OrderDetail {
	if o == nil || o.Orders == nil {
		var ret []OrderDetail
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrdersDetail) GetOrdersOk() ([]OrderDetail, bool) {
	if o == nil || o.Orders == nil {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *OrdersDetail) HasOrders() bool {
	if o != nil && o.Orders != nil {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []OrderDetail and assigns it to the Orders field.
func (o *OrdersDetail) SetOrders(v []OrderDetail) {
	o.Orders = v
}

func (o OrdersDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalNum"] = o.TotalNum
	}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return json.Marshal(toSerialize)
}

type NullableOrdersDetail struct {
	value *OrdersDetail
	isSet bool
}

func (v NullableOrdersDetail) Get() *OrdersDetail {
	return v.value
}

func (v *NullableOrdersDetail) Set(val *OrdersDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersDetail(val *OrdersDetail) *NullableOrdersDetail {
	return &NullableOrdersDetail{value: val, isSet: true}
}

func (v NullableOrdersDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
