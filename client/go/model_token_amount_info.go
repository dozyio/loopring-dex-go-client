/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TokenAmountInfo Wrapper object used to describe a token associated with a certain quantity.
type TokenAmountInfo struct {
	// The Loopring's NFT token identifier.
	TokenId int32 `json:"tokenId"`
	// The amount of the NFT token
	Amount string `json:"amount"`
}

// NewTokenAmountInfo instantiates a new TokenAmountInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenAmountInfo(tokenId int32, amount string) *TokenAmountInfo {
	this := TokenAmountInfo{}
	this.TokenId = tokenId
	this.Amount = amount
	return &this
}

// NewTokenAmountInfoWithDefaults instantiates a new TokenAmountInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenAmountInfoWithDefaults() *TokenAmountInfo {
	this := TokenAmountInfo{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *TokenAmountInfo) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenAmountInfo) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenAmountInfo) SetTokenId(v int32) {
	o.TokenId = v
}

// GetAmount returns the Amount field value
func (o *TokenAmountInfo) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TokenAmountInfo) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TokenAmountInfo) SetAmount(v string) {
	o.Amount = v
}

func (o TokenAmountInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableTokenAmountInfo struct {
	value *TokenAmountInfo
	isSet bool
}

func (v NullableTokenAmountInfo) Get() *TokenAmountInfo {
	return v.value
}

func (v *NullableTokenAmountInfo) Set(val *TokenAmountInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenAmountInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenAmountInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenAmountInfo(val *TokenAmountInfo) *NullableTokenAmountInfo {
	return &NullableTokenAmountInfo{value: val, isSet: true}
}

func (v NullableTokenAmountInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenAmountInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
