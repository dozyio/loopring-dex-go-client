/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// BlockResp struct for BlockResp
type BlockResp struct {
	// The num index of the block
	BlockId int64 `json:"blockId"`
	// The block size
	BlockSize int32 `json:"blockSize"`
	// The exchange address
	Exchange string `json:"exchange"`
	// The txHash of the block
	TxHash string `json:"txHash"`
	// The status of the block
	Status string `json:"status"`
	// The creation time of the block
	CreatedAt int64 `json:"createdAt"`
	// The txs list inside the block
	Transactions []TransactionBlock `json:"transactions"`
}

// NewBlockResp instantiates a new BlockResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockResp(blockId int64, blockSize int32, exchange string, txHash string, status string, createdAt int64, transactions []TransactionBlock) *BlockResp {
	this := BlockResp{}
	this.BlockId = blockId
	this.BlockSize = blockSize
	this.Exchange = exchange
	this.TxHash = txHash
	this.Status = status
	this.CreatedAt = createdAt
	this.Transactions = transactions
	return &this
}

// NewBlockRespWithDefaults instantiates a new BlockResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRespWithDefaults() *BlockResp {
	this := BlockResp{}
	return &this
}

// GetBlockId returns the BlockId field value
func (o *BlockResp) GetBlockId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetBlockIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockId, true
}

// SetBlockId sets field value
func (o *BlockResp) SetBlockId(v int64) {
	o.BlockId = v
}

// GetBlockSize returns the BlockSize field value
func (o *BlockResp) GetBlockSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetBlockSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSize, true
}

// SetBlockSize sets field value
func (o *BlockResp) SetBlockSize(v int32) {
	o.BlockSize = v
}

// GetExchange returns the Exchange field value
func (o *BlockResp) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *BlockResp) SetExchange(v string) {
	o.Exchange = v
}

// GetTxHash returns the TxHash field value
func (o *BlockResp) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *BlockResp) SetTxHash(v string) {
	o.TxHash = v
}

// GetStatus returns the Status field value
func (o *BlockResp) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BlockResp) SetStatus(v string) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BlockResp) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BlockResp) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetTransactions returns the Transactions field value
func (o *BlockResp) GetTransactions() []TransactionBlock {
	if o == nil {
		var ret []TransactionBlock
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *BlockResp) GetTransactionsOk() ([]TransactionBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *BlockResp) SetTransactions(v []TransactionBlock) {
	o.Transactions = v
}

func (o BlockResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["blockId"] = o.BlockId
	}
	if true {
		toSerialize["blockSize"] = o.BlockSize
	}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["txHash"] = o.TxHash
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullableBlockResp struct {
	value *BlockResp
	isSet bool
}

func (v NullableBlockResp) Get() *BlockResp {
	return v.value
}

func (v *NullableBlockResp) Set(val *BlockResp) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockResp) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockResp(val *BlockResp) *NullableBlockResp {
	return &NullableBlockResp{value: val, isSet: true}
}

func (v NullableBlockResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
