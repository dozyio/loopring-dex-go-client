/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// GetCandlestickResponseV2 The response of query Candlestick data
type GetCandlestickResponseV2 struct {
	ResultInfo ResultInfo `json:"resultInfo"`
	// Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token
	Data [][]string `json:"data,omitempty"`
}

// NewGetCandlestickResponseV2 instantiates a new GetCandlestickResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCandlestickResponseV2(resultInfo ResultInfo) *GetCandlestickResponseV2 {
	this := GetCandlestickResponseV2{}
	this.ResultInfo = resultInfo
	return &this
}

// NewGetCandlestickResponseV2WithDefaults instantiates a new GetCandlestickResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCandlestickResponseV2WithDefaults() *GetCandlestickResponseV2 {
	this := GetCandlestickResponseV2{}
	return &this
}

// GetResultInfo returns the ResultInfo field value
func (o *GetCandlestickResponseV2) GetResultInfo() ResultInfo {
	if o == nil {
		var ret ResultInfo
		return ret
	}

	return o.ResultInfo
}

// GetResultInfoOk returns a tuple with the ResultInfo field value
// and a boolean to check if the value has been set.
func (o *GetCandlestickResponseV2) GetResultInfoOk() (*ResultInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultInfo, true
}

// SetResultInfo sets field value
func (o *GetCandlestickResponseV2) SetResultInfo(v ResultInfo) {
	o.ResultInfo = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetCandlestickResponseV2) GetData() [][]string {
	if o == nil || o.Data == nil {
		var ret [][]string
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCandlestickResponseV2) GetDataOk() ([][]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetCandlestickResponseV2) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given [][]string and assigns it to the Data field.
func (o *GetCandlestickResponseV2) SetData(v [][]string) {
	o.Data = v
}

func (o GetCandlestickResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resultInfo"] = o.ResultInfo
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGetCandlestickResponseV2 struct {
	value *GetCandlestickResponseV2
	isSet bool
}

func (v NullableGetCandlestickResponseV2) Get() *GetCandlestickResponseV2 {
	return v.value
}

func (v *NullableGetCandlestickResponseV2) Set(val *GetCandlestickResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCandlestickResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCandlestickResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCandlestickResponseV2(val *GetCandlestickResponseV2) *NullableGetCandlestickResponseV2 {
	return &NullableGetCandlestickResponseV2{value: val, isSet: true}
}

func (v NullableGetCandlestickResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCandlestickResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
