/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// DexAccountV3 User information
type DexAccountV3 struct {
	// Account ID
	AccountId int64 `json:"accountId"`
	// Ethereum address
	Owner string `json:"owner"`
	// The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order.
	Frozen    bool      `json:"frozen"`
	PublicKey PublicKey `json:"publicKey"`
	// Comma separated list of tags such as VIP levels, etc
	Tags *string `json:"tags,omitempty"`
	// field.DexAccountV3.nonce
	Nonce int64 `json:"nonce"`
	// Nonce of users key change request, for backward compatible
	KeyNonce int64 `json:"keyNonce"`
	// KeySeed of users L2 eddsaKey, the L2 key should be generated from this seed, i.e., L2_EDDSA_KEY=eth.sign(keySeed). Otherwise, user may meet error in login loopring DEX
	KeySeed string `json:"keySeed"`
}

// NewDexAccountV3 instantiates a new DexAccountV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexAccountV3(accountId int64, owner string, frozen bool, publicKey PublicKey, nonce int64, keyNonce int64, keySeed string) *DexAccountV3 {
	this := DexAccountV3{}
	this.AccountId = accountId
	this.Owner = owner
	this.Frozen = frozen
	this.PublicKey = publicKey
	this.Nonce = nonce
	this.KeyNonce = keyNonce
	this.KeySeed = keySeed
	return &this
}

// NewDexAccountV3WithDefaults instantiates a new DexAccountV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexAccountV3WithDefaults() *DexAccountV3 {
	this := DexAccountV3{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *DexAccountV3) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *DexAccountV3) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOwner returns the Owner field value
func (o *DexAccountV3) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *DexAccountV3) SetOwner(v string) {
	o.Owner = v
}

// GetFrozen returns the Frozen field value
func (o *DexAccountV3) GetFrozen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Frozen
}

// GetFrozenOk returns a tuple with the Frozen field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetFrozenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frozen, true
}

// SetFrozen sets field value
func (o *DexAccountV3) SetFrozen(v bool) {
	o.Frozen = v
}

// GetPublicKey returns the PublicKey field value
func (o *DexAccountV3) GetPublicKey() PublicKey {
	if o == nil {
		var ret PublicKey
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetPublicKeyOk() (*PublicKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *DexAccountV3) SetPublicKey(v PublicKey) {
	o.PublicKey = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DexAccountV3) GetTags() string {
	if o == nil || o.Tags == nil {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetTagsOk() (*string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DexAccountV3) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *DexAccountV3) SetTags(v string) {
	o.Tags = &v
}

// GetNonce returns the Nonce field value
func (o *DexAccountV3) GetNonce() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetNonceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *DexAccountV3) SetNonce(v int64) {
	o.Nonce = v
}

// GetKeyNonce returns the KeyNonce field value
func (o *DexAccountV3) GetKeyNonce() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.KeyNonce
}

// GetKeyNonceOk returns a tuple with the KeyNonce field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetKeyNonceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyNonce, true
}

// SetKeyNonce sets field value
func (o *DexAccountV3) SetKeyNonce(v int64) {
	o.KeyNonce = v
}

// GetKeySeed returns the KeySeed field value
func (o *DexAccountV3) GetKeySeed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySeed
}

// GetKeySeedOk returns a tuple with the KeySeed field value
// and a boolean to check if the value has been set.
func (o *DexAccountV3) GetKeySeedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySeed, true
}

// SetKeySeed sets field value
func (o *DexAccountV3) SetKeySeed(v string) {
	o.KeySeed = v
}

func (o DexAccountV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["frozen"] = o.Frozen
	}
	if true {
		toSerialize["publicKey"] = o.PublicKey
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["nonce"] = o.Nonce
	}
	if true {
		toSerialize["keyNonce"] = o.KeyNonce
	}
	if true {
		toSerialize["keySeed"] = o.KeySeed
	}
	return json.Marshal(toSerialize)
}

type NullableDexAccountV3 struct {
	value *DexAccountV3
	isSet bool
}

func (v NullableDexAccountV3) Get() *DexAccountV3 {
	return v.value
}

func (v *NullableDexAccountV3) Set(val *DexAccountV3) {
	v.value = val
	v.isSet = true
}

func (v NullableDexAccountV3) IsSet() bool {
	return v.isSet
}

func (v *NullableDexAccountV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexAccountV3(val *DexAccountV3) *NullableDexAccountV3 {
	return &NullableDexAccountV3{value: val, isSet: true}
}

func (v NullableDexAccountV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexAccountV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
