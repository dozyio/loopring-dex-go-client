/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftTradeFill Nft trade fill status
type NftTradeFill struct {
	// The order hash
	OrderHash string `json:"orderHash"`
	// The orders sell fill
	SellFilled string `json:"sellFilled"`
	// The orders buy fill
	BuyFilled string `json:"buyFilled"`
	// The orders fee
	Fee string `json:"fee"`
}

// NewNftTradeFill instantiates a new NftTradeFill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTradeFill(orderHash string, sellFilled string, buyFilled string, fee string) *NftTradeFill {
	this := NftTradeFill{}
	this.OrderHash = orderHash
	this.SellFilled = sellFilled
	this.BuyFilled = buyFilled
	this.Fee = fee
	return &this
}

// NewNftTradeFillWithDefaults instantiates a new NftTradeFill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTradeFillWithDefaults() *NftTradeFill {
	this := NftTradeFill{}
	return &this
}

// GetOrderHash returns the OrderHash field value
func (o *NftTradeFill) GetOrderHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderHash
}

// GetOrderHashOk returns a tuple with the OrderHash field value
// and a boolean to check if the value has been set.
func (o *NftTradeFill) GetOrderHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderHash, true
}

// SetOrderHash sets field value
func (o *NftTradeFill) SetOrderHash(v string) {
	o.OrderHash = v
}

// GetSellFilled returns the SellFilled field value
func (o *NftTradeFill) GetSellFilled() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellFilled
}

// GetSellFilledOk returns a tuple with the SellFilled field value
// and a boolean to check if the value has been set.
func (o *NftTradeFill) GetSellFilledOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellFilled, true
}

// SetSellFilled sets field value
func (o *NftTradeFill) SetSellFilled(v string) {
	o.SellFilled = v
}

// GetBuyFilled returns the BuyFilled field value
func (o *NftTradeFill) GetBuyFilled() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuyFilled
}

// GetBuyFilledOk returns a tuple with the BuyFilled field value
// and a boolean to check if the value has been set.
func (o *NftTradeFill) GetBuyFilledOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyFilled, true
}

// SetBuyFilled sets field value
func (o *NftTradeFill) SetBuyFilled(v string) {
	o.BuyFilled = v
}

// GetFee returns the Fee field value
func (o *NftTradeFill) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *NftTradeFill) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *NftTradeFill) SetFee(v string) {
	o.Fee = v
}

func (o NftTradeFill) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["orderHash"] = o.OrderHash
	}
	if true {
		toSerialize["sellFilled"] = o.SellFilled
	}
	if true {
		toSerialize["buyFilled"] = o.BuyFilled
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	return json.Marshal(toSerialize)
}

type NullableNftTradeFill struct {
	value *NftTradeFill
	isSet bool
}

func (v NullableNftTradeFill) Get() *NftTradeFill {
	return v.value
}

func (v *NullableNftTradeFill) Set(val *NftTradeFill) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTradeFill) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTradeFill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTradeFill(val *NftTradeFill) *NullableNftTradeFill {
	return &NullableNftTradeFill{value: val, isSet: true}
}

func (v NullableNftTradeFill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTradeFill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
