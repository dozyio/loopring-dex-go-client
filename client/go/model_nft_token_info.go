/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// NftTokenInfo NFT token info
type NftTokenInfo struct {
	// NFT token nftData, which is a hash of token address, NFT_ID, minter, etc.
	NftData string `json:"nftData"`
	// The minter of the NFT token
	Minter string `json:"minter"`
	// field.NftTokenInfo.nftType
	NftType string `json:"nftType"`
	// field.NftTokenInfo.tokenAddress
	TokenAddress string `json:"tokenAddress"`
	// field.NftTokenInfo.nftId
	NftId string `json:"nftId"`
	// field.NftTokenInfo.creatorFeeBips
	CreatorFeeBips int32 `json:"creatorFeeBips"`
	// field.NftTokenInfo.royaltyPercentage
	RoyaltyPercentage int32 `json:"royaltyPercentage"`
	// field.NftTokenInfo.originalRoyaltyPercentage
	OriginalRoyaltyPercentage int32 `json:"originalRoyaltyPercentage"`
	// field.NftTokenInfo.status
	Status bool `json:"status"`
	// field.NftTokenInfo.nftFactory
	NftFactory *string `json:"nftFactory,omitempty"`
	// field.NftTokenInfo.nftOwner
	NftOwner *string `json:"nftOwner,omitempty"`
	// field.NftTokenInfo.nftBaseUri
	NftBaseUri *string `json:"nftBaseUri,omitempty"`
	// field.NftTokenInfo.royaltyAddress
	RoyaltyAddress *string `json:"royaltyAddress,omitempty"`
	// field.NftTokenInfo.originalMinter
	OriginalMinter *string `json:"originalMinter,omitempty"`
	// field.NftTokenInfo.createdAt
	CreatedAt *int64 `json:"createdAt,omitempty"`
}

// NewNftTokenInfo instantiates a new NftTokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftTokenInfo(nftData string, minter string, nftType string, tokenAddress string, nftId string, creatorFeeBips int32, royaltyPercentage int32, originalRoyaltyPercentage int32, status bool) *NftTokenInfo {
	this := NftTokenInfo{}
	this.NftData = nftData
	this.Minter = minter
	this.NftType = nftType
	this.TokenAddress = tokenAddress
	this.NftId = nftId
	this.CreatorFeeBips = creatorFeeBips
	this.RoyaltyPercentage = royaltyPercentage
	this.OriginalRoyaltyPercentage = originalRoyaltyPercentage
	this.Status = status
	return &this
}

// NewNftTokenInfoWithDefaults instantiates a new NftTokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftTokenInfoWithDefaults() *NftTokenInfo {
	this := NftTokenInfo{}
	return &this
}

// GetNftData returns the NftData field value
func (o *NftTokenInfo) GetNftData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftData
}

// GetNftDataOk returns a tuple with the NftData field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftData, true
}

// SetNftData sets field value
func (o *NftTokenInfo) SetNftData(v string) {
	o.NftData = v
}

// GetMinter returns the Minter field value
func (o *NftTokenInfo) GetMinter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Minter
}

// GetMinterOk returns a tuple with the Minter field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetMinterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minter, true
}

// SetMinter sets field value
func (o *NftTokenInfo) SetMinter(v string) {
	o.Minter = v
}

// GetNftType returns the NftType field value
func (o *NftTokenInfo) GetNftType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftType
}

// GetNftTypeOk returns a tuple with the NftType field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftType, true
}

// SetNftType sets field value
func (o *NftTokenInfo) SetNftType(v string) {
	o.NftType = v
}

// GetTokenAddress returns the TokenAddress field value
func (o *NftTokenInfo) GetTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAddress, true
}

// SetTokenAddress sets field value
func (o *NftTokenInfo) SetTokenAddress(v string) {
	o.TokenAddress = v
}

// GetNftId returns the NftId field value
func (o *NftTokenInfo) GetNftId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftId
}

// GetNftIdOk returns a tuple with the NftId field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftId, true
}

// SetNftId sets field value
func (o *NftTokenInfo) SetNftId(v string) {
	o.NftId = v
}

// GetCreatorFeeBips returns the CreatorFeeBips field value
func (o *NftTokenInfo) GetCreatorFeeBips() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorFeeBips
}

// GetCreatorFeeBipsOk returns a tuple with the CreatorFeeBips field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetCreatorFeeBipsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorFeeBips, true
}

// SetCreatorFeeBips sets field value
func (o *NftTokenInfo) SetCreatorFeeBips(v int32) {
	o.CreatorFeeBips = v
}

// GetRoyaltyPercentage returns the RoyaltyPercentage field value
func (o *NftTokenInfo) GetRoyaltyPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RoyaltyPercentage
}

// GetRoyaltyPercentageOk returns a tuple with the RoyaltyPercentage field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetRoyaltyPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoyaltyPercentage, true
}

// SetRoyaltyPercentage sets field value
func (o *NftTokenInfo) SetRoyaltyPercentage(v int32) {
	o.RoyaltyPercentage = v
}

// GetOriginalRoyaltyPercentage returns the OriginalRoyaltyPercentage field value
func (o *NftTokenInfo) GetOriginalRoyaltyPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OriginalRoyaltyPercentage
}

// GetOriginalRoyaltyPercentageOk returns a tuple with the OriginalRoyaltyPercentage field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetOriginalRoyaltyPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalRoyaltyPercentage, true
}

// SetOriginalRoyaltyPercentage sets field value
func (o *NftTokenInfo) SetOriginalRoyaltyPercentage(v int32) {
	o.OriginalRoyaltyPercentage = v
}

// GetStatus returns the Status field value
func (o *NftTokenInfo) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NftTokenInfo) SetStatus(v bool) {
	o.Status = v
}

// GetNftFactory returns the NftFactory field value if set, zero value otherwise.
func (o *NftTokenInfo) GetNftFactory() string {
	if o == nil || o.NftFactory == nil {
		var ret string
		return ret
	}
	return *o.NftFactory
}

// GetNftFactoryOk returns a tuple with the NftFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftFactoryOk() (*string, bool) {
	if o == nil || o.NftFactory == nil {
		return nil, false
	}
	return o.NftFactory, true
}

// HasNftFactory returns a boolean if a field has been set.
func (o *NftTokenInfo) HasNftFactory() bool {
	if o != nil && o.NftFactory != nil {
		return true
	}

	return false
}

// SetNftFactory gets a reference to the given string and assigns it to the NftFactory field.
func (o *NftTokenInfo) SetNftFactory(v string) {
	o.NftFactory = &v
}

// GetNftOwner returns the NftOwner field value if set, zero value otherwise.
func (o *NftTokenInfo) GetNftOwner() string {
	if o == nil || o.NftOwner == nil {
		var ret string
		return ret
	}
	return *o.NftOwner
}

// GetNftOwnerOk returns a tuple with the NftOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftOwnerOk() (*string, bool) {
	if o == nil || o.NftOwner == nil {
		return nil, false
	}
	return o.NftOwner, true
}

// HasNftOwner returns a boolean if a field has been set.
func (o *NftTokenInfo) HasNftOwner() bool {
	if o != nil && o.NftOwner != nil {
		return true
	}

	return false
}

// SetNftOwner gets a reference to the given string and assigns it to the NftOwner field.
func (o *NftTokenInfo) SetNftOwner(v string) {
	o.NftOwner = &v
}

// GetNftBaseUri returns the NftBaseUri field value if set, zero value otherwise.
func (o *NftTokenInfo) GetNftBaseUri() string {
	if o == nil || o.NftBaseUri == nil {
		var ret string
		return ret
	}
	return *o.NftBaseUri
}

// GetNftBaseUriOk returns a tuple with the NftBaseUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetNftBaseUriOk() (*string, bool) {
	if o == nil || o.NftBaseUri == nil {
		return nil, false
	}
	return o.NftBaseUri, true
}

// HasNftBaseUri returns a boolean if a field has been set.
func (o *NftTokenInfo) HasNftBaseUri() bool {
	if o != nil && o.NftBaseUri != nil {
		return true
	}

	return false
}

// SetNftBaseUri gets a reference to the given string and assigns it to the NftBaseUri field.
func (o *NftTokenInfo) SetNftBaseUri(v string) {
	o.NftBaseUri = &v
}

// GetRoyaltyAddress returns the RoyaltyAddress field value if set, zero value otherwise.
func (o *NftTokenInfo) GetRoyaltyAddress() string {
	if o == nil || o.RoyaltyAddress == nil {
		var ret string
		return ret
	}
	return *o.RoyaltyAddress
}

// GetRoyaltyAddressOk returns a tuple with the RoyaltyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetRoyaltyAddressOk() (*string, bool) {
	if o == nil || o.RoyaltyAddress == nil {
		return nil, false
	}
	return o.RoyaltyAddress, true
}

// HasRoyaltyAddress returns a boolean if a field has been set.
func (o *NftTokenInfo) HasRoyaltyAddress() bool {
	if o != nil && o.RoyaltyAddress != nil {
		return true
	}

	return false
}

// SetRoyaltyAddress gets a reference to the given string and assigns it to the RoyaltyAddress field.
func (o *NftTokenInfo) SetRoyaltyAddress(v string) {
	o.RoyaltyAddress = &v
}

// GetOriginalMinter returns the OriginalMinter field value if set, zero value otherwise.
func (o *NftTokenInfo) GetOriginalMinter() string {
	if o == nil || o.OriginalMinter == nil {
		var ret string
		return ret
	}
	return *o.OriginalMinter
}

// GetOriginalMinterOk returns a tuple with the OriginalMinter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetOriginalMinterOk() (*string, bool) {
	if o == nil || o.OriginalMinter == nil {
		return nil, false
	}
	return o.OriginalMinter, true
}

// HasOriginalMinter returns a boolean if a field has been set.
func (o *NftTokenInfo) HasOriginalMinter() bool {
	if o != nil && o.OriginalMinter != nil {
		return true
	}

	return false
}

// SetOriginalMinter gets a reference to the given string and assigns it to the OriginalMinter field.
func (o *NftTokenInfo) SetOriginalMinter(v string) {
	o.OriginalMinter = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NftTokenInfo) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftTokenInfo) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NftTokenInfo) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *NftTokenInfo) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

func (o NftTokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nftData"] = o.NftData
	}
	if true {
		toSerialize["minter"] = o.Minter
	}
	if true {
		toSerialize["nftType"] = o.NftType
	}
	if true {
		toSerialize["tokenAddress"] = o.TokenAddress
	}
	if true {
		toSerialize["nftId"] = o.NftId
	}
	if true {
		toSerialize["creatorFeeBips"] = o.CreatorFeeBips
	}
	if true {
		toSerialize["royaltyPercentage"] = o.RoyaltyPercentage
	}
	if true {
		toSerialize["originalRoyaltyPercentage"] = o.OriginalRoyaltyPercentage
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.NftFactory != nil {
		toSerialize["nftFactory"] = o.NftFactory
	}
	if o.NftOwner != nil {
		toSerialize["nftOwner"] = o.NftOwner
	}
	if o.NftBaseUri != nil {
		toSerialize["nftBaseUri"] = o.NftBaseUri
	}
	if o.RoyaltyAddress != nil {
		toSerialize["royaltyAddress"] = o.RoyaltyAddress
	}
	if o.OriginalMinter != nil {
		toSerialize["originalMinter"] = o.OriginalMinter
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableNftTokenInfo struct {
	value *NftTokenInfo
	isSet bool
}

func (v NullableNftTokenInfo) Get() *NftTokenInfo {
	return v.value
}

func (v *NullableNftTokenInfo) Set(val *NftTokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNftTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNftTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftTokenInfo(val *NftTokenInfo) *NullableNftTokenInfo {
	return &NullableNftTokenInfo{value: val, isSet: true}
}

func (v NullableNftTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
