/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// CancelOrderResult result for order cancellation.
type CancelOrderResult struct {
	// Hash or clientOrderId of order cancelled.
	Id string `json:"id"`
	// Order cancellation result.
	Result bool        `json:"result"`
	Error  *ResultInfo `json:"error,omitempty"`
}

// NewCancelOrderResult instantiates a new CancelOrderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelOrderResult(id string, result bool) *CancelOrderResult {
	this := CancelOrderResult{}
	this.Id = id
	this.Result = result
	return &this
}

// NewCancelOrderResultWithDefaults instantiates a new CancelOrderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelOrderResultWithDefaults() *CancelOrderResult {
	this := CancelOrderResult{}
	return &this
}

// GetId returns the Id field value
func (o *CancelOrderResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CancelOrderResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CancelOrderResult) SetId(v string) {
	o.Id = v
}

// GetResult returns the Result field value
func (o *CancelOrderResult) GetResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *CancelOrderResult) GetResultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *CancelOrderResult) SetResult(v bool) {
	o.Result = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CancelOrderResult) GetError() ResultInfo {
	if o == nil || o.Error == nil {
		var ret ResultInfo
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderResult) GetErrorOk() (*ResultInfo, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CancelOrderResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ResultInfo and assigns it to the Error field.
func (o *CancelOrderResult) SetError(v ResultInfo) {
	o.Error = &v
}

func (o CancelOrderResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["result"] = o.Result
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableCancelOrderResult struct {
	value *CancelOrderResult
	isSet bool
}

func (v NullableCancelOrderResult) Get() *CancelOrderResult {
	return v.value
}

func (v *NullableCancelOrderResult) Set(val *CancelOrderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelOrderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelOrderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelOrderResult(val *CancelOrderResult) *NullableCancelOrderResult {
	return &NullableCancelOrderResult{value: val, isSet: true}
}

func (v NullableCancelOrderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelOrderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
