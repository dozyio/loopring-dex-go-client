/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// DexAccount DexAccount data
type DexAccount struct {
	// field.dexAccount.accountId
	AccountId int64 `json:"accountId"`
	// field.dexAccount.owner
	Owner string `json:"owner"`
	// field.dexAccount.isFreeze
	Frozen bool `json:"frozen"`
	// field.dexAccount.publicKeyX
	PublicKeyX string `json:"publicKeyX"`
	// field.dexAccount.publicKeyY
	PublicKeyY string `json:"publicKeyY"`
	// field.dexAccount.tags
	Tags *string `json:"tags,omitempty"`
	// field.dexAccount.keyNonce
	KeyNonce int64 `json:"keyNonce"`
	// field.dexAccount.accountNonce
	AccountNonce int64 `json:"accountNonce"`
}

// NewDexAccount instantiates a new DexAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexAccount(accountId int64, owner string, frozen bool, publicKeyX string, publicKeyY string, keyNonce int64, accountNonce int64) *DexAccount {
	this := DexAccount{}
	this.AccountId = accountId
	this.Owner = owner
	this.Frozen = frozen
	this.PublicKeyX = publicKeyX
	this.PublicKeyY = publicKeyY
	this.KeyNonce = keyNonce
	this.AccountNonce = accountNonce
	return &this
}

// NewDexAccountWithDefaults instantiates a new DexAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexAccountWithDefaults() *DexAccount {
	this := DexAccount{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *DexAccount) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *DexAccount) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOwner returns the Owner field value
func (o *DexAccount) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *DexAccount) SetOwner(v string) {
	o.Owner = v
}

// GetFrozen returns the Frozen field value
func (o *DexAccount) GetFrozen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Frozen
}

// GetFrozenOk returns a tuple with the Frozen field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetFrozenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frozen, true
}

// SetFrozen sets field value
func (o *DexAccount) SetFrozen(v bool) {
	o.Frozen = v
}

// GetPublicKeyX returns the PublicKeyX field value
func (o *DexAccount) GetPublicKeyX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyX
}

// GetPublicKeyXOk returns a tuple with the PublicKeyX field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetPublicKeyXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyX, true
}

// SetPublicKeyX sets field value
func (o *DexAccount) SetPublicKeyX(v string) {
	o.PublicKeyX = v
}

// GetPublicKeyY returns the PublicKeyY field value
func (o *DexAccount) GetPublicKeyY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyY
}

// GetPublicKeyYOk returns a tuple with the PublicKeyY field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetPublicKeyYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyY, true
}

// SetPublicKeyY sets field value
func (o *DexAccount) SetPublicKeyY(v string) {
	o.PublicKeyY = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DexAccount) GetTags() string {
	if o == nil || o.Tags == nil {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexAccount) GetTagsOk() (*string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DexAccount) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *DexAccount) SetTags(v string) {
	o.Tags = &v
}

// GetKeyNonce returns the KeyNonce field value
func (o *DexAccount) GetKeyNonce() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.KeyNonce
}

// GetKeyNonceOk returns a tuple with the KeyNonce field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetKeyNonceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyNonce, true
}

// SetKeyNonce sets field value
func (o *DexAccount) SetKeyNonce(v int64) {
	o.KeyNonce = v
}

// GetAccountNonce returns the AccountNonce field value
func (o *DexAccount) GetAccountNonce() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountNonce
}

// GetAccountNonceOk returns a tuple with the AccountNonce field value
// and a boolean to check if the value has been set.
func (o *DexAccount) GetAccountNonceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNonce, true
}

// SetAccountNonce sets field value
func (o *DexAccount) SetAccountNonce(v int64) {
	o.AccountNonce = v
}

func (o DexAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["frozen"] = o.Frozen
	}
	if true {
		toSerialize["publicKeyX"] = o.PublicKeyX
	}
	if true {
		toSerialize["publicKeyY"] = o.PublicKeyY
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["keyNonce"] = o.KeyNonce
	}
	if true {
		toSerialize["accountNonce"] = o.AccountNonce
	}
	return json.Marshal(toSerialize)
}

type NullableDexAccount struct {
	value *DexAccount
	isSet bool
}

func (v NullableDexAccount) Get() *DexAccount {
	return v.value
}

func (v *NullableDexAccount) Set(val *DexAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableDexAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableDexAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexAccount(val *DexAccount) *NullableDexAccount {
	return &NullableDexAccount{value: val, isSet: true}
}

func (v NullableDexAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
