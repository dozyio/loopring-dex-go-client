/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// CounterFactualNftInfo struct for CounterFactualNftInfo
type CounterFactualNftInfo struct {
	// field.CounterFactualNftInfo.nftFactory
	NftFactory string `json:"nftFactory"`
	// field.CounterFactualNftInfo.nftOwner
	NftOwner string `json:"nftOwner"`
	// field.CounterFactualNftInfo.nftBaseUri
	NftBaseUri *string `json:"nftBaseUri,omitempty"`
}

// NewCounterFactualNftInfo instantiates a new CounterFactualNftInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCounterFactualNftInfo(nftFactory string, nftOwner string) *CounterFactualNftInfo {
	this := CounterFactualNftInfo{}
	this.NftFactory = nftFactory
	this.NftOwner = nftOwner
	return &this
}

// NewCounterFactualNftInfoWithDefaults instantiates a new CounterFactualNftInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCounterFactualNftInfoWithDefaults() *CounterFactualNftInfo {
	this := CounterFactualNftInfo{}
	return &this
}

// GetNftFactory returns the NftFactory field value
func (o *CounterFactualNftInfo) GetNftFactory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftFactory
}

// GetNftFactoryOk returns a tuple with the NftFactory field value
// and a boolean to check if the value has been set.
func (o *CounterFactualNftInfo) GetNftFactoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftFactory, true
}

// SetNftFactory sets field value
func (o *CounterFactualNftInfo) SetNftFactory(v string) {
	o.NftFactory = v
}

// GetNftOwner returns the NftOwner field value
func (o *CounterFactualNftInfo) GetNftOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NftOwner
}

// GetNftOwnerOk returns a tuple with the NftOwner field value
// and a boolean to check if the value has been set.
func (o *CounterFactualNftInfo) GetNftOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NftOwner, true
}

// SetNftOwner sets field value
func (o *CounterFactualNftInfo) SetNftOwner(v string) {
	o.NftOwner = v
}

// GetNftBaseUri returns the NftBaseUri field value if set, zero value otherwise.
func (o *CounterFactualNftInfo) GetNftBaseUri() string {
	if o == nil || o.NftBaseUri == nil {
		var ret string
		return ret
	}
	return *o.NftBaseUri
}

// GetNftBaseUriOk returns a tuple with the NftBaseUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterFactualNftInfo) GetNftBaseUriOk() (*string, bool) {
	if o == nil || o.NftBaseUri == nil {
		return nil, false
	}
	return o.NftBaseUri, true
}

// HasNftBaseUri returns a boolean if a field has been set.
func (o *CounterFactualNftInfo) HasNftBaseUri() bool {
	if o != nil && o.NftBaseUri != nil {
		return true
	}

	return false
}

// SetNftBaseUri gets a reference to the given string and assigns it to the NftBaseUri field.
func (o *CounterFactualNftInfo) SetNftBaseUri(v string) {
	o.NftBaseUri = &v
}

func (o CounterFactualNftInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nftFactory"] = o.NftFactory
	}
	if true {
		toSerialize["nftOwner"] = o.NftOwner
	}
	if o.NftBaseUri != nil {
		toSerialize["nftBaseUri"] = o.NftBaseUri
	}
	return json.Marshal(toSerialize)
}

type NullableCounterFactualNftInfo struct {
	value *CounterFactualNftInfo
	isSet bool
}

func (v NullableCounterFactualNftInfo) Get() *CounterFactualNftInfo {
	return v.value
}

func (v *NullableCounterFactualNftInfo) Set(val *CounterFactualNftInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCounterFactualNftInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCounterFactualNftInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCounterFactualNftInfo(val *CounterFactualNftInfo) *NullableCounterFactualNftInfo {
	return &NullableCounterFactualNftInfo{value: val, isSet: true}
}

func (v NullableCounterFactualNftInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCounterFactualNftInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
