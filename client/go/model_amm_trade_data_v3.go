/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// AmmTradeDataV3 AMM trade info data
type AmmTradeDataV3 struct {
	// trader's accountId
	AccountId int64 `json:"accountId"`
	// AMM trade's order hash
	OrderHash string `json:"orderHash"`
	// The trade market
	Market string `json:"market"`
	// The trade direction, buy or sell
	Side string `json:"side"`
	// The trade volume
	Size string `json:"size"`
	// The trade price
	Price float64 `json:"price"`
	// The trade fee
	FeeAmount string `json:"feeAmount"`
	// The trade's creation time
	CreatedAt int64 `json:"createdAt"`
	// field.SubmitOffChainResponseItem.tokenId
	TokenId int32 `json:"tokenId"`
	// field.SubmitOffChainResponseItem.storageId
	StorageId int64 `json:"storageId"`
}

// NewAmmTradeDataV3 instantiates a new AmmTradeDataV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmmTradeDataV3(accountId int64, orderHash string, market string, side string, size string, price float64, feeAmount string, createdAt int64, tokenId int32, storageId int64) *AmmTradeDataV3 {
	this := AmmTradeDataV3{}
	this.AccountId = accountId
	this.OrderHash = orderHash
	this.Market = market
	this.Side = side
	this.Size = size
	this.Price = price
	this.FeeAmount = feeAmount
	this.CreatedAt = createdAt
	this.TokenId = tokenId
	this.StorageId = storageId
	return &this
}

// NewAmmTradeDataV3WithDefaults instantiates a new AmmTradeDataV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmmTradeDataV3WithDefaults() *AmmTradeDataV3 {
	this := AmmTradeDataV3{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *AmmTradeDataV3) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AmmTradeDataV3) SetAccountId(v int64) {
	o.AccountId = v
}

// GetOrderHash returns the OrderHash field value
func (o *AmmTradeDataV3) GetOrderHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderHash
}

// GetOrderHashOk returns a tuple with the OrderHash field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetOrderHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderHash, true
}

// SetOrderHash sets field value
func (o *AmmTradeDataV3) SetOrderHash(v string) {
	o.OrderHash = v
}

// GetMarket returns the Market field value
func (o *AmmTradeDataV3) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetMarketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *AmmTradeDataV3) SetMarket(v string) {
	o.Market = v
}

// GetSide returns the Side field value
func (o *AmmTradeDataV3) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *AmmTradeDataV3) SetSide(v string) {
	o.Side = v
}

// GetSize returns the Size field value
func (o *AmmTradeDataV3) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *AmmTradeDataV3) SetSize(v string) {
	o.Size = v
}

// GetPrice returns the Price field value
func (o *AmmTradeDataV3) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *AmmTradeDataV3) SetPrice(v float64) {
	o.Price = v
}

// GetFeeAmount returns the FeeAmount field value
func (o *AmmTradeDataV3) GetFeeAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAmount, true
}

// SetFeeAmount sets field value
func (o *AmmTradeDataV3) SetFeeAmount(v string) {
	o.FeeAmount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AmmTradeDataV3) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AmmTradeDataV3) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetTokenId returns the TokenId field value
func (o *AmmTradeDataV3) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *AmmTradeDataV3) SetTokenId(v int32) {
	o.TokenId = v
}

// GetStorageId returns the StorageId field value
func (o *AmmTradeDataV3) GetStorageId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *AmmTradeDataV3) GetStorageIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *AmmTradeDataV3) SetStorageId(v int64) {
	o.StorageId = v
}

func (o AmmTradeDataV3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["orderHash"] = o.OrderHash
	}
	if true {
		toSerialize["market"] = o.Market
	}
	if true {
		toSerialize["side"] = o.Side
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["feeAmount"] = o.FeeAmount
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["tokenId"] = o.TokenId
	}
	if true {
		toSerialize["storageId"] = o.StorageId
	}
	return json.Marshal(toSerialize)
}

type NullableAmmTradeDataV3 struct {
	value *AmmTradeDataV3
	isSet bool
}

func (v NullableAmmTradeDataV3) Get() *AmmTradeDataV3 {
	return v.value
}

func (v *NullableAmmTradeDataV3) Set(val *AmmTradeDataV3) {
	v.value = val
	v.isSet = true
}

func (v NullableAmmTradeDataV3) IsSet() bool {
	return v.isSet
}

func (v *NullableAmmTradeDataV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmmTradeDataV3(val *AmmTradeDataV3) *NullableAmmTradeDataV3 {
	return &NullableAmmTradeDataV3{value: val, isSet: true}
}

func (v NullableAmmTradeDataV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmmTradeDataV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
