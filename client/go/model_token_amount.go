/*
LightCone 2.0 API Documentation

LightCone DEX function interpretation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loopring

import (
	"encoding/json"
)

// TokenAmount The result of token amount
type TokenAmount struct {
	// Token
	TokenSymbol   *string    `json:"tokenSymbol,omitempty"`
	BaseOrderInfo *OrderInfo `json:"baseOrderInfo,omitempty"`
	UserOrderInfo *OrderInfo `json:"userOrderInfo,omitempty"`
	// The base cost of trade settlement
	TradeCost string `json:"tradeCost"`
}

// NewTokenAmount instantiates a new TokenAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenAmount(tradeCost string) *TokenAmount {
	this := TokenAmount{}
	this.TradeCost = tradeCost
	return &this
}

// NewTokenAmountWithDefaults instantiates a new TokenAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenAmountWithDefaults() *TokenAmount {
	this := TokenAmount{}
	return &this
}

// GetTokenSymbol returns the TokenSymbol field value if set, zero value otherwise.
func (o *TokenAmount) GetTokenSymbol() string {
	if o == nil || o.TokenSymbol == nil {
		var ret string
		return ret
	}
	return *o.TokenSymbol
}

// GetTokenSymbolOk returns a tuple with the TokenSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetTokenSymbolOk() (*string, bool) {
	if o == nil || o.TokenSymbol == nil {
		return nil, false
	}
	return o.TokenSymbol, true
}

// HasTokenSymbol returns a boolean if a field has been set.
func (o *TokenAmount) HasTokenSymbol() bool {
	if o != nil && o.TokenSymbol != nil {
		return true
	}

	return false
}

// SetTokenSymbol gets a reference to the given string and assigns it to the TokenSymbol field.
func (o *TokenAmount) SetTokenSymbol(v string) {
	o.TokenSymbol = &v
}

// GetBaseOrderInfo returns the BaseOrderInfo field value if set, zero value otherwise.
func (o *TokenAmount) GetBaseOrderInfo() OrderInfo {
	if o == nil || o.BaseOrderInfo == nil {
		var ret OrderInfo
		return ret
	}
	return *o.BaseOrderInfo
}

// GetBaseOrderInfoOk returns a tuple with the BaseOrderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetBaseOrderInfoOk() (*OrderInfo, bool) {
	if o == nil || o.BaseOrderInfo == nil {
		return nil, false
	}
	return o.BaseOrderInfo, true
}

// HasBaseOrderInfo returns a boolean if a field has been set.
func (o *TokenAmount) HasBaseOrderInfo() bool {
	if o != nil && o.BaseOrderInfo != nil {
		return true
	}

	return false
}

// SetBaseOrderInfo gets a reference to the given OrderInfo and assigns it to the BaseOrderInfo field.
func (o *TokenAmount) SetBaseOrderInfo(v OrderInfo) {
	o.BaseOrderInfo = &v
}

// GetUserOrderInfo returns the UserOrderInfo field value if set, zero value otherwise.
func (o *TokenAmount) GetUserOrderInfo() OrderInfo {
	if o == nil || o.UserOrderInfo == nil {
		var ret OrderInfo
		return ret
	}
	return *o.UserOrderInfo
}

// GetUserOrderInfoOk returns a tuple with the UserOrderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetUserOrderInfoOk() (*OrderInfo, bool) {
	if o == nil || o.UserOrderInfo == nil {
		return nil, false
	}
	return o.UserOrderInfo, true
}

// HasUserOrderInfo returns a boolean if a field has been set.
func (o *TokenAmount) HasUserOrderInfo() bool {
	if o != nil && o.UserOrderInfo != nil {
		return true
	}

	return false
}

// SetUserOrderInfo gets a reference to the given OrderInfo and assigns it to the UserOrderInfo field.
func (o *TokenAmount) SetUserOrderInfo(v OrderInfo) {
	o.UserOrderInfo = &v
}

// GetTradeCost returns the TradeCost field value
func (o *TokenAmount) GetTradeCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeCost
}

// GetTradeCostOk returns a tuple with the TradeCost field value
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetTradeCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeCost, true
}

// SetTradeCost sets field value
func (o *TokenAmount) SetTradeCost(v string) {
	o.TradeCost = v
}

func (o TokenAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenSymbol != nil {
		toSerialize["tokenSymbol"] = o.TokenSymbol
	}
	if o.BaseOrderInfo != nil {
		toSerialize["baseOrderInfo"] = o.BaseOrderInfo
	}
	if o.UserOrderInfo != nil {
		toSerialize["userOrderInfo"] = o.UserOrderInfo
	}
	if true {
		toSerialize["tradeCost"] = o.TradeCost
	}
	return json.Marshal(toSerialize)
}

type NullableTokenAmount struct {
	value *TokenAmount
	isSet bool
}

func (v NullableTokenAmount) Get() *TokenAmount {
	return v.value
}

func (v *NullableTokenAmount) Set(val *TokenAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenAmount(val *TokenAmount) *NullableTokenAmount {
	return &NullableTokenAmount{value: val, isSet: true}
}

func (v NullableTokenAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
